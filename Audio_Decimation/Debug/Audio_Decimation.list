
Audio_Decimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b29c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800b42c  0800b42c  0001b42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4b4  0800b4b4  00021100  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4b4  0800b4b4  0001b4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4bc  0800b4bc  00021100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4bc  0800b4bc  0001b4bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4c0  0800b4c0  0001b4c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001100  20000000  0800b4c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00021100  2**0
                  CONTENTS
 10 .bss          00009770  20001100  20001100  00021100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a870  2000a870  00021100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3a3  00000000  00000000  00021130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c78  00000000  00000000  0003d4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  00042150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001420  00000000  00000000  000437b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000256d7  00000000  00000000  00044bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9ed  00000000  00000000  0006a2a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1484  00000000  00000000  00086c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  00158118  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a28  00000000  00000000  001581d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00000cdd  00000000  00000000  0015dc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001100 	.word	0x20001100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b414 	.word	0x0800b414

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001104 	.word	0x20001104
 80001cc:	0800b414 	.word	0x0800b414

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <DMA1_Stream3_IRQHandler>:
static  DMA_HandleTypeDef hdma_spi_rx ;

static  I2S_HandleTypeDef hi2s ;

void DMA1_Stream3_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(  &hdma_spi_rx );
 80004d8:	4802      	ldr	r0, [pc, #8]	; (80004e4 <DMA1_Stream3_IRQHandler+0x10>)
 80004da:	f000 fd27 	bl	8000f2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	2000111c 	.word	0x2000111c

080004e8 <u8Microphone_Init>:


uint8_t u8Microphone_Init ( void  )
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b092      	sub	sp, #72	; 0x48
 80004ec:	af00      	add	r7, sp, #0


	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
 80004fc:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
	  __HAL_RCC_DMA1_CLK_ENABLE();
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
 8000510:	4b8b      	ldr	r3, [pc, #556]	; (8000740 <u8Microphone_Init+0x258>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a8a      	ldr	r2, [pc, #552]	; (8000740 <u8Microphone_Init+0x258>)
 8000516:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800051a:	6313      	str	r3, [r2, #48]	; 0x30
 800051c:	4b88      	ldr	r3, [pc, #544]	; (8000740 <u8Microphone_Init+0x258>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000524:	623b      	str	r3, [r7, #32]
 8000526:	6a3b      	ldr	r3, [r7, #32]

	  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2105      	movs	r1, #5
 800052c:	200e      	movs	r0, #14
 800052e:	f000 fbc0 	bl	8000cb2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000532:	200e      	movs	r0, #14
 8000534:	f000 fbd9 	bl	8000cea <HAL_NVIC_EnableIRQ>



	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	4b80      	ldr	r3, [pc, #512]	; (8000740 <u8Microphone_Init+0x258>)
 800053e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000540:	4a7f      	ldr	r2, [pc, #508]	; (8000740 <u8Microphone_Init+0x258>)
 8000542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000546:	6313      	str	r3, [r2, #48]	; 0x30
 8000548:	4b7d      	ldr	r3, [pc, #500]	; (8000740 <u8Microphone_Init+0x258>)
 800054a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000550:	61fb      	str	r3, [r7, #28]
 8000552:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
 8000558:	4b79      	ldr	r3, [pc, #484]	; (8000740 <u8Microphone_Init+0x258>)
 800055a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055c:	4a78      	ldr	r2, [pc, #480]	; (8000740 <u8Microphone_Init+0x258>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6313      	str	r3, [r2, #48]	; 0x30
 8000564:	4b76      	ldr	r3, [pc, #472]	; (8000740 <u8Microphone_Init+0x258>)
 8000566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000568:	f003 0304 	and.w	r3, r3, #4
 800056c:	61bb      	str	r3, [r7, #24]
 800056e:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000570:	2300      	movs	r3, #0
 8000572:	617b      	str	r3, [r7, #20]
 8000574:	4b72      	ldr	r3, [pc, #456]	; (8000740 <u8Microphone_Init+0x258>)
 8000576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000578:	4a71      	ldr	r2, [pc, #452]	; (8000740 <u8Microphone_Init+0x258>)
 800057a:	f043 0302 	orr.w	r3, r3, #2
 800057e:	6313      	str	r3, [r2, #48]	; 0x30
 8000580:	4b6f      	ldr	r3, [pc, #444]	; (8000740 <u8Microphone_Init+0x258>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000584:	f003 0302 	and.w	r3, r3, #2
 8000588:	617b      	str	r3, [r7, #20]
 800058a:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	4b6b      	ldr	r3, [pc, #428]	; (8000740 <u8Microphone_Init+0x258>)
 8000592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000594:	4a6a      	ldr	r2, [pc, #424]	; (8000740 <u8Microphone_Init+0x258>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6313      	str	r3, [r2, #48]	; 0x30
 800059c:	4b68      	ldr	r3, [pc, #416]	; (8000740 <u8Microphone_Init+0x258>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	f003 0301 	and.w	r3, r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
 80005a6:	693b      	ldr	r3, [r7, #16]
	    /* Peripheral clock enable */
	    __HAL_RCC_SPI2_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
 80005ac:	4b64      	ldr	r3, [pc, #400]	; (8000740 <u8Microphone_Init+0x258>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a63      	ldr	r2, [pc, #396]	; (8000740 <u8Microphone_Init+0x258>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b61      	ldr	r3, [pc, #388]	; (8000740 <u8Microphone_Init+0x258>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]

	    hi2s.Instance = SPI2;
 80005c4:	4b5f      	ldr	r3, [pc, #380]	; (8000744 <u8Microphone_Init+0x25c>)
 80005c6:	4a60      	ldr	r2, [pc, #384]	; (8000748 <u8Microphone_Init+0x260>)
 80005c8:	601a      	str	r2, [r3, #0]
	    hi2s.Init.Mode = I2S_MODE_MASTER_RX;
 80005ca:	4b5e      	ldr	r3, [pc, #376]	; (8000744 <u8Microphone_Init+0x25c>)
 80005cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005d0:	605a      	str	r2, [r3, #4]
	    hi2s.Init.Standard = I2S_STANDARD_PHILIPS;
 80005d2:	4b5c      	ldr	r3, [pc, #368]	; (8000744 <u8Microphone_Init+0x25c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
	    hi2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005d8:	4b5a      	ldr	r3, [pc, #360]	; (8000744 <u8Microphone_Init+0x25c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
	    hi2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80005de:	4b59      	ldr	r3, [pc, #356]	; (8000744 <u8Microphone_Init+0x25c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
	    hi2s.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80005e4:	4b57      	ldr	r3, [pc, #348]	; (8000744 <u8Microphone_Init+0x25c>)
 80005e6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80005ea:	615a      	str	r2, [r3, #20]
	    hi2s.Init.CPOL = I2S_CPOL_LOW;
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <u8Microphone_Init+0x25c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	619a      	str	r2, [r3, #24]
	    hi2s.Init.ClockSource = I2S_CLOCK_PLL;
 80005f2:	4b54      	ldr	r3, [pc, #336]	; (8000744 <u8Microphone_Init+0x25c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
	    hi2s.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80005f8:	4b52      	ldr	r3, [pc, #328]	; (8000744 <u8Microphone_Init+0x25c>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	621a      	str	r2, [r3, #32]
	    if (HAL_I2S_Init(&hi2s) != HAL_OK)
 80005fe:	4851      	ldr	r0, [pc, #324]	; (8000744 <u8Microphone_Init+0x25c>)
 8000600:	f001 f89a 	bl	8001738 <HAL_I2S_Init>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <u8Microphone_Init+0x126>
	    {
	     return 3U ;
 800060a:	2303      	movs	r3, #3
 800060c:	e094      	b.n	8000738 <u8Microphone_Init+0x250>
	    }


	  if( hi2s.Instance  == SPI2  )
 800060e:	4b4d      	ldr	r3, [pc, #308]	; (8000744 <u8Microphone_Init+0x25c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a4d      	ldr	r2, [pc, #308]	; (8000748 <u8Microphone_Init+0x260>)
 8000614:	4293      	cmp	r3, r2
 8000616:	f040 8088 	bne.w	800072a <u8Microphone_Init+0x242>
	  {
	  /** Initializes the peripherals clock
	  */
	    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800061a:	2301      	movs	r3, #1
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
	    PeriphClkInitStruct.PLLI2S.PLLI2SN = 369;
 800061e:	f240 1371 	movw	r3, #369	; 0x171
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
	    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8000624:	2306      	movs	r3, #6
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fd2b 	bl	8004088 <HAL_RCCEx_PeriphCLKConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <u8Microphone_Init+0x154>
	    {
	      return 1U ;
 8000638:	2301      	movs	r3, #1
 800063a:	e07d      	b.n	8000738 <u8Microphone_Init+0x250>
	    }



	    __HAL_RCC_GPIOC_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <u8Microphone_Init+0x258>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a3e      	ldr	r2, [pc, #248]	; (8000740 <u8Microphone_Init+0x258>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <u8Microphone_Init+0x258>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	4b38      	ldr	r3, [pc, #224]	; (8000740 <u8Microphone_Init+0x258>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	4a37      	ldr	r2, [pc, #220]	; (8000740 <u8Microphone_Init+0x258>)
 8000662:	f043 0302 	orr.w	r3, r3, #2
 8000666:	6313      	str	r3, [r2, #48]	; 0x30
 8000668:	4b35      	ldr	r3, [pc, #212]	; (8000740 <u8Microphone_Init+0x258>)
 800066a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	687b      	ldr	r3, [r7, #4]
	    PC2     ------> I2S2_ext_SD
	    PC3     ------> I2S2_SD
	    PB10     ------> I2S2_CK
	    PB12     ------> I2S2_WS
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000674:	2304      	movs	r3, #4
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2300      	movs	r3, #0
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000684:	2306      	movs	r3, #6
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000688:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800068c:	4619      	mov	r1, r3
 800068e:	482f      	ldr	r0, [pc, #188]	; (800074c <u8Microphone_Init+0x264>)
 8000690:	f000 feb6 	bl	8001400 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000694:	2308      	movs	r3, #8
 8000696:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006a4:	2305      	movs	r3, #5
 80006a6:	647b      	str	r3, [r7, #68]	; 0x44
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ac:	4619      	mov	r1, r3
 80006ae:	4827      	ldr	r0, [pc, #156]	; (800074c <u8Microphone_Init+0x264>)
 80006b0:	f000 fea6 	bl	8001400 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c2:	2300      	movs	r3, #0
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006c6:	2305      	movs	r3, #5
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006ce:	4619      	mov	r1, r3
 80006d0:	481f      	ldr	r0, [pc, #124]	; (8000750 <u8Microphone_Init+0x268>)
 80006d2:	f000 fe95 	bl	8001400 <HAL_GPIO_Init>

	    /* I2S DMA Init */
	    /* SPI_RX Init */
	    hdma_spi_rx.Instance = DMA1_Stream3;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <u8Microphone_Init+0x26c>)
 80006d8:	4a1f      	ldr	r2, [pc, #124]	; (8000758 <u8Microphone_Init+0x270>)
 80006da:	601a      	str	r2, [r3, #0]
	    hdma_spi_rx.Init.Channel = DMA_CHANNEL_0;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <u8Microphone_Init+0x26c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
	    hdma_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <u8Microphone_Init+0x26c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	    hdma_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <u8Microphone_Init+0x26c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
	    hdma_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006ee:	4b19      	ldr	r3, [pc, #100]	; (8000754 <u8Microphone_Init+0x26c>)
 80006f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f4:	611a      	str	r2, [r3, #16]
	    hdma_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <u8Microphone_Init+0x26c>)
 80006f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006fc:	615a      	str	r2, [r3, #20]
	    hdma_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <u8Microphone_Init+0x26c>)
 8000700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000704:	619a      	str	r2, [r3, #24]
	    hdma_spi_rx.Init.Mode = DMA_CIRCULAR;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <u8Microphone_Init+0x26c>)
 8000708:	f44f 7280 	mov.w	r2, #256	; 0x100
 800070c:	61da      	str	r2, [r3, #28]
	    hdma_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <u8Microphone_Init+0x26c>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
	    hdma_spi_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <u8Microphone_Init+0x26c>)
 8000716:	2200      	movs	r2, #0
 8000718:	625a      	str	r2, [r3, #36]	; 0x24

	    if (HAL_DMA_Init(&hdma_spi_rx) != HAL_OK)
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <u8Microphone_Init+0x26c>)
 800071c:	f000 fb00 	bl	8000d20 <HAL_DMA_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <u8Microphone_Init+0x242>
	    {
	      return  2U ;
 8000726:	2302      	movs	r3, #2
 8000728:	e006      	b.n	8000738 <u8Microphone_Init+0x250>
	    }
	  }

	    __HAL_LINKDMA( &hi2s , hdmarx , hdma_spi_rx );
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <u8Microphone_Init+0x25c>)
 800072c:	4a09      	ldr	r2, [pc, #36]	; (8000754 <u8Microphone_Init+0x26c>)
 800072e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <u8Microphone_Init+0x26c>)
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <u8Microphone_Init+0x25c>)
 8000734:	639a      	str	r2, [r3, #56]	; 0x38



	    return 0U ;
 8000736:	2300      	movs	r3, #0

}
 8000738:	4618      	mov	r0, r3
 800073a:	3748      	adds	r7, #72	; 0x48
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	2000117c 	.word	0x2000117c
 8000748:	40003800 	.word	0x40003800
 800074c:	40020800 	.word	0x40020800
 8000750:	40020400 	.word	0x40020400
 8000754:	2000111c 	.word	0x2000111c
 8000758:	40026058 	.word	0x40026058

0800075c <u8Microphone_Start>:
uint8_t u8Microphone_Start ( uint16_t * u16buffer  , uint16_t  datalen  )
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	807b      	strh	r3, [r7, #2]
	if  ( HAL_OK !=  HAL_I2S_Receive_DMA(&hi2s , u16buffer  , datalen ) )
 8000768:	887b      	ldrh	r3, [r7, #2]
 800076a:	461a      	mov	r2, r3
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <u8Microphone_Start+0x2c>)
 8000770:	f001 f92c 	bl	80019cc <HAL_I2S_Receive_DMA>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <u8Microphone_Start+0x22>
	{
		return 1U ;
 800077a:	2301      	movs	r3, #1
 800077c:	e000      	b.n	8000780 <u8Microphone_Start+0x24>
	}
	return  0U ;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000117c 	.word	0x2000117c

0800078c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b084      	sub	sp, #16
 8000790:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000792:	f000 f91d 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000796:	f000 f815 	bl	80007c4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  MX_USB_DEVICE_Init();
 800079a:	f009 ff01 	bl	800a5a0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  BaseType_t    xReturned = xTaskCreate(
 800079e:	2300      	movs	r3, #0
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2301      	movs	r3, #1
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2300      	movs	r3, #0
 80007a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007ac:	4903      	ldr	r1, [pc, #12]	; (80007bc <main+0x30>)
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <main+0x34>)
 80007b0:	f008 f82b 	bl	800880a <xTaskCreate>
 80007b4:	6078      	str	r0, [r7, #4]
  {
	  /*Reset */
  }

  /* start system */
  vTaskStartScheduler();
 80007b6:	f008 f9a1 	bl	8008afc <vTaskStartScheduler>

  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0x2e>
 80007bc:	0800b42c 	.word	0x0800b42c
 80007c0:	0800a489 	.word	0x0800a489

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b094      	sub	sp, #80	; 0x50
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0320 	add.w	r3, r7, #32
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00a fe16 	bl	800b404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e8:	2300      	movs	r3, #0
 80007ea:	60bb      	str	r3, [r7, #8]
 80007ec:	4b28      	ldr	r3, [pc, #160]	; (8000890 <SystemClock_Config+0xcc>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	4a27      	ldr	r2, [pc, #156]	; (8000890 <SystemClock_Config+0xcc>)
 80007f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f6:	6413      	str	r3, [r2, #64]	; 0x40
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <SystemClock_Config+0xcc>)
 80007fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000804:	2300      	movs	r3, #0
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	4b22      	ldr	r3, [pc, #136]	; (8000894 <SystemClock_Config+0xd0>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a21      	ldr	r2, [pc, #132]	; (8000894 <SystemClock_Config+0xd0>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1f      	ldr	r3, [pc, #124]	; (8000894 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000834:	2308      	movs	r3, #8
 8000836:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000838:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800083c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083e:	2302      	movs	r3, #2
 8000840:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000842:	2307      	movs	r3, #7
 8000844:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	4618      	mov	r0, r3
 800084c:	f002 ffac 	bl	80037a8 <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000856:	f000 f81f 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2302      	movs	r3, #2
 8000860:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000866:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800086c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2105      	movs	r1, #5
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fa0d 	bl	8003c98 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000884:	f000 f808 	bl	8000898 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3750      	adds	r7, #80	; 0x50
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40007000 	.word	0x40007000

08000898 <Error_Handler>:

void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <HAL_MspInit+0x54>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	4a11      	ldr	r2, [pc, #68]	; (80008f8 <HAL_MspInit+0x54>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	; 0x44
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <HAL_MspInit+0x54>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <HAL_MspInit+0x54>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	210f      	movs	r1, #15
 80008e6:	f06f 0001 	mvn.w	r0, #1
 80008ea:	f000 f9e2 	bl	8000cb2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f8a2 	bl	8000a74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000930:	f008 fd2c 	bl	800938c <xTaskGetSchedulerState>
 8000934:	4603      	mov	r3, r0
 8000936:	2b01      	cmp	r3, #1
 8000938:	d001      	beq.n	800093e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800093a:	f009 fb15 	bl	8009f68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <OTG_FS_IRQHandler+0x10>)
 800094a:	f001 fdff 	bl	800254c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000a144 	.word	0x2000a144

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000980:	480d      	ldr	r0, [pc, #52]	; (80009b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000982:	490e      	ldr	r1, [pc, #56]	; (80009bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000984:	4a0e      	ldr	r2, [pc, #56]	; (80009c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0b      	ldr	r2, [pc, #44]	; (80009c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000998:	4c0b      	ldr	r4, [pc, #44]	; (80009c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a6:	f7ff ffd7 	bl	8000958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009aa:	f00a fcf9 	bl	800b3a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff feed 	bl	800078c <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	20001100 	.word	0x20001100
  ldr r2, =_sidata
 80009c0:	0800b4c4 	.word	0x0800b4c4
  ldr r2, =_sbss
 80009c4:	20001100 	.word	0x20001100
  ldr r4, =_ebss
 80009c8:	2000a870 	.word	0x2000a870

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f94f 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff ff4e 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f967 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f92f 	bl	8000cb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	200011c4 	.word	0x200011c4

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200011c4 	.word	0x200011c4

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	; (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	; (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	; (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	; 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff29 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff3e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff31 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff feb6 	bl	8000a9c <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e099      	b.n	8000e70 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2202      	movs	r2, #2
 8000d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2200      	movs	r2, #0
 8000d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0201 	bic.w	r2, r2, #1
 8000d5a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d5c:	e00f      	b.n	8000d7e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d5e:	f7ff fe9d 	bl	8000a9c <HAL_GetTick>
 8000d62:	4602      	mov	r2, r0
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1ad3      	subs	r3, r2, r3
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d908      	bls.n	8000d7e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2220      	movs	r2, #32
 8000d70:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2203      	movs	r2, #3
 8000d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e078      	b.n	8000e70 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1e8      	bne.n	8000d5e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <HAL_DMA_Init+0x158>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685a      	ldr	r2, [r3, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dc2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a1b      	ldr	r3, [r3, #32]
 8000dc8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	2b04      	cmp	r3, #4
 8000dd6:	d107      	bne.n	8000de8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4313      	orrs	r3, r2
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	f023 0307 	bic.w	r3, r3, #7
 8000dfe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d117      	bne.n	8000e42 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d00e      	beq.n	8000e42 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f000 fa6f 	bl	8001308 <DMA_CheckFifoParam>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d008      	beq.n	8000e42 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2240      	movs	r2, #64	; 0x40
 8000e34:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e016      	b.n	8000e70 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 fa26 	bl	800129c <DMA_CalcBaseAndBitshift>
 8000e50:	4603      	mov	r3, r0
 8000e52:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e58:	223f      	movs	r2, #63	; 0x3f
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2200      	movs	r2, #0
 8000e64:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	f010803f 	.word	0xf010803f

08000e7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d101      	bne.n	8000ea2 <HAL_DMA_Start_IT+0x26>
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	e040      	b.n	8000f24 <HAL_DMA_Start_IT+0xa8>
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d12f      	bne.n	8000f16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2202      	movs	r2, #2
 8000eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f000 f9b8 	bl	8001240 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ed4:	223f      	movs	r2, #63	; 0x3f
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0216 	orr.w	r2, r2, #22
 8000eea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d007      	beq.n	8000f04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f042 0208 	orr.w	r2, r2, #8
 8000f02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e005      	b.n	8000f22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f38:	4b8e      	ldr	r3, [pc, #568]	; (8001174 <HAL_DMA_IRQHandler+0x248>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a8e      	ldr	r2, [pc, #568]	; (8001178 <HAL_DMA_IRQHandler+0x24c>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0a9b      	lsrs	r3, r3, #10
 8000f44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f56:	2208      	movs	r2, #8
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01a      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0304 	and.w	r3, r3, #4
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f022 0204 	bic.w	r2, r2, #4
 8000f7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f84:	2208      	movs	r2, #8
 8000f86:	409a      	lsls	r2, r3
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	409a      	lsls	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d012      	beq.n	8000fce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	695b      	ldr	r3, [r3, #20]
 8000fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fba:	2201      	movs	r2, #1
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fc6:	f043 0202 	orr.w	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	409a      	lsls	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d012      	beq.n	8001004 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d00b      	beq.n	8001004 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ffc:	f043 0204 	orr.w	r2, r3, #4
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001008:	2210      	movs	r2, #16
 800100a:	409a      	lsls	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d043      	beq.n	800109c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b00      	cmp	r3, #0
 8001020:	d03c      	beq.n	800109c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001026:	2210      	movs	r2, #16
 8001028:	409a      	lsls	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d018      	beq.n	800106e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d108      	bne.n	800105c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2b00      	cmp	r3, #0
 8001050:	d024      	beq.n	800109c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	4798      	blx	r3
 800105a:	e01f      	b.n	800109c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01b      	beq.n	800109c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
 800106c:	e016      	b.n	800109c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001078:	2b00      	cmp	r3, #0
 800107a:	d107      	bne.n	800108c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f022 0208 	bic.w	r2, r2, #8
 800108a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010a0:	2220      	movs	r2, #32
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	f000 808f 	beq.w	80011cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 8087 	beq.w	80011cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c2:	2220      	movs	r2, #32
 80010c4:	409a      	lsls	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b05      	cmp	r3, #5
 80010d4:	d136      	bne.n	8001144 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f022 0216 	bic.w	r2, r2, #22
 80010e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	695a      	ldr	r2, [r3, #20]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d103      	bne.n	8001106 <HAL_DMA_IRQHandler+0x1da>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f022 0208 	bic.w	r2, r2, #8
 8001114:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800111a:	223f      	movs	r2, #63	; 0x3f
 800111c:	409a      	lsls	r2, r3
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2201      	movs	r2, #1
 8001126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001136:	2b00      	cmp	r3, #0
 8001138:	d07e      	beq.n	8001238 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	4798      	blx	r3
        }
        return;
 8001142:	e079      	b.n	8001238 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d01d      	beq.n	800118e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10d      	bne.n	800117c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	2b00      	cmp	r3, #0
 8001166:	d031      	beq.n	80011cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
 8001170:	e02c      	b.n	80011cc <HAL_DMA_IRQHandler+0x2a0>
 8001172:	bf00      	nop
 8001174:	20000000 	.word	0x20000000
 8001178:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001180:	2b00      	cmp	r3, #0
 8001182:	d023      	beq.n	80011cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	4798      	blx	r3
 800118c:	e01e      	b.n	80011cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10f      	bne.n	80011bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0210 	bic.w	r2, r2, #16
 80011aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d032      	beq.n	800123a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d022      	beq.n	8001226 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2205      	movs	r2, #5
 80011e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	429a      	cmp	r2, r3
 8001202:	d307      	bcc.n	8001214 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f2      	bne.n	80011f8 <HAL_DMA_IRQHandler+0x2cc>
 8001212:	e000      	b.n	8001216 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001214:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d005      	beq.n	800123a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
 8001236:	e000      	b.n	800123a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001238:	bf00      	nop
    }
  }
}
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
 800124c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800125c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b40      	cmp	r3, #64	; 0x40
 800126c:	d108      	bne.n	8001280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	687a      	ldr	r2, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800127e:	e007      	b.n	8001290 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	68ba      	ldr	r2, [r7, #8]
 8001286:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	60da      	str	r2, [r3, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3b10      	subs	r3, #16
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <DMA_CalcBaseAndBitshift+0x64>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <DMA_CalcBaseAndBitshift+0x68>)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d909      	bls.n	80012de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012d2:	f023 0303 	bic.w	r3, r3, #3
 80012d6:	1d1a      	adds	r2, r3, #4
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	659a      	str	r2, [r3, #88]	; 0x58
 80012dc:	e007      	b.n	80012ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	aaaaaaab 	.word	0xaaaaaaab
 8001304:	0800b4ac 	.word	0x0800b4ac

08001308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d11f      	bne.n	8001362 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d856      	bhi.n	80013d6 <DMA_CheckFifoParam+0xce>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <DMA_CheckFifoParam+0x28>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001341 	.word	0x08001341
 8001334:	08001353 	.word	0x08001353
 8001338:	08001341 	.word	0x08001341
 800133c:	080013d7 	.word	0x080013d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d046      	beq.n	80013da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001350:	e043      	b.n	80013da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800135a:	d140      	bne.n	80013de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001360:	e03d      	b.n	80013de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800136a:	d121      	bne.n	80013b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d837      	bhi.n	80013e2 <DMA_CheckFifoParam+0xda>
 8001372:	a201      	add	r2, pc, #4	; (adr r2, 8001378 <DMA_CheckFifoParam+0x70>)
 8001374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001378:	08001389 	.word	0x08001389
 800137c:	0800138f 	.word	0x0800138f
 8001380:	08001389 	.word	0x08001389
 8001384:	080013a1 	.word	0x080013a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	73fb      	strb	r3, [r7, #15]
      break;
 800138c:	e030      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001392:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d025      	beq.n	80013e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800139e:	e022      	b.n	80013e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80013a8:	d11f      	bne.n	80013ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80013ae:	e01c      	b.n	80013ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d903      	bls.n	80013be <DMA_CheckFifoParam+0xb6>
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	2b03      	cmp	r3, #3
 80013ba:	d003      	beq.n	80013c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80013bc:	e018      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
      break;
 80013c2:	e015      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00e      	beq.n	80013ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
      break;
 80013d4:	e00b      	b.n	80013ee <DMA_CheckFifoParam+0xe6>
      break;
 80013d6:	bf00      	nop
 80013d8:	e00a      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      break;
 80013da:	bf00      	nop
 80013dc:	e008      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      break;
 80013de:	bf00      	nop
 80013e0:	e006      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      break;
 80013e2:	bf00      	nop
 80013e4:	e004      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      break;
 80013e6:	bf00      	nop
 80013e8:	e002      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80013ea:	bf00      	nop
 80013ec:	e000      	b.n	80013f0 <DMA_CheckFifoParam+0xe8>
      break;
 80013ee:	bf00      	nop
    }
  } 
  
  return status; 
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop

08001400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	e16b      	b.n	80016f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800141c:	2201      	movs	r2, #1
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	429a      	cmp	r2, r3
 8001436:	f040 815a 	bne.w	80016ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	2b01      	cmp	r3, #1
 8001444:	d005      	beq.n	8001452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800144e:	2b02      	cmp	r3, #2
 8001450:	d130      	bne.n	80014b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	2203      	movs	r2, #3
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001488:	2201      	movs	r2, #1
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	4013      	ands	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f003 0201 	and.w	r2, r3, #1
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d017      	beq.n	80014f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	2203      	movs	r2, #3
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f003 0303 	and.w	r3, r3, #3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d123      	bne.n	8001544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	08da      	lsrs	r2, r3, #3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3208      	adds	r2, #8
 8001504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	691a      	ldr	r2, [r3, #16]
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4313      	orrs	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	2203      	movs	r2, #3
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 0203 	and.w	r2, r3, #3
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80b4 	beq.w	80016ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b60      	ldr	r3, [pc, #384]	; (800170c <HAL_GPIO_Init+0x30c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	4a5f      	ldr	r2, [pc, #380]	; (800170c <HAL_GPIO_Init+0x30c>)
 8001590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001594:	6453      	str	r3, [r2, #68]	; 0x44
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <HAL_GPIO_Init+0x30c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a2:	4a5b      	ldr	r2, [pc, #364]	; (8001710 <HAL_GPIO_Init+0x310>)
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	220f      	movs	r2, #15
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4013      	ands	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a52      	ldr	r2, [pc, #328]	; (8001714 <HAL_GPIO_Init+0x314>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d02b      	beq.n	8001626 <HAL_GPIO_Init+0x226>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a51      	ldr	r2, [pc, #324]	; (8001718 <HAL_GPIO_Init+0x318>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d025      	beq.n	8001622 <HAL_GPIO_Init+0x222>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a50      	ldr	r2, [pc, #320]	; (800171c <HAL_GPIO_Init+0x31c>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d01f      	beq.n	800161e <HAL_GPIO_Init+0x21e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a4f      	ldr	r2, [pc, #316]	; (8001720 <HAL_GPIO_Init+0x320>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d019      	beq.n	800161a <HAL_GPIO_Init+0x21a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a4e      	ldr	r2, [pc, #312]	; (8001724 <HAL_GPIO_Init+0x324>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0x216>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a4d      	ldr	r2, [pc, #308]	; (8001728 <HAL_GPIO_Init+0x328>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00d      	beq.n	8001612 <HAL_GPIO_Init+0x212>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4c      	ldr	r2, [pc, #304]	; (800172c <HAL_GPIO_Init+0x32c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <HAL_GPIO_Init+0x20e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4b      	ldr	r2, [pc, #300]	; (8001730 <HAL_GPIO_Init+0x330>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_GPIO_Init+0x20a>
 8001606:	2307      	movs	r3, #7
 8001608:	e00e      	b.n	8001628 <HAL_GPIO_Init+0x228>
 800160a:	2308      	movs	r3, #8
 800160c:	e00c      	b.n	8001628 <HAL_GPIO_Init+0x228>
 800160e:	2306      	movs	r3, #6
 8001610:	e00a      	b.n	8001628 <HAL_GPIO_Init+0x228>
 8001612:	2305      	movs	r3, #5
 8001614:	e008      	b.n	8001628 <HAL_GPIO_Init+0x228>
 8001616:	2304      	movs	r3, #4
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x228>
 800161a:	2303      	movs	r3, #3
 800161c:	e004      	b.n	8001628 <HAL_GPIO_Init+0x228>
 800161e:	2302      	movs	r3, #2
 8001620:	e002      	b.n	8001628 <HAL_GPIO_Init+0x228>
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_GPIO_Init+0x228>
 8001626:	2300      	movs	r3, #0
 8001628:	69fa      	ldr	r2, [r7, #28]
 800162a:	f002 0203 	and.w	r2, r2, #3
 800162e:	0092      	lsls	r2, r2, #2
 8001630:	4093      	lsls	r3, r2
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4313      	orrs	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <HAL_GPIO_Init+0x310>)
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	089b      	lsrs	r3, r3, #2
 800163e:	3302      	adds	r3, #2
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001646:	4b3b      	ldr	r3, [pc, #236]	; (8001734 <HAL_GPIO_Init+0x334>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	43db      	mvns	r3, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4013      	ands	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800166a:	4a32      	ldr	r2, [pc, #200]	; (8001734 <HAL_GPIO_Init+0x334>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_GPIO_Init+0x334>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001694:	4a27      	ldr	r2, [pc, #156]	; (8001734 <HAL_GPIO_Init+0x334>)
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_GPIO_Init+0x334>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016be:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <HAL_GPIO_Init+0x334>)
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_GPIO_Init+0x334>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <HAL_GPIO_Init+0x334>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	2b0f      	cmp	r3, #15
 80016f8:	f67f ae90 	bls.w	800141c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3724      	adds	r7, #36	; 0x24
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40020000 	.word	0x40020000
 8001718:	40020400 	.word	0x40020400
 800171c:	40020800 	.word	0x40020800
 8001720:	40020c00 	.word	0x40020c00
 8001724:	40021000 	.word	0x40021000
 8001728:	40021400 	.word	0x40021400
 800172c:	40021800 	.word	0x40021800
 8001730:	40021c00 	.word	0x40021c00
 8001734:	40013c00 	.word	0x40013c00

08001738 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d101      	bne.n	800174a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e128      	b.n	800199c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a90      	ldr	r2, [pc, #576]	; (80019a4 <HAL_I2S_Init+0x26c>)
 8001762:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f927 	bl	80019b8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2202      	movs	r2, #2
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001780:	f023 030f 	bic.w	r3, r3, #15
 8001784:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2202      	movs	r2, #2
 800178c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d060      	beq.n	8001858 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800179e:	2310      	movs	r3, #16
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e001      	b.n	80017a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80017a4:	2320      	movs	r3, #32
 80017a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2b20      	cmp	r3, #32
 80017ae:	d802      	bhi.n	80017b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f002 fd48 	bl	800424c <HAL_RCCEx_GetPeriphCLKFreq>
 80017bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017c6:	d125      	bne.n	8001814 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d010      	beq.n	80017f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80017da:	4613      	mov	r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	461a      	mov	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	3305      	adds	r3, #5
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	e01f      	b.n	8001832 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	3305      	adds	r3, #5
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	e00e      	b.n	8001832 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fbb2 f2f3 	udiv	r2, r2, r3
 800181c:	4613      	mov	r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	4413      	add	r3, r2
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	461a      	mov	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	3305      	adds	r3, #5
 8001830:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	4a5c      	ldr	r2, [pc, #368]	; (80019a8 <HAL_I2S_Init+0x270>)
 8001836:	fba2 2303 	umull	r2, r3, r2, r3
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	021b      	lsls	r3, r3, #8
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	e003      	b.n	8001860 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001858:	2302      	movs	r3, #2
 800185a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d902      	bls.n	800186c <HAL_I2S_Init+0x134>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2bff      	cmp	r3, #255	; 0xff
 800186a:	d907      	bls.n	800187c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	f043 0210 	orr.w	r2, r3, #16
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e08f      	b.n	800199c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	ea42 0103 	orr.w	r1, r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	430a      	orrs	r2, r1
 800188e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800189a:	f023 030f 	bic.w	r3, r3, #15
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6851      	ldr	r1, [r2, #4]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6892      	ldr	r2, [r2, #8]
 80018a6:	4311      	orrs	r1, r2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	68d2      	ldr	r2, [r2, #12]
 80018ac:	4311      	orrs	r1, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6992      	ldr	r2, [r2, #24]
 80018b2:	430a      	orrs	r2, r1
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d161      	bne.n	800198c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_I2S_Init+0x274>)
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a37      	ldr	r2, [pc, #220]	; (80019b0 <HAL_I2S_Init+0x278>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_I2S_Init+0x1a4>
 80018d8:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_I2S_Init+0x27c>)
 80018da:	e001      	b.n	80018e0 <HAL_I2S_Init+0x1a8>
 80018dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	4932      	ldr	r1, [pc, #200]	; (80019b0 <HAL_I2S_Init+0x278>)
 80018e8:	428a      	cmp	r2, r1
 80018ea:	d101      	bne.n	80018f0 <HAL_I2S_Init+0x1b8>
 80018ec:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <HAL_I2S_Init+0x27c>)
 80018ee:	e001      	b.n	80018f4 <HAL_I2S_Init+0x1bc>
 80018f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80018f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80018f8:	f023 030f 	bic.w	r3, r3, #15
 80018fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2b      	ldr	r2, [pc, #172]	; (80019b0 <HAL_I2S_Init+0x278>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d101      	bne.n	800190c <HAL_I2S_Init+0x1d4>
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_I2S_Init+0x27c>)
 800190a:	e001      	b.n	8001910 <HAL_I2S_Init+0x1d8>
 800190c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001910:	2202      	movs	r2, #2
 8001912:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_I2S_Init+0x278>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d101      	bne.n	8001922 <HAL_I2S_Init+0x1ea>
 800191e:	4b25      	ldr	r3, [pc, #148]	; (80019b4 <HAL_I2S_Init+0x27c>)
 8001920:	e001      	b.n	8001926 <HAL_I2S_Init+0x1ee>
 8001922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001932:	d003      	beq.n	800193c <HAL_I2S_Init+0x204>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d103      	bne.n	8001944 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800193c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	e001      	b.n	8001948 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001952:	4313      	orrs	r3, r2
 8001954:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800195c:	4313      	orrs	r3, r2
 800195e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001966:	4313      	orrs	r3, r2
 8001968:	b29a      	uxth	r2, r3
 800196a:	897b      	ldrh	r3, [r7, #10]
 800196c:	4313      	orrs	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001974:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_I2S_Init+0x278>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d101      	bne.n	8001984 <HAL_I2S_Init+0x24c>
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <HAL_I2S_Init+0x27c>)
 8001982:	e001      	b.n	8001988 <HAL_I2S_Init+0x250>
 8001984:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001988:	897a      	ldrh	r2, [r7, #10]
 800198a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	08001ce5 	.word	0x08001ce5
 80019a8:	cccccccd 	.word	0xcccccccd
 80019ac:	08001df9 	.word	0x08001df9
 80019b0:	40003800 	.word	0x40003800
 80019b4:	40003400 	.word	0x40003400

080019b8 <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	4613      	mov	r3, r2
 80019d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d002      	beq.n	80019e6 <HAL_I2S_Receive_DMA+0x1a>
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0a1      	b.n	8001b2e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d101      	bne.n	80019fa <HAL_I2S_Receive_DMA+0x2e>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e099      	b.n	8001b2e <HAL_I2S_Receive_DMA+0x162>
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d005      	beq.n	8001a1a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
 8001a18:	e089      	b.n	8001b2e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d002      	beq.n	8001a46 <HAL_I2S_Receive_DMA+0x7a>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b05      	cmp	r3, #5
 8001a44:	d10a      	bne.n	8001a5c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001a46:	88fb      	ldrh	r3, [r7, #6]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	865a      	strh	r2, [r3, #50]	; 0x32
 8001a5a:	e005      	b.n	8001a68 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	88fa      	ldrh	r2, [r7, #6]
 8001a60:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	88fa      	ldrh	r2, [r7, #6]
 8001a66:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a6c:	4a32      	ldr	r2, [pc, #200]	; (8001b38 <HAL_I2S_Receive_DMA+0x16c>)
 8001a6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a74:	4a31      	ldr	r2, [pc, #196]	; (8001b3c <HAL_I2S_Receive_DMA+0x170>)
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	4a30      	ldr	r2, [pc, #192]	; (8001b40 <HAL_I2S_Receive_DMA+0x174>)
 8001a7e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	69db      	ldr	r3, [r3, #28]
 8001a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001a8e:	d10a      	bne.n	8001aa6 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	330c      	adds	r3, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001abc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001abe:	f7ff f9dd 	bl	8000e7c <HAL_DMA_Start_IT>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00f      	beq.n	8001ae8 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f043 0208 	orr.w	r2, r3, #8
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e022      	b.n	8001b2e <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d107      	bne.n	8001b06 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69da      	ldr	r2, [r3, #28]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b04:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d107      	bne.n	8001b24 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0201 	orr.w	r2, r2, #1
 8001b22:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	08001bc3 	.word	0x08001bc3
 8001b3c:	08001b81 	.word	0x08001b81
 8001b40:	08001bdf 	.word	0x08001bdf

08001b44 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 0201 	bic.w	r2, r2, #1
 8001ba4:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f008 fc51 	bl	800a45c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff ffc1 	bl	8001b58 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	685a      	ldr	r2, [r3, #4]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0203 	bic.w	r2, r2, #3
 8001bfa:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f043 0208 	orr.w	r2, r3, #8
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001c1c:	68f8      	ldr	r0, [r7, #12]
 8001c1e:	f7ff ffa5 	bl	8001b6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	881a      	ldrh	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	1c9a      	adds	r2, r3, #2
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10e      	bne.n	8001c7e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001c6e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff63 	bl	8001b44 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	b292      	uxth	r2, r2
 8001c9a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	1c9a      	adds	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ccc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f008 fbc0 	bl	800a45c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d13a      	bne.n	8001d76 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d109      	bne.n	8001d1e <I2S_IRQHandler+0x3a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d14:	2b40      	cmp	r3, #64	; 0x40
 8001d16:	d102      	bne.n	8001d1e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f7ff ffb4 	bl	8001c86 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b40      	cmp	r3, #64	; 0x40
 8001d26:	d126      	bne.n	8001d76 <I2S_IRQHandler+0x92>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d11f      	bne.n	8001d76 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001d44:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff fefb 	bl	8001b6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d136      	bne.n	8001df0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d109      	bne.n	8001da0 <I2S_IRQHandler+0xbc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d96:	2b80      	cmp	r3, #128	; 0x80
 8001d98:	d102      	bne.n	8001da0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ff45 	bl	8001c2a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d122      	bne.n	8001df0 <I2S_IRQHandler+0x10c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d11b      	bne.n	8001df0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dc6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f043 0204 	orr.w	r2, r3, #4
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff febe 	bl	8001b6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	3718      	adds	r7, #24
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b088      	sub	sp, #32
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a92      	ldr	r2, [pc, #584]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001e12:	4b92      	ldr	r3, [pc, #584]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e14:	e001      	b.n	8001e1a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001e16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a8b      	ldr	r2, [pc, #556]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001e30:	4b8a      	ldr	r3, [pc, #552]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e32:	e001      	b.n	8001e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	d004      	beq.n	8001e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f040 8099 	bne.w	8001f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d107      	bne.n	8001e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f925 	bl	80020b4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d107      	bne.n	8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f9c8 	bl	8002214 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b40      	cmp	r3, #64	; 0x40
 8001e8c:	d13a      	bne.n	8001f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d035      	beq.n	8001f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001ea2:	4b6e      	ldr	r3, [pc, #440]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ea4:	e001      	b.n	8001eaa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4969      	ldr	r1, [pc, #420]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001eb2:	428b      	cmp	r3, r1
 8001eb4:	d101      	bne.n	8001eba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001eb6:	4b69      	ldr	r3, [pc, #420]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001eb8:	e001      	b.n	8001ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ed2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	f043 0202 	orr.w	r2, r3, #2
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff fe34 	bl	8001b6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	f040 80c3 	bne.w	8002096 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f003 0320 	and.w	r3, r3, #32
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80bd 	beq.w	8002096 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f2a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a49      	ldr	r2, [pc, #292]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001f36:	4b49      	ldr	r3, [pc, #292]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f38:	e001      	b.n	8001f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4944      	ldr	r1, [pc, #272]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f46:	428b      	cmp	r3, r1
 8001f48:	d101      	bne.n	8001f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001f4a:	4b44      	ldr	r3, [pc, #272]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f4c:	e001      	b.n	8001f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f56:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	f043 0204 	orr.w	r2, r3, #4
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff fdf6 	bl	8001b6c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f80:	e089      	b.n	8002096 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d107      	bne.n	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f8be 	bl	8002118 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8fd 	bl	80021b0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbc:	2b40      	cmp	r3, #64	; 0x40
 8001fbe:	d12f      	bne.n	8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d02a      	beq.n	8002020 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fd8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001fe4:	4b1d      	ldr	r3, [pc, #116]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe6:	e001      	b.n	8001fec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001fe8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4919      	ldr	r1, [pc, #100]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001ff4:	428b      	cmp	r3, r1
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001ffa:	e001      	b.n	8002000 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002000:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002004:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f043 0202 	orr.w	r2, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff fda6 	bl	8001b6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b08      	cmp	r3, #8
 8002028:	d136      	bne.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f003 0320 	and.w	r3, r3, #32
 8002030:	2b00      	cmp	r3, #0
 8002032:	d031      	beq.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d101      	bne.n	8002042 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800203e:	4b07      	ldr	r3, [pc, #28]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002040:	e001      	b.n	8002046 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002042:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4902      	ldr	r1, [pc, #8]	; (8002058 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800204e:	428b      	cmp	r3, r1
 8002050:	d106      	bne.n	8002060 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002052:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002054:	e006      	b.n	8002064 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002056:	bf00      	nop
 8002058:	40003800 	.word	0x40003800
 800205c:	40003400 	.word	0x40003400
 8002060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002064:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002068:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002078:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f043 0204 	orr.w	r2, r3, #4
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fd6c 	bl	8001b6c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002094:	e000      	b.n	8002098 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002096:	bf00      	nop
}
 8002098:	bf00      	nop
 800209a:	3720      	adds	r7, #32
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	1c99      	adds	r1, r3, #2
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6251      	str	r1, [r2, #36]	; 0x24
 80020c6:	881a      	ldrh	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d113      	bne.n	800210e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffc9 	bl	80020a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002124:	1c99      	adds	r1, r3, #2
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6251      	str	r1, [r2, #36]	; 0x24
 800212a:	8819      	ldrh	r1, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <I2SEx_TxISR_I2SExt+0x90>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <I2SEx_TxISR_I2SExt+0x22>
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <I2SEx_TxISR_I2SExt+0x94>)
 8002138:	e001      	b.n	800213e <I2SEx_TxISR_I2SExt+0x26>
 800213a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800213e:	460a      	mov	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	3b01      	subs	r3, #1
 800214a:	b29a      	uxth	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d121      	bne.n	800219e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a12      	ldr	r2, [pc, #72]	; (80021a8 <I2SEx_TxISR_I2SExt+0x90>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <I2SEx_TxISR_I2SExt+0x50>
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <I2SEx_TxISR_I2SExt+0x94>)
 8002166:	e001      	b.n	800216c <I2SEx_TxISR_I2SExt+0x54>
 8002168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	490d      	ldr	r1, [pc, #52]	; (80021a8 <I2SEx_TxISR_I2SExt+0x90>)
 8002174:	428b      	cmp	r3, r1
 8002176:	d101      	bne.n	800217c <I2SEx_TxISR_I2SExt+0x64>
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <I2SEx_TxISR_I2SExt+0x94>)
 800217a:	e001      	b.n	8002180 <I2SEx_TxISR_I2SExt+0x68>
 800217c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002184:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d106      	bne.n	800219e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff81 	bl	80020a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40003800 	.word	0x40003800
 80021ac:	40003400 	.word	0x40003400

080021b0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68d8      	ldr	r0, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	1c99      	adds	r1, r3, #2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80021c8:	b282      	uxth	r2, r0
 80021ca:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d113      	bne.n	800220c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021f2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff ff4a 	bl	80020a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a20      	ldr	r2, [pc, #128]	; (80022a4 <I2SEx_RxISR_I2SExt+0x90>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <I2SEx_RxISR_I2SExt+0x16>
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <I2SEx_RxISR_I2SExt+0x94>)
 8002228:	e001      	b.n	800222e <I2SEx_RxISR_I2SExt+0x1a>
 800222a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222e:	68d8      	ldr	r0, [r3, #12]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002234:	1c99      	adds	r1, r3, #2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	62d1      	str	r1, [r2, #44]	; 0x2c
 800223a:	b282      	uxth	r2, r0
 800223c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002242:	b29b      	uxth	r3, r3
 8002244:	3b01      	subs	r3, #1
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002250:	b29b      	uxth	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d121      	bne.n	800229a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <I2SEx_RxISR_I2SExt+0x90>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d101      	bne.n	8002264 <I2SEx_RxISR_I2SExt+0x50>
 8002260:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <I2SEx_RxISR_I2SExt+0x94>)
 8002262:	e001      	b.n	8002268 <I2SEx_RxISR_I2SExt+0x54>
 8002264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	490d      	ldr	r1, [pc, #52]	; (80022a4 <I2SEx_RxISR_I2SExt+0x90>)
 8002270:	428b      	cmp	r3, r1
 8002272:	d101      	bne.n	8002278 <I2SEx_RxISR_I2SExt+0x64>
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <I2SEx_RxISR_I2SExt+0x94>)
 8002276:	e001      	b.n	800227c <I2SEx_RxISR_I2SExt+0x68>
 8002278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800227c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002280:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002286:	b29b      	uxth	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d106      	bne.n	800229a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7ff ff03 	bl	80020a0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40003800 	.word	0x40003800
 80022a8:	40003400 	.word	0x40003400

080022ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ae:	b08f      	sub	sp, #60	; 0x3c
 80022b0:	af0a      	add	r7, sp, #40	; 0x28
 80022b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e10f      	b.n	80024de <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f008 fb67 	bl	800a9ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2203      	movs	r2, #3
 80022e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d102      	bne.n	80022f8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 f918 	bl	8004532 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	687e      	ldr	r6, [r7, #4]
 800230a:	466d      	mov	r5, sp
 800230c:	f106 0410 	add.w	r4, r6, #16
 8002310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002312:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	e894 0003 	ldmia.w	r4, {r0, r1}
 800231c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002320:	1d33      	adds	r3, r6, #4
 8002322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002324:	6838      	ldr	r0, [r7, #0]
 8002326:	f001 ffef 	bl	8004308 <USB_CoreInit>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2202      	movs	r2, #2
 8002334:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0d0      	b.n	80024de <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f002 f906 	bl	8004554 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]
 800234c:	e04a      	b.n	80023e4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	333d      	adds	r3, #61	; 0x3d
 800235e:	2201      	movs	r2, #1
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	333c      	adds	r3, #60	; 0x3c
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	7bfb      	ldrb	r3, [r7, #15]
 800237a:	b298      	uxth	r0, r3
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3344      	adds	r3, #68	; 0x44
 800238a:	4602      	mov	r2, r0
 800238c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	3340      	adds	r3, #64	; 0x40
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023a2:	7bfa      	ldrb	r2, [r7, #15]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	00db      	lsls	r3, r3, #3
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3348      	adds	r3, #72	; 0x48
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	334c      	adds	r3, #76	; 0x4c
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ca:	7bfa      	ldrb	r2, [r7, #15]
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3354      	adds	r3, #84	; 0x54
 80023da:	2200      	movs	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023de:	7bfb      	ldrb	r3, [r7, #15]
 80023e0:	3301      	adds	r3, #1
 80023e2:	73fb      	strb	r3, [r7, #15]
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d3af      	bcc.n	800234e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	73fb      	strb	r3, [r7, #15]
 80023f2:	e044      	b.n	800247e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023f4:	7bfa      	ldrb	r2, [r7, #15]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800240a:	7bfa      	ldrb	r2, [r7, #15]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800241c:	7bfa      	ldrb	r2, [r7, #15]
 800241e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002436:	7bfa      	ldrb	r2, [r7, #15]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800244c:	7bfa      	ldrb	r2, [r7, #15]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	3301      	adds	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	7bfa      	ldrb	r2, [r7, #15]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3b5      	bcc.n	80023f4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	687e      	ldr	r6, [r7, #4]
 8002490:	466d      	mov	r5, sp
 8002492:	f106 0410 	add.w	r4, r6, #16
 8002496:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002498:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800249c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800249e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a6:	1d33      	adds	r3, r6, #4
 80024a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024aa:	6838      	ldr	r0, [r7, #0]
 80024ac:	f002 f89e 	bl	80045ec <USB_DevInit>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e00d      	b.n	80024de <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 f9ed 	bl	80058b6 <USB_DevDisconnect>

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_PCD_Start+0x1c>
 80024fe:	2302      	movs	r3, #2
 8002500:	e020      	b.n	8002544 <HAL_PCD_Start+0x5e>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	2b01      	cmp	r3, #1
 8002510:	d109      	bne.n	8002526 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002516:	2b01      	cmp	r3, #1
 8002518:	d005      	beq.n	8002526 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f001 fff0 	bl	8004510 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 f99d 	bl	8005874 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b08d      	sub	sp, #52	; 0x34
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fa5b 	bl	8005a1e <USB_GetMode>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 848a 	bne.w	8002e84 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 f9bf 	bl	80058f8 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 8480 	beq.w	8002e82 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f003 f9ac 	bl	80058f8 <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d107      	bne.n	80025ba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f002 0202 	and.w	r2, r2, #2
 80025b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 f99a 	bl	80058f8 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d161      	bne.n	8002692 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0210 	bic.w	r2, r2, #16
 80025dc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80025de:	6a3b      	ldr	r3, [r7, #32]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f003 020f 	and.w	r2, r3, #15
 80025ea:	4613      	mov	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	3304      	adds	r3, #4
 80025fc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	0c5b      	lsrs	r3, r3, #17
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	2b02      	cmp	r3, #2
 8002608:	d124      	bne.n	8002654 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d035      	beq.n	8002682 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	091b      	lsrs	r3, r3, #4
 800261e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002620:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	6a38      	ldr	r0, [r7, #32]
 800262a:	f002 ffd1 	bl	80055d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	691a      	ldr	r2, [r3, #16]
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	091b      	lsrs	r3, r3, #4
 8002636:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800263a:	441a      	add	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	091b      	lsrs	r3, r3, #4
 8002648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800264c:	441a      	add	r2, r3
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	621a      	str	r2, [r3, #32]
 8002652:	e016      	b.n	8002682 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	0c5b      	lsrs	r3, r3, #17
 8002658:	f003 030f 	and.w	r3, r3, #15
 800265c:	2b06      	cmp	r3, #6
 800265e:	d110      	bne.n	8002682 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002666:	2208      	movs	r2, #8
 8002668:	4619      	mov	r1, r3
 800266a:	6a38      	ldr	r0, [r7, #32]
 800266c:	f002 ffb0 	bl	80055d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	6a1a      	ldr	r2, [r3, #32]
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800267c:	441a      	add	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0210 	orr.w	r2, r2, #16
 8002690:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f003 f92e 	bl	80058f8 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80026a6:	f040 80a7 	bne.w	80027f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 f933 	bl	800591e <USB_ReadDevAllOutEpInterrupt>
 80026b8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80026ba:	e099      	b.n	80027f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 808e 	beq.w	80027e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f957 	bl	8005986 <USB_ReadDevOutEPInterrupt>
 80026d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00c      	beq.n	80026fe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f0:	461a      	mov	r2, r3
 80026f2:	2301      	movs	r3, #1
 80026f4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80026f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fec3 	bl	8003484 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00c      	beq.n	8002722 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2308      	movs	r3, #8
 8002718:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800271a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 ff99 	bl	8003654 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2310      	movs	r3, #16
 800273c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d030      	beq.n	80027aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002750:	2b80      	cmp	r3, #128	; 0x80
 8002752:	d109      	bne.n	8002768 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002762:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002766:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	3304      	adds	r3, #4
 800277c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	78db      	ldrb	r3, [r3, #3]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d108      	bne.n	8002798 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2200      	movs	r2, #0
 800278a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	b2db      	uxtb	r3, r3
 8002790:	4619      	mov	r1, r3
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f008 fa1e 	bl	800abd4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279a:	015a      	lsls	r2, r3, #5
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027a4:	461a      	mov	r2, r3
 80027a6:	2302      	movs	r3, #2
 80027a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	f003 0320 	and.w	r3, r3, #32
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d008      	beq.n	80027c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027c0:	461a      	mov	r2, r3
 80027c2:	2320      	movs	r3, #32
 80027c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d009      	beq.n	80027e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3301      	adds	r3, #1
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f47f af62 	bne.w	80026bc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f003 f87b 	bl	80058f8 <USB_ReadInterrupts>
 8002802:	4603      	mov	r3, r0
 8002804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002808:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800280c:	f040 80db 	bne.w	80029c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f003 f89c 	bl	8005952 <USB_ReadDevAllInEpInterrupt>
 800281a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002820:	e0cd      	b.n	80029be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80c2 	beq.w	80029b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f003 f8c2 	bl	80059c2 <USB_ReadDevInEPInterrupt>
 800283e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d057      	beq.n	80028fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	f003 030f 	and.w	r3, r3, #15
 8002850:	2201      	movs	r2, #1
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800285e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	43db      	mvns	r3, r3
 8002864:	69f9      	ldr	r1, [r7, #28]
 8002866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800286a:	4013      	ands	r3, r2
 800286c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287a:	461a      	mov	r2, r3
 800287c:	2301      	movs	r3, #1
 800287e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d132      	bne.n	80028ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	334c      	adds	r3, #76	; 0x4c
 8002898:	6819      	ldr	r1, [r3, #0]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4403      	add	r3, r0
 80028a8:	3348      	adds	r3, #72	; 0x48
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4419      	add	r1, r3
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4403      	add	r3, r0
 80028bc:	334c      	adds	r3, #76	; 0x4c
 80028be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d113      	bne.n	80028ee <HAL_PCD_IRQHandler+0x3a2>
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3354      	adds	r3, #84	; 0x54
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6818      	ldr	r0, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028e6:	461a      	mov	r2, r3
 80028e8:	2101      	movs	r1, #1
 80028ea:	f003 f8c9 	bl	8005a80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f008 f8e8 	bl	800aaca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002910:	461a      	mov	r2, r3
 8002912:	2308      	movs	r3, #8
 8002914:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	f003 0310 	and.w	r3, r3, #16
 800291c:	2b00      	cmp	r3, #0
 800291e:	d008      	beq.n	8002932 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800292c:	461a      	mov	r2, r3
 800292e:	2310      	movs	r3, #16
 8002930:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002938:	2b00      	cmp	r3, #0
 800293a:	d008      	beq.n	800294e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	4413      	add	r3, r2
 8002944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002948:	461a      	mov	r2, r3
 800294a:	2340      	movs	r3, #64	; 0x40
 800294c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d023      	beq.n	80029a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002958:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800295a:	6a38      	ldr	r0, [r7, #32]
 800295c:	f001 ffaa 	bl	80048b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002962:	4613      	mov	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	4413      	add	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	3338      	adds	r3, #56	; 0x38
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	4413      	add	r3, r2
 8002970:	3304      	adds	r3, #4
 8002972:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	78db      	ldrb	r3, [r3, #3]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d108      	bne.n	800298e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4619      	mov	r1, r3
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f008 f935 	bl	800abf8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800299a:	461a      	mov	r2, r3
 800299c:	2302      	movs	r3, #2
 800299e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fcdb 	bl	8003368 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	3301      	adds	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	085b      	lsrs	r3, r3, #1
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80029be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f47f af2e 	bne.w	8002822 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 ff94 	bl	80058f8 <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029da:	d122      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d108      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a02:	2100      	movs	r1, #0
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fec3 	bl	8003790 <HAL_PCDEx_LPM_Callback>
 8002a0a:	e002      	b.n	8002a12 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f008 f8d3 	bl	800abb8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695a      	ldr	r2, [r3, #20]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f002 ff66 	bl	80058f8 <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a36:	d112      	bne.n	8002a5e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d102      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f008 f88f 	bl	800ab6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002a5c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f002 ff48 	bl	80058f8 <USB_ReadInterrupts>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a72:	f040 80b7 	bne.w	8002be4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2110      	movs	r1, #16
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 ff0f 	bl	80048b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9a:	e046      	b.n	8002b2a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002aae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ac0:	0151      	lsls	r1, r2, #5
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002aca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002ace:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002adc:	461a      	mov	r2, r3
 8002ade:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ae2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002af4:	0151      	lsls	r1, r2, #5
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	440a      	add	r2, r1
 8002afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002afe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b14:	0151      	lsls	r1, r2, #5
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	440a      	add	r2, r1
 8002b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002b22:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	3301      	adds	r3, #1
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d3b3      	bcc.n	8002a9c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b42:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b46:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d016      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b60:	f043 030b 	orr.w	r3, r3, #11
 8002b64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b76:	f043 030b 	orr.w	r3, r3, #11
 8002b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b7c:	e015      	b.n	8002baa <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b90:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002b94:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba4:	f043 030b 	orr.w	r3, r3, #11
 8002ba8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002bbc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f002 ff56 	bl	8005a80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002be2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f002 fe85 	bl	80058f8 <USB_ReadInterrupts>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf8:	d124      	bne.n	8002c44 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 ff1b 	bl	8005a3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fed0 	bl	80049ae <USB_GetDevSpeed>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	461a      	mov	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681c      	ldr	r4, [r3, #0]
 8002c1a:	f001 fa29 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 8002c1e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	4620      	mov	r0, r4
 8002c2a:	f001 fbcf 	bl	80043cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f007 ff73 	bl	800ab1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fe55 	bl	80058f8 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f003 0308 	and.w	r3, r3, #8
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d10a      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f007 ff50 	bl	800aafe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 0208 	and.w	r2, r2, #8
 8002c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fe40 	bl	80058f8 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d122      	bne.n	8002cc8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8e:	2301      	movs	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
 8002c92:	e014      	b.n	8002cbe <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fb27 	bl	8003306 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	3301      	adds	r3, #1
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d3e5      	bcc.n	8002c94 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 fe13 	bl	80058f8 <USB_ReadInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cdc:	d13b      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cde:	2301      	movs	r3, #1
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce2:	e02b      	b.n	8002d3c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	4413      	add	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	3340      	adds	r3, #64	; 0x40
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d115      	bne.n	8002d36 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da12      	bge.n	8002d36 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d14:	4613      	mov	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	333f      	adds	r3, #63	; 0x3f
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fae8 	bl	8003306 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	3301      	adds	r3, #1
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d3ce      	bcc.n	8002ce4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	695a      	ldr	r2, [r3, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002d54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fdcc 	bl	80058f8 <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d6a:	d155      	bne.n	8002e18 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	e045      	b.n	8002dfe <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d12e      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d9a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	da2b      	bge.n	8002df8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002dac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d121      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002dca:	6a3b      	ldr	r3, [r7, #32]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	69fa      	ldr	r2, [r7, #28]
 8002dec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002df4:	6053      	str	r3, [r2, #4]
            break;
 8002df6:	e007      	b.n	8002e08 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d3b4      	bcc.n	8002d72 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 fd6b 	bl	80058f8 <USB_ReadInterrupts>
 8002e22:	4603      	mov	r3, r0
 8002e24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d10a      	bne.n	8002e44 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f007 fef4 	bl	800ac1c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f002 fd55 	bl	80058f8 <USB_ReadInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d115      	bne.n	8002e84 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f003 0304 	and.w	r3, r3, #4
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f007 fee4 	bl	800ac38 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	e000      	b.n	8002e84 <HAL_PCD_IRQHandler+0x938>
      return;
 8002e82:	bf00      	nop
    }
  }
}
 8002e84:	3734      	adds	r7, #52	; 0x34
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd90      	pop	{r4, r7, pc}

08002e8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
 8002e92:	460b      	mov	r3, r1
 8002e94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d101      	bne.n	8002ea4 <HAL_PCD_SetAddress+0x1a>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	e013      	b.n	8002ecc <HAL_PCD_SetAddress+0x42>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fcb3 	bl	8005828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	70fb      	strb	r3, [r7, #3]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	803b      	strh	r3, [r7, #0]
 8002eea:	4613      	mov	r3, r2
 8002eec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	da0f      	bge.n	8002f1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	f003 020f 	and.w	r2, r3, #15
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	3338      	adds	r3, #56	; 0x38
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2201      	movs	r2, #1
 8002f16:	705a      	strb	r2, [r3, #1]
 8002f18:	e00f      	b.n	8002f3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	f003 020f 	and.w	r2, r3, #15
 8002f20:	4613      	mov	r3, r2
 8002f22:	00db      	lsls	r3, r3, #3
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	4413      	add	r3, r2
 8002f30:	3304      	adds	r3, #4
 8002f32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	f003 030f 	and.w	r3, r3, #15
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f46:	883a      	ldrh	r2, [r7, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	78ba      	ldrb	r2, [r7, #2]
 8002f50:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	785b      	ldrb	r3, [r3, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d004      	beq.n	8002f64 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f64:	78bb      	ldrb	r3, [r7, #2]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d102      	bne.n	8002f70 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d101      	bne.n	8002f7e <HAL_PCD_EP_Open+0xaa>
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	e00e      	b.n	8002f9c <HAL_PCD_EP_Open+0xc8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f001 fd33 	bl	80049f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	da0f      	bge.n	8002fd8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	3338      	adds	r3, #56	; 0x38
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	705a      	strb	r2, [r3, #1]
 8002fd6:	e00f      	b.n	8002ff8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	f003 020f 	and.w	r2, r3, #15
 8002fde:	4613      	mov	r3, r2
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	3304      	adds	r3, #4
 8002ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_PCD_EP_Close+0x6e>
 800300e:	2302      	movs	r3, #2
 8003010:	e00e      	b.n	8003030 <HAL_PCD_EP_Close+0x8c>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68f9      	ldr	r1, [r7, #12]
 8003020:	4618      	mov	r0, r3
 8003022:	f001 fd71 	bl	8004b08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003048:	7afb      	ldrb	r3, [r7, #11]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2200      	movs	r2, #0
 8003072:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	2200      	movs	r2, #0
 8003078:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	b2da      	uxtb	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	6979      	ldr	r1, [r7, #20]
 80030ac:	f002 f850 	bl	8005150 <USB_EP0StartXfer>
 80030b0:	e008      	b.n	80030c4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	6979      	ldr	r1, [r7, #20]
 80030c0:	f001 fdfe 	bl	8004cc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 020f 	and.w	r2, r3, #15
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80030f0:	681b      	ldr	r3, [r3, #0]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b086      	sub	sp, #24
 8003102:	af00      	add	r7, sp, #0
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	460b      	mov	r3, r1
 800310c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310e:	7afb      	ldrb	r3, [r7, #11]
 8003110:	f003 020f 	and.w	r2, r3, #15
 8003114:	4613      	mov	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	3338      	adds	r3, #56	; 0x38
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4413      	add	r3, r2
 8003122:	3304      	adds	r3, #4
 8003124:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2200      	movs	r2, #0
 8003136:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2201      	movs	r2, #1
 800313c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800313e:	7afb      	ldrb	r3, [r7, #11]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	b2da      	uxtb	r2, r3
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	461a      	mov	r2, r3
 800316e:	6979      	ldr	r1, [r7, #20]
 8003170:	f001 ffee 	bl	8005150 <USB_EP0StartXfer>
 8003174:	e008      	b.n	8003188 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6979      	ldr	r1, [r7, #20]
 8003184:	f001 fd9c 	bl	8004cc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	460b      	mov	r3, r1
 800319c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 020f 	and.w	r2, r3, #15
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d901      	bls.n	80031b0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e050      	b.n	8003252 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da0f      	bge.n	80031d8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b8:	78fb      	ldrb	r3, [r7, #3]
 80031ba:	f003 020f 	and.w	r2, r3, #15
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3338      	adds	r3, #56	; 0x38
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	3304      	adds	r3, #4
 80031ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2201      	movs	r2, #1
 80031d4:	705a      	strb	r2, [r3, #1]
 80031d6:	e00d      	b.n	80031f4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	4413      	add	r3, r2
 80031ea:	3304      	adds	r3, #4
 80031ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800320c:	2b01      	cmp	r3, #1
 800320e:	d101      	bne.n	8003214 <HAL_PCD_EP_SetStall+0x82>
 8003210:	2302      	movs	r3, #2
 8003212:	e01e      	b.n	8003252 <HAL_PCD_EP_SetStall+0xc0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68f9      	ldr	r1, [r7, #12]
 8003222:	4618      	mov	r0, r3
 8003224:	f002 fa2c 	bl	8005680 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	f003 030f 	and.w	r3, r3, #15
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	b2d9      	uxtb	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003242:	461a      	mov	r2, r3
 8003244:	f002 fc1c 	bl	8005a80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003266:	78fb      	ldrb	r3, [r7, #3]
 8003268:	f003 020f 	and.w	r2, r3, #15
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	429a      	cmp	r2, r3
 8003272:	d901      	bls.n	8003278 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e042      	b.n	80032fe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da0f      	bge.n	80032a0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 020f 	and.w	r2, r3, #15
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	3338      	adds	r3, #56	; 0x38
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	705a      	strb	r2, [r3, #1]
 800329e:	e00f      	b.n	80032c0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	f003 020f 	and.w	r2, r3, #15
 80032a6:	4613      	mov	r3, r2
 80032a8:	00db      	lsls	r3, r3, #3
 80032aa:	4413      	add	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	4413      	add	r3, r2
 80032b6:	3304      	adds	r3, #4
 80032b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	b2da      	uxtb	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d101      	bne.n	80032e0 <HAL_PCD_EP_ClrStall+0x86>
 80032dc:	2302      	movs	r3, #2
 80032de:	e00e      	b.n	80032fe <HAL_PCD_EP_ClrStall+0xa4>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68f9      	ldr	r1, [r7, #12]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f002 fa34 	bl	800575c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b084      	sub	sp, #16
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
 800330e:	460b      	mov	r3, r1
 8003310:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003316:	2b00      	cmp	r3, #0
 8003318:	da0c      	bge.n	8003334 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800331a:	78fb      	ldrb	r3, [r7, #3]
 800331c:	f003 020f 	and.w	r2, r3, #15
 8003320:	4613      	mov	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	3338      	adds	r3, #56	; 0x38
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4413      	add	r3, r2
 800332e:	3304      	adds	r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e00c      	b.n	800334e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003334:	78fb      	ldrb	r3, [r7, #3]
 8003336:	f003 020f 	and.w	r2, r3, #15
 800333a:	4613      	mov	r3, r2
 800333c:	00db      	lsls	r3, r3, #3
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	3304      	adds	r3, #4
 800334c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68f9      	ldr	r1, [r7, #12]
 8003354:	4618      	mov	r0, r3
 8003356:	f002 f853 	bl	8005400 <USB_EPStopXfer>
 800335a:	4603      	mov	r3, r0
 800335c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800335e:	7afb      	ldrb	r3, [r7, #11]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af02      	add	r7, sp, #8
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	4413      	add	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	3338      	adds	r3, #56	; 0x38
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	3304      	adds	r3, #4
 800338e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1a      	ldr	r2, [r3, #32]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	429a      	cmp	r2, r3
 800339a:	d901      	bls.n	80033a0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e06c      	b.n	800347a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d902      	bls.n	80033bc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	3303      	adds	r3, #3
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033c4:	e02b      	b.n	800341e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d902      	bls.n	80033e2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	3303      	adds	r3, #3
 80033e6:	089b      	lsrs	r3, r3, #2
 80033e8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6919      	ldr	r1, [r3, #16]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	4603      	mov	r3, r0
 8003400:	6978      	ldr	r0, [r7, #20]
 8003402:	f002 f8a7 	bl	8005554 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	441a      	add	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a1a      	ldr	r2, [r3, #32]
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	441a      	add	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800342a:	699b      	ldr	r3, [r3, #24]
 800342c:	b29b      	uxth	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	429a      	cmp	r2, r3
 8003432:	d809      	bhi.n	8003448 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a1a      	ldr	r2, [r3, #32]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800343c:	429a      	cmp	r2, r3
 800343e:	d203      	bcs.n	8003448 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1be      	bne.n	80033c6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	429a      	cmp	r2, r3
 8003452:	d811      	bhi.n	8003478 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2201      	movs	r2, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	43db      	mvns	r3, r3
 800346e:	6939      	ldr	r1, [r7, #16]
 8003470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003474:	4013      	ands	r3, r2
 8003476:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3720      	adds	r7, #32
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	333c      	adds	r3, #60	; 0x3c
 800349c:	3304      	adds	r3, #4
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d17b      	bne.n	80035b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d015      	beq.n	80034f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	4a61      	ldr	r2, [pc, #388]	; (800364c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	f240 80b9 	bls.w	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80b3 	beq.w	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e6:	461a      	mov	r2, r3
 80034e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034ec:	6093      	str	r3, [r2, #8]
 80034ee:	e0a7      	b.n	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f003 0320 	and.w	r3, r3, #32
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d009      	beq.n	800350e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003506:	461a      	mov	r2, r3
 8003508:	2320      	movs	r3, #32
 800350a:	6093      	str	r3, [r2, #8]
 800350c:	e098      	b.n	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	f040 8093 	bne.w	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	4a4b      	ldr	r2, [pc, #300]	; (800364c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d90f      	bls.n	8003542 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003538:	461a      	mov	r2, r3
 800353a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800353e:	6093      	str	r3, [r2, #8]
 8003540:	e07e      	b.n	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	4413      	add	r3, r2
 8003554:	3304      	adds	r3, #4
 8003556:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	0159      	lsls	r1, r3, #5
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	440b      	add	r3, r1
 8003564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356e:	1ad2      	subs	r2, r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d114      	bne.n	80035a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6818      	ldr	r0, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800358c:	461a      	mov	r2, r3
 800358e:	2101      	movs	r1, #1
 8003590:	f002 fa76 	bl	8005a80 <USB_EP0_OutStart>
 8003594:	e006      	b.n	80035a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	441a      	add	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f007 fa72 	bl	800aa94 <HAL_PCD_DataOutStageCallback>
 80035b0:	e046      	b.n	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4a26      	ldr	r2, [pc, #152]	; (8003650 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d124      	bne.n	8003604 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00a      	beq.n	80035da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d0:	461a      	mov	r2, r3
 80035d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d6:	6093      	str	r3, [r2, #8]
 80035d8:	e032      	b.n	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	2320      	movs	r3, #32
 80035f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4619      	mov	r1, r3
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f007 fa49 	bl	800aa94 <HAL_PCD_DataOutStageCallback>
 8003602:	e01d      	b.n	8003640 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d114      	bne.n	8003634 <PCD_EP_OutXfrComplete_int+0x1b0>
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d108      	bne.n	8003634 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6818      	ldr	r0, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800362c:	461a      	mov	r2, r3
 800362e:	2100      	movs	r1, #0
 8003630:	f002 fa26 	bl	8005a80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4619      	mov	r1, r3
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f007 fa2a 	bl	800aa94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	4f54300a 	.word	0x4f54300a
 8003650:	4f54310a 	.word	0x4f54310a

08003654 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	333c      	adds	r3, #60	; 0x3c
 800366c:	3304      	adds	r3, #4
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a15      	ldr	r2, [pc, #84]	; (80036dc <PCD_EP_OutSetupPacket_int+0x88>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d90e      	bls.n	80036a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a0:	461a      	mov	r2, r3
 80036a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f007 f9e1 	bl	800aa70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <PCD_EP_OutSetupPacket_int+0x88>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d90c      	bls.n	80036d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036c8:	461a      	mov	r2, r3
 80036ca:	2101      	movs	r1, #1
 80036cc:	f002 f9d8 	bl	8005a80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	4f54300a 	.word	0x4f54300a

080036e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	70fb      	strb	r3, [r7, #3]
 80036ec:	4613      	mov	r3, r2
 80036ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036f8:	78fb      	ldrb	r3, [r7, #3]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d107      	bne.n	800370e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036fe:	883b      	ldrh	r3, [r7, #0]
 8003700:	0419      	lsls	r1, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	430a      	orrs	r2, r1
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
 800370c:	e028      	b.n	8003760 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	4413      	add	r3, r2
 800371a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e00d      	b.n	800373e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	3340      	adds	r3, #64	; 0x40
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4413      	add	r3, r2
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	0c1b      	lsrs	r3, r3, #16
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	4413      	add	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003738:	7bfb      	ldrb	r3, [r7, #15]
 800373a:	3301      	adds	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
 800373e:	7bfa      	ldrb	r2, [r7, #15]
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	3b01      	subs	r3, #1
 8003744:	429a      	cmp	r2, r3
 8003746:	d3ec      	bcc.n	8003722 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003748:	883b      	ldrh	r3, [r7, #0]
 800374a:	0418      	lsls	r0, r3, #16
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6819      	ldr	r1, [r3, #0]
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	3b01      	subs	r3, #1
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	4302      	orrs	r2, r0
 8003758:	3340      	adds	r3, #64	; 0x40
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	460b      	mov	r3, r1
 8003778:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	887a      	ldrh	r2, [r7, #2]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e267      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d075      	beq.n	80038b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	4b88      	ldr	r3, [pc, #544]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 030c 	and.w	r3, r3, #12
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d00c      	beq.n	80037ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037d2:	4b85      	ldr	r3, [pc, #532]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037da:	2b08      	cmp	r3, #8
 80037dc:	d112      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037de:	4b82      	ldr	r3, [pc, #520]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ea:	d10b      	bne.n	8003804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037ec:	4b7e      	ldr	r3, [pc, #504]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05b      	beq.n	80038b0 <HAL_RCC_OscConfig+0x108>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d157      	bne.n	80038b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e242      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380c:	d106      	bne.n	800381c <HAL_RCC_OscConfig+0x74>
 800380e:	4b76      	ldr	r3, [pc, #472]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a75      	ldr	r2, [pc, #468]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	6013      	str	r3, [r2, #0]
 800381a:	e01d      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003824:	d10c      	bne.n	8003840 <HAL_RCC_OscConfig+0x98>
 8003826:	4b70      	ldr	r3, [pc, #448]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a6f      	ldr	r2, [pc, #444]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800382c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	4b6d      	ldr	r3, [pc, #436]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a6c      	ldr	r2, [pc, #432]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383c:	6013      	str	r3, [r2, #0]
 800383e:	e00b      	b.n	8003858 <HAL_RCC_OscConfig+0xb0>
 8003840:	4b69      	ldr	r3, [pc, #420]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a68      	ldr	r2, [pc, #416]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b66      	ldr	r3, [pc, #408]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d013      	beq.n	8003888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fd f91c 	bl	8000a9c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003868:	f7fd f918 	bl	8000a9c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b64      	cmp	r3, #100	; 0x64
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e207      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0xc0>
 8003886:	e014      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003888:	f7fd f908 	bl	8000a9c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003890:	f7fd f904 	bl	8000a9c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b64      	cmp	r3, #100	; 0x64
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e1f3      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038a2:	4b51      	ldr	r3, [pc, #324]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f0      	bne.n	8003890 <HAL_RCC_OscConfig+0xe8>
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d063      	beq.n	8003986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	4b4a      	ldr	r3, [pc, #296]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 030c 	and.w	r3, r3, #12
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00b      	beq.n	80038e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ca:	4b47      	ldr	r3, [pc, #284]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d11c      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d6:	4b44      	ldr	r3, [pc, #272]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d116      	bne.n	8003910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e2:	4b41      	ldr	r3, [pc, #260]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d001      	beq.n	80038fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e1c7      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fa:	4b3b      	ldr	r3, [pc, #236]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	4937      	ldr	r1, [pc, #220]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800390a:	4313      	orrs	r3, r2
 800390c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800390e:	e03a      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003918:	4b34      	ldr	r3, [pc, #208]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fd f8bd 	bl	8000a9c <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003926:	f7fd f8b9 	bl	8000a9c <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e1a8      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003938:	4b2b      	ldr	r3, [pc, #172]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003944:	4b28      	ldr	r3, [pc, #160]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4925      	ldr	r1, [pc, #148]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 8003954:	4313      	orrs	r3, r2
 8003956:	600b      	str	r3, [r1, #0]
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b24      	ldr	r3, [pc, #144]	; (80039ec <HAL_RCC_OscConfig+0x244>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd f89c 	bl	8000a9c <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003968:	f7fd f898 	bl	8000a9c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e187      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800397a:	4b1b      	ldr	r3, [pc, #108]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d036      	beq.n	8003a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d016      	beq.n	80039c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399a:	4b15      	ldr	r3, [pc, #84]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a0:	f7fd f87c 	bl	8000a9c <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039a8:	f7fd f878 	bl	8000a9c <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e167      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <HAL_RCC_OscConfig+0x240>)
 80039bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x200>
 80039c6:	e01b      	b.n	8003a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039c8:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_RCC_OscConfig+0x248>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ce:	f7fd f865 	bl	8000a9c <HAL_GetTick>
 80039d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	e00e      	b.n	80039f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039d6:	f7fd f861 	bl	8000a9c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d907      	bls.n	80039f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e150      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	42470000 	.word	0x42470000
 80039f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	4b88      	ldr	r3, [pc, #544]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ea      	bne.n	80039d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8097 	beq.w	8003b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a12:	4b81      	ldr	r3, [pc, #516]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10f      	bne.n	8003a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	4b7d      	ldr	r3, [pc, #500]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2e:	4b7a      	ldr	r3, [pc, #488]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3e:	4b77      	ldr	r3, [pc, #476]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d118      	bne.n	8003a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a4a:	4b74      	ldr	r3, [pc, #464]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a73      	ldr	r2, [pc, #460]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a56:	f7fd f821 	bl	8000a9c <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5e:	f7fd f81d 	bl	8000a9c <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e10c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	4b6a      	ldr	r3, [pc, #424]	; (8003c1c <HAL_RCC_OscConfig+0x474>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d106      	bne.n	8003a92 <HAL_RCC_OscConfig+0x2ea>
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a88:	4a63      	ldr	r2, [pc, #396]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f043 0301 	orr.w	r3, r3, #1
 8003a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a90:	e01c      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b05      	cmp	r3, #5
 8003a98:	d10c      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x30c>
 8003a9a:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9e:	4a5e      	ldr	r2, [pc, #376]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a5b      	ldr	r2, [pc, #364]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	e00b      	b.n	8003acc <HAL_RCC_OscConfig+0x324>
 8003ab4:	4b58      	ldr	r3, [pc, #352]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab8:	4a57      	ldr	r2, [pc, #348]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac0:	4b55      	ldr	r3, [pc, #340]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac4:	4a54      	ldr	r2, [pc, #336]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad4:	f7fc ffe2 	bl	8000a9c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003adc:	f7fc ffde 	bl	8000a9c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e0cb      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af2:	4b49      	ldr	r3, [pc, #292]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0ee      	beq.n	8003adc <HAL_RCC_OscConfig+0x334>
 8003afe:	e014      	b.n	8003b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b00:	f7fc ffcc 	bl	8000a9c <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b06:	e00a      	b.n	8003b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fc ffc8 	bl	8000a9c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e0b5      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b1e:	4b3e      	ldr	r3, [pc, #248]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1ee      	bne.n	8003b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b2a:	7dfb      	ldrb	r3, [r7, #23]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d105      	bne.n	8003b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b30:	4b39      	ldr	r3, [pc, #228]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	4a38      	ldr	r2, [pc, #224]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 80a1 	beq.w	8003c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b46:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d05c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d141      	bne.n	8003bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b31      	ldr	r3, [pc, #196]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fc ff9c 	bl	8000a9c <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b68:	f7fc ff98 	bl	8000a9c <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e087      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7a:	4b27      	ldr	r3, [pc, #156]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69da      	ldr	r2, [r3, #28]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	019b      	lsls	r3, r3, #6
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	491b      	ldr	r1, [pc, #108]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb6:	f7fc ff71 	bl	8000a9c <HAL_GetTick>
 8003bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bbc:	e008      	b.n	8003bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbe:	f7fc ff6d 	bl	8000a9c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e05c      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd0:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0f0      	beq.n	8003bbe <HAL_RCC_OscConfig+0x416>
 8003bdc:	e054      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <HAL_RCC_OscConfig+0x478>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be4:	f7fc ff5a 	bl	8000a9c <HAL_GetTick>
 8003be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bec:	f7fc ff56 	bl	8000a9c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e045      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bfe:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <HAL_RCC_OscConfig+0x470>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCC_OscConfig+0x444>
 8003c0a:	e03d      	b.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e038      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40007000 	.word	0x40007000
 8003c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c24:	4b1b      	ldr	r3, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x4ec>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d028      	beq.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d121      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d11a      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d111      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40023800 	.word	0x40023800

08003c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0cc      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b68      	ldr	r3, [pc, #416]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d90c      	bls.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b65      	ldr	r3, [pc, #404]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cc2:	4b63      	ldr	r3, [pc, #396]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0307 	and.w	r3, r3, #7
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0b8      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cec:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4a58      	ldr	r2, [pc, #352]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d04:	4b53      	ldr	r3, [pc, #332]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4a52      	ldr	r2, [pc, #328]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d10:	4b50      	ldr	r3, [pc, #320]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	494d      	ldr	r1, [pc, #308]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d044      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d36:	4b47      	ldr	r3, [pc, #284]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e07f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d003      	beq.n	8003d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b3f      	ldr	r3, [pc, #252]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3b      	ldr	r3, [pc, #236]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e067      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b37      	ldr	r3, [pc, #220]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4934      	ldr	r1, [pc, #208]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7fc fe88 	bl	8000a9c <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fc fe84 	bl	8000a9c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e04f      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2b      	ldr	r3, [pc, #172]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b25      	ldr	r3, [pc, #148]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d20c      	bcs.n	8003de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b22      	ldr	r3, [pc, #136]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0307 	and.w	r3, r3, #7
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e032      	b.n	8003e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dec:	4b19      	ldr	r3, [pc, #100]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	4916      	ldr	r1, [pc, #88]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e0a:	4b12      	ldr	r3, [pc, #72]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	490e      	ldr	r1, [pc, #56]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1e:	f000 f821 	bl	8003e64 <HAL_RCC_GetSysClockFreq>
 8003e22:	4602      	mov	r2, r0
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	091b      	lsrs	r3, r3, #4
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	490a      	ldr	r1, [pc, #40]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003e30:	5ccb      	ldrb	r3, [r1, r3]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	4a09      	ldr	r2, [pc, #36]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e3a:	4b09      	ldr	r3, [pc, #36]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc fde8 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40023c00 	.word	0x40023c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	0800b49c 	.word	0x0800b49c
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000004 	.word	0x20000004

08003e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e68:	b094      	sub	sp, #80	; 0x50
 8003e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e70:	2300      	movs	r3, #0
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e74:	2300      	movs	r3, #0
 8003e76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e7c:	4b79      	ldr	r3, [pc, #484]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d00d      	beq.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	f200 80e1 	bhi.w	8004050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_RCC_GetSysClockFreq+0x34>
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d003      	beq.n	8003e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e96:	e0db      	b.n	8004050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e98:	4b73      	ldr	r3, [pc, #460]	; (8004068 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e9c:	e0db      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea2:	e0d8      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ea4:	4b6f      	ldr	r3, [pc, #444]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eac:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eae:	4b6d      	ldr	r3, [pc, #436]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d063      	beq.n	8003f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eba:	4b6a      	ldr	r3, [pc, #424]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	099b      	lsrs	r3, r3, #6
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ed6:	4622      	mov	r2, r4
 8003ed8:	462b      	mov	r3, r5
 8003eda:	f04f 0000 	mov.w	r0, #0
 8003ede:	f04f 0100 	mov.w	r1, #0
 8003ee2:	0159      	lsls	r1, r3, #5
 8003ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ee8:	0150      	lsls	r0, r2, #5
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4621      	mov	r1, r4
 8003ef0:	1a51      	subs	r1, r2, r1
 8003ef2:	6139      	str	r1, [r7, #16]
 8003ef4:	4629      	mov	r1, r5
 8003ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f08:	4659      	mov	r1, fp
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	4651      	mov	r1, sl
 8003f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f12:	4651      	mov	r1, sl
 8003f14:	018a      	lsls	r2, r1, #6
 8003f16:	4651      	mov	r1, sl
 8003f18:	ebb2 0801 	subs.w	r8, r2, r1
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f36:	4690      	mov	r8, r2
 8003f38:	4699      	mov	r9, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	eb18 0303 	adds.w	r3, r8, r3
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	462b      	mov	r3, r5
 8003f44:	eb49 0303 	adc.w	r3, r9, r3
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f56:	4629      	mov	r1, r5
 8003f58:	024b      	lsls	r3, r1, #9
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f60:	4621      	mov	r1, r4
 8003f62:	024a      	lsls	r2, r1, #9
 8003f64:	4610      	mov	r0, r2
 8003f66:	4619      	mov	r1, r3
 8003f68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f74:	f7fc f92c 	bl	80001d0 <__aeabi_uldivmod>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	e058      	b.n	8004034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f82:	4b38      	ldr	r3, [pc, #224]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	099b      	lsrs	r3, r3, #6
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f92:	623b      	str	r3, [r7, #32]
 8003f94:	2300      	movs	r3, #0
 8003f96:	627b      	str	r3, [r7, #36]	; 0x24
 8003f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	f04f 0000 	mov.w	r0, #0
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	0159      	lsls	r1, r3, #5
 8003faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fae:	0150      	lsls	r0, r2, #5
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fba:	4649      	mov	r1, r9
 8003fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	f04f 0300 	mov.w	r3, #0
 8003fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	f04f 0300 	mov.w	r3, #0
 8003fe4:	00eb      	lsls	r3, r5, #3
 8003fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fea:	00e2      	lsls	r2, r4, #3
 8003fec:	4614      	mov	r4, r2
 8003fee:	461d      	mov	r5, r3
 8003ff0:	4643      	mov	r3, r8
 8003ff2:	18e3      	adds	r3, r4, r3
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	464b      	mov	r3, r9
 8003ff8:	eb45 0303 	adc.w	r3, r5, r3
 8003ffc:	607b      	str	r3, [r7, #4]
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800400a:	4629      	mov	r1, r5
 800400c:	028b      	lsls	r3, r1, #10
 800400e:	4621      	mov	r1, r4
 8004010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004014:	4621      	mov	r1, r4
 8004016:	028a      	lsls	r2, r1, #10
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401e:	2200      	movs	r2, #0
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	61fa      	str	r2, [r7, #28]
 8004024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004028:	f7fc f8d2 	bl	80001d0 <__aeabi_uldivmod>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4613      	mov	r3, r2
 8004032:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	0c1b      	lsrs	r3, r3, #16
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004044:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800404e:	e002      	b.n	8004056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b05      	ldr	r3, [pc, #20]	; (8004068 <HAL_RCC_GetSysClockFreq+0x204>)
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004058:	4618      	mov	r0, r3
 800405a:	3750      	adds	r7, #80	; 0x50
 800405c:	46bd      	mov	sp, r7
 800405e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004062:	bf00      	nop
 8004064:	40023800 	.word	0x40023800
 8004068:	00f42400 	.word	0x00f42400
 800406c:	007a1200 	.word	0x007a1200

08004070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004074:	4b03      	ldr	r3, [pc, #12]	; (8004084 <HAL_RCC_GetHCLKFreq+0x14>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000000 	.word	0x20000000

08004088 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d035      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040b6:	f7fc fcf1 	bl	8000a9c <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040bc:	e008      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040be:	f7fc fced 	bl	8000a9c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e0b0      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040d0:	4b5b      	ldr	r3, [pc, #364]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	019a      	lsls	r2, r3, #6
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	071b      	lsls	r3, r3, #28
 80040e8:	4955      	ldr	r1, [pc, #340]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80040f0:	4b52      	ldr	r3, [pc, #328]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040f6:	f7fc fcd1 	bl	8000a9c <HAL_GetTick>
 80040fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040fe:	f7fc fccd 	bl	8000a9c <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e090      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004110:	4b4b      	ldr	r3, [pc, #300]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0302 	and.w	r3, r3, #2
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8083 	beq.w	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	4b44      	ldr	r3, [pc, #272]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	4a43      	ldr	r2, [pc, #268]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004138:	6413      	str	r3, [r2, #64]	; 0x40
 800413a:	4b41      	ldr	r3, [pc, #260]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800413c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004146:	4b3f      	ldr	r3, [pc, #252]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a3e      	ldr	r2, [pc, #248]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004152:	f7fc fca3 	bl	8000a9c <HAL_GetTick>
 8004156:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004158:	e008      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800415a:	f7fc fc9f 	bl	8000a9c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e062      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800416c:	4b35      	ldr	r3, [pc, #212]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004178:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004180:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d02f      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	429a      	cmp	r2, r3
 8004194:	d028      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800419e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041a0:	4b29      	ldr	r3, [pc, #164]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041a2:	2201      	movs	r2, #1
 80041a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041a6:	4b28      	ldr	r3, [pc, #160]	; (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041ac:	4a24      	ldr	r2, [pc, #144]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d114      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041be:	f7fc fc6d 	bl	8000a9c <HAL_GetTick>
 80041c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c4:	e00a      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c6:	f7fc fc69 	bl	8000a9c <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e02a      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041dc:	4b18      	ldr	r3, [pc, #96]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ee      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f4:	d10d      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420a:	490d      	ldr	r1, [pc, #52]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]
 8004210:	e005      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004212:	4b0b      	ldr	r3, [pc, #44]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004218:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800421c:	6093      	str	r3, [r2, #8]
 800421e:	4b08      	ldr	r3, [pc, #32]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004220:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800422a:	4905      	ldr	r1, [pc, #20]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800422c:	4313      	orrs	r3, r2
 800422e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	42470068 	.word	0x42470068
 8004240:	40023800 	.word	0x40023800
 8004244:	40007000 	.word	0x40007000
 8004248:	42470e40 	.word	0x42470e40

0800424c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800424c:	b480      	push	{r7}
 800424e:	b087      	sub	sp, #28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d13e      	bne.n	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800426a:	4b23      	ldr	r3, [pc, #140]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004272:	60fb      	str	r3, [r7, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d12f      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004280:	4b1e      	ldr	r3, [pc, #120]	; (80042fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004282:	617b      	str	r3, [r7, #20]
          break;
 8004284:	e02f      	b.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004286:	4b1c      	ldr	r3, [pc, #112]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d108      	bne.n	80042a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004294:	4b18      	ldr	r3, [pc, #96]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800429c:	4a18      	ldr	r2, [pc, #96]	; (8004300 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800429e:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a2:	613b      	str	r3, [r7, #16]
 80042a4:	e007      	b.n	80042b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042a6:	4b14      	ldr	r3, [pc, #80]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80042b6:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042bc:	099b      	lsrs	r3, r3, #6
 80042be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80042ca:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80042cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d0:	0f1b      	lsrs	r3, r3, #28
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	617b      	str	r3, [r7, #20]
          break;
 80042de:	e002      	b.n	80042e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
          break;
 80042e4:	bf00      	nop
        }
      }
      break;
 80042e6:	bf00      	nop
    }
  }
  return frequency;
 80042e8:	697b      	ldr	r3, [r7, #20]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800
 80042fc:	00bb8000 	.word	0x00bb8000
 8004300:	007a1200 	.word	0x007a1200
 8004304:	00f42400 	.word	0x00f42400

08004308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004308:	b084      	sub	sp, #16
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	f107 001c 	add.w	r0, r7, #28
 8004316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	2b01      	cmp	r3, #1
 800431e:	d122      	bne.n	8004366 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004334:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d105      	bne.n	800435a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f001 fbee 	bl	8005b3c <USB_CoreReset>
 8004360:	4603      	mov	r3, r0
 8004362:	73fb      	strb	r3, [r7, #15]
 8004364:	e01a      	b.n	800439c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f001 fbe2 	bl	8005b3c <USB_CoreReset>
 8004378:	4603      	mov	r3, r0
 800437a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004386:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	639a      	str	r2, [r3, #56]	; 0x38
 800438e:	e005      	b.n	800439c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800439c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d10b      	bne.n	80043ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f043 0206 	orr.w	r2, r3, #6
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043c6:	b004      	add	sp, #16
 80043c8:	4770      	bx	lr
	...

080043cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80043da:	79fb      	ldrb	r3, [r7, #7]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d165      	bne.n	80044ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4a41      	ldr	r2, [pc, #260]	; (80044e8 <USB_SetTurnaroundTime+0x11c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d906      	bls.n	80043f6 <USB_SetTurnaroundTime+0x2a>
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	4a40      	ldr	r2, [pc, #256]	; (80044ec <USB_SetTurnaroundTime+0x120>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d202      	bcs.n	80043f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80043f0:	230f      	movs	r3, #15
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e062      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4a3c      	ldr	r2, [pc, #240]	; (80044ec <USB_SetTurnaroundTime+0x120>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d306      	bcc.n	800440c <USB_SetTurnaroundTime+0x40>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4a3b      	ldr	r2, [pc, #236]	; (80044f0 <USB_SetTurnaroundTime+0x124>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d202      	bcs.n	800440c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004406:	230e      	movs	r3, #14
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	e057      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <USB_SetTurnaroundTime+0x124>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d306      	bcc.n	8004422 <USB_SetTurnaroundTime+0x56>
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4a37      	ldr	r2, [pc, #220]	; (80044f4 <USB_SetTurnaroundTime+0x128>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d202      	bcs.n	8004422 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800441c:	230d      	movs	r3, #13
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e04c      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	4a33      	ldr	r2, [pc, #204]	; (80044f4 <USB_SetTurnaroundTime+0x128>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d306      	bcc.n	8004438 <USB_SetTurnaroundTime+0x6c>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4a32      	ldr	r2, [pc, #200]	; (80044f8 <USB_SetTurnaroundTime+0x12c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d802      	bhi.n	8004438 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004432:	230c      	movs	r3, #12
 8004434:	617b      	str	r3, [r7, #20]
 8004436:	e041      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4a2f      	ldr	r2, [pc, #188]	; (80044f8 <USB_SetTurnaroundTime+0x12c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d906      	bls.n	800444e <USB_SetTurnaroundTime+0x82>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	4a2e      	ldr	r2, [pc, #184]	; (80044fc <USB_SetTurnaroundTime+0x130>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d802      	bhi.n	800444e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004448:	230b      	movs	r3, #11
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e036      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	4a2a      	ldr	r2, [pc, #168]	; (80044fc <USB_SetTurnaroundTime+0x130>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d906      	bls.n	8004464 <USB_SetTurnaroundTime+0x98>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4a29      	ldr	r2, [pc, #164]	; (8004500 <USB_SetTurnaroundTime+0x134>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d802      	bhi.n	8004464 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800445e:	230a      	movs	r3, #10
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	e02b      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4a26      	ldr	r2, [pc, #152]	; (8004500 <USB_SetTurnaroundTime+0x134>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d906      	bls.n	800447a <USB_SetTurnaroundTime+0xae>
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4a25      	ldr	r2, [pc, #148]	; (8004504 <USB_SetTurnaroundTime+0x138>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d202      	bcs.n	800447a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004474:	2309      	movs	r3, #9
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	e020      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	4a21      	ldr	r2, [pc, #132]	; (8004504 <USB_SetTurnaroundTime+0x138>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d306      	bcc.n	8004490 <USB_SetTurnaroundTime+0xc4>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4a20      	ldr	r2, [pc, #128]	; (8004508 <USB_SetTurnaroundTime+0x13c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d802      	bhi.n	8004490 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800448a:	2308      	movs	r3, #8
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	e015      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <USB_SetTurnaroundTime+0x13c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d906      	bls.n	80044a6 <USB_SetTurnaroundTime+0xda>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4a1c      	ldr	r2, [pc, #112]	; (800450c <USB_SetTurnaroundTime+0x140>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d202      	bcs.n	80044a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80044a0:	2307      	movs	r3, #7
 80044a2:	617b      	str	r3, [r7, #20]
 80044a4:	e00a      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80044a6:	2306      	movs	r3, #6
 80044a8:	617b      	str	r3, [r7, #20]
 80044aa:	e007      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d102      	bne.n	80044b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80044b2:	2309      	movs	r3, #9
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e001      	b.n	80044bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80044b8:	2309      	movs	r3, #9
 80044ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	029b      	lsls	r3, r3, #10
 80044d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80044d4:	431a      	orrs	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044da:	2300      	movs	r3, #0
}
 80044dc:	4618      	mov	r0, r3
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	00d8acbf 	.word	0x00d8acbf
 80044ec:	00e4e1c0 	.word	0x00e4e1c0
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	01067380 	.word	0x01067380
 80044f8:	011a499f 	.word	0x011a499f
 80044fc:	01312cff 	.word	0x01312cff
 8004500:	014ca43f 	.word	0x014ca43f
 8004504:	016e3600 	.word	0x016e3600
 8004508:	01a6ab1f 	.word	0x01a6ab1f
 800450c:	01e84800 	.word	0x01e84800

08004510 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f023 0201 	bic.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004570:	78fb      	ldrb	r3, [r7, #3]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d115      	bne.n	80045a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004582:	2001      	movs	r0, #1
 8004584:	f7fc fa96 	bl	8000ab4 <HAL_Delay>
      ms++;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fa45 	bl	8005a1e <USB_GetMode>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d01e      	beq.n	80045d8 <USB_SetCurrentMode+0x84>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b31      	cmp	r3, #49	; 0x31
 800459e:	d9f0      	bls.n	8004582 <USB_SetCurrentMode+0x2e>
 80045a0:	e01a      	b.n	80045d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d115      	bne.n	80045d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045b4:	2001      	movs	r0, #1
 80045b6:	f7fc fa7d 	bl	8000ab4 <HAL_Delay>
      ms++;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3301      	adds	r3, #1
 80045be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f001 fa2c 	bl	8005a1e <USB_GetMode>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <USB_SetCurrentMode+0x84>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b31      	cmp	r3, #49	; 0x31
 80045d0:	d9f0      	bls.n	80045b4 <USB_SetCurrentMode+0x60>
 80045d2:	e001      	b.n	80045d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e005      	b.n	80045e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b32      	cmp	r3, #50	; 0x32
 80045dc:	d101      	bne.n	80045e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045ec:	b084      	sub	sp, #16
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	e009      	b.n	8004620 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	3340      	adds	r3, #64	; 0x40
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	2200      	movs	r2, #0
 8004618:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	3301      	adds	r3, #1
 800461e:	613b      	str	r3, [r7, #16]
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b0e      	cmp	r3, #14
 8004624:	d9f2      	bls.n	800460c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11c      	bne.n	8004666 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800463a:	f043 0302 	orr.w	r3, r3, #2
 800463e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
 8004664:	e00b      	b.n	800467e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004684:	461a      	mov	r2, r3
 8004686:	2300      	movs	r3, #0
 8004688:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004690:	4619      	mov	r1, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004698:	461a      	mov	r2, r3
 800469a:	680b      	ldr	r3, [r1, #0]
 800469c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d10c      	bne.n	80046be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80046aa:	2100      	movs	r1, #0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f965 	bl	800497c <USB_SetDevSpeed>
 80046b2:	e008      	b.n	80046c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80046b4:	2101      	movs	r1, #1
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f960 	bl	800497c <USB_SetDevSpeed>
 80046bc:	e003      	b.n	80046c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046be:	2103      	movs	r1, #3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 f95b 	bl	800497c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046c6:	2110      	movs	r1, #16
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 f8f3 	bl	80048b4 <USB_FlushTxFifo>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f91f 	bl	800491c <USB_FlushRxFifo>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ee:	461a      	mov	r2, r3
 80046f0:	2300      	movs	r3, #0
 80046f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046fa:	461a      	mov	r2, r3
 80046fc:	2300      	movs	r3, #0
 80046fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	461a      	mov	r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	e043      	b.n	800479a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004724:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004728:	d118      	bne.n	800475c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	461a      	mov	r2, r3
 800473e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	e013      	b.n	800476e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004752:	461a      	mov	r2, r3
 8004754:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e008      	b.n	800476e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	461a      	mov	r2, r3
 800476a:	2300      	movs	r3, #0
 800476c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800477a:	461a      	mov	r2, r3
 800477c:	2300      	movs	r3, #0
 800477e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	461a      	mov	r2, r3
 800478e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	3301      	adds	r3, #1
 8004798:	613b      	str	r3, [r7, #16]
 800479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3b7      	bcc.n	8004712 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a2:	2300      	movs	r3, #0
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	e043      	b.n	8004830 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	015a      	lsls	r2, r3, #5
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	4413      	add	r3, r2
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047be:	d118      	bne.n	80047f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	015a      	lsls	r2, r3, #5
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	4413      	add	r3, r2
 80047ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d2:	461a      	mov	r2, r3
 80047d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e013      	b.n	8004804 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	461a      	mov	r2, r3
 80047ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e008      	b.n	8004804 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	461a      	mov	r2, r3
 8004800:	2300      	movs	r3, #0
 8004802:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004810:	461a      	mov	r2, r3
 8004812:	2300      	movs	r3, #0
 8004814:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004822:	461a      	mov	r2, r3
 8004824:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004828:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3301      	adds	r3, #1
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	429a      	cmp	r2, r3
 8004836:	d3b7      	bcc.n	80047a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004846:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800484a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004858:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	f043 0210 	orr.w	r2, r3, #16
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	699a      	ldr	r2, [r3, #24]
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <USB_DevInit+0x2c4>)
 8004872:	4313      	orrs	r3, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d005      	beq.n	800488a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f043 0208 	orr.w	r2, r3, #8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800488a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800488c:	2b01      	cmp	r3, #1
 800488e:	d107      	bne.n	80048a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004898:	f043 0304 	orr.w	r3, r3, #4
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048ac:	b004      	add	sp, #16
 80048ae:	4770      	bx	lr
 80048b0:	803c3800 	.word	0x803c3800

080048b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a13      	ldr	r2, [pc, #76]	; (8004918 <USB_FlushTxFifo+0x64>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e01b      	b.n	800490c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	daf2      	bge.n	80048c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	019b      	lsls	r3, r3, #6
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <USB_FlushTxFifo+0x64>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e006      	b.n	800490c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d0f0      	beq.n	80048ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	00030d40 	.word	0x00030d40

0800491c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3301      	adds	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4a11      	ldr	r2, [pc, #68]	; (8004978 <USB_FlushRxFifo+0x5c>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d901      	bls.n	800493a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e018      	b.n	800496c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	daf2      	bge.n	8004928 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2210      	movs	r2, #16
 800494a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	3301      	adds	r3, #1
 8004950:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	4a08      	ldr	r2, [pc, #32]	; (8004978 <USB_FlushRxFifo+0x5c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d901      	bls.n	800495e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e006      	b.n	800496c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	2b10      	cmp	r3, #16
 8004968:	d0f0      	beq.n	800494c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800496a:	2300      	movs	r3, #0
}
 800496c:	4618      	mov	r0, r3
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	00030d40 	.word	0x00030d40

0800497c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	68f9      	ldr	r1, [r7, #12]
 8004998:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800499c:	4313      	orrs	r3, r2
 800499e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 0306 	and.w	r3, r3, #6
 80049c6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80049ce:	2300      	movs	r3, #0
 80049d0:	75fb      	strb	r3, [r7, #23]
 80049d2:	e00a      	b.n	80049ea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d002      	beq.n	80049e0 <USB_GetDevSpeed+0x32>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d102      	bne.n	80049e6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80049e0:	2302      	movs	r3, #2
 80049e2:	75fb      	strb	r3, [r7, #23]
 80049e4:	e001      	b.n	80049ea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80049e6:	230f      	movs	r3, #15
 80049e8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	785b      	ldrb	r3, [r3, #1]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d13a      	bne.n	8004a8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	f003 030f 	and.w	r3, r3, #15
 8004a24:	2101      	movs	r1, #1
 8004a26:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a32:	4313      	orrs	r3, r2
 8004a34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d155      	bne.n	8004af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	015a      	lsls	r2, r3, #5
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	791b      	ldrb	r3, [r3, #4]
 8004a66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	059b      	lsls	r3, r3, #22
 8004a6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004a70:	4313      	orrs	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	0151      	lsls	r1, r2, #5
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	440a      	add	r2, r1
 8004a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	e036      	b.n	8004af8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	f003 030f 	and.w	r3, r3, #15
 8004a9a:	2101      	movs	r1, #1
 8004a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	68f9      	ldr	r1, [r7, #12]
 8004aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d11a      	bne.n	8004af8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	791b      	ldrb	r3, [r3, #4]
 8004adc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	0151      	lsls	r1, r2, #5
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	440a      	add	r2, r1
 8004aea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	785b      	ldrb	r3, [r3, #1]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d161      	bne.n	8004be8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3a:	d11f      	bne.n	8004b7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	2101      	movs	r1, #1
 8004b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	68f9      	ldr	r1, [r7, #12]
 8004b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	f003 030f 	and.w	r3, r3, #15
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	0159      	lsls	r1, r3, #5
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	440b      	add	r3, r1
 8004bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bde:	4619      	mov	r1, r3
 8004be0:	4b35      	ldr	r3, [pc, #212]	; (8004cb8 <USB_DeactivateEndpoint+0x1b0>)
 8004be2:	4013      	ands	r3, r2
 8004be4:	600b      	str	r3, [r1, #0]
 8004be6:	e060      	b.n	8004caa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	015a      	lsls	r2, r3, #5
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfe:	d11f      	bne.n	8004c40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	015a      	lsls	r2, r3, #5
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68ba      	ldr	r2, [r7, #8]
 8004c10:	0151      	lsls	r1, r2, #5
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	440a      	add	r2, r1
 8004c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	2101      	movs	r1, #1
 8004c52:	fa01 f303 	lsl.w	r3, r1, r3
 8004c56:	041b      	lsls	r3, r3, #16
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	68f9      	ldr	r1, [r7, #12]
 8004c5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c60:	4013      	ands	r3, r2
 8004c62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c6a:	69da      	ldr	r2, [r3, #28]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	f003 030f 	and.w	r3, r3, #15
 8004c74:	2101      	movs	r1, #1
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	041b      	lsls	r3, r3, #16
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	68f9      	ldr	r1, [r7, #12]
 8004c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c84:	4013      	ands	r3, r2
 8004c86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	0159      	lsls	r1, r3, #5
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	440b      	add	r3, r1
 8004c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <USB_DeactivateEndpoint+0x1b4>)
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	ec337800 	.word	0xec337800
 8004cbc:	eff37800 	.word	0xeff37800

08004cc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	; 0x28
 8004cc4:	af02      	add	r7, sp, #8
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	785b      	ldrb	r3, [r3, #1]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	f040 815c 	bne.w	8004f9a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d132      	bne.n	8004d50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	0151      	lsls	r1, r2, #5
 8004cfc:	69fa      	ldr	r2, [r7, #28]
 8004cfe:	440a      	add	r2, r1
 8004d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	0151      	lsls	r1, r2, #5
 8004d20:	69fa      	ldr	r2, [r7, #28]
 8004d22:	440a      	add	r2, r1
 8004d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	015a      	lsls	r2, r3, #5
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	4413      	add	r3, r2
 8004d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	0151      	lsls	r1, r2, #5
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	440a      	add	r2, r1
 8004d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d48:	0cdb      	lsrs	r3, r3, #19
 8004d4a:	04db      	lsls	r3, r3, #19
 8004d4c:	6113      	str	r3, [r2, #16]
 8004d4e:	e074      	b.n	8004e3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	69fa      	ldr	r2, [r7, #28]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6a:	0cdb      	lsrs	r3, r3, #19
 8004d6c:	04db      	lsls	r3, r3, #19
 8004d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	69fa      	ldr	r2, [r7, #28]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6999      	ldr	r1, [r3, #24]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	440b      	add	r3, r1
 8004dac:	1e59      	subs	r1, r3, #1
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004db6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004db8:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <USB_EPStartXfer+0x370>)
 8004dba:	400b      	ands	r3, r1
 8004dbc:	69b9      	ldr	r1, [r7, #24]
 8004dbe:	0148      	lsls	r0, r1, #5
 8004dc0:	69f9      	ldr	r1, [r7, #28]
 8004dc2:	4401      	add	r1, r0
 8004dc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	015a      	lsls	r2, r3, #5
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de2:	69b9      	ldr	r1, [r7, #24]
 8004de4:	0148      	lsls	r0, r1, #5
 8004de6:	69f9      	ldr	r1, [r7, #28]
 8004de8:	4401      	add	r1, r0
 8004dea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004dee:	4313      	orrs	r3, r2
 8004df0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	791b      	ldrb	r3, [r3, #4]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d11f      	bne.n	8004e3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004e18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d14b      	bne.n	8004ed8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d009      	beq.n	8004e5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e54:	461a      	mov	r2, r3
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d128      	bne.n	8004eb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d110      	bne.n	8004e96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e00f      	b.n	8004eb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	0151      	lsls	r1, r2, #5
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	440a      	add	r2, r1
 8004ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	e133      	b.n	8005140 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	0151      	lsls	r1, r2, #5
 8004eea:	69fa      	ldr	r2, [r7, #28]
 8004eec:	440a      	add	r2, r1
 8004eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ef6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	791b      	ldrb	r3, [r3, #4]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d015      	beq.n	8004f2c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 811b 	beq.w	8005140 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	69f9      	ldr	r1, [r7, #28]
 8004f22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f26:	4313      	orrs	r3, r2
 8004f28:	634b      	str	r3, [r1, #52]	; 0x34
 8004f2a:	e109      	b.n	8005140 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d110      	bne.n	8004f5e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f5a:	6013      	str	r3, [r2, #0]
 8004f5c:	e00f      	b.n	8004f7e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f7c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	6919      	ldr	r1, [r3, #16]
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	b298      	uxth	r0, r3
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4603      	mov	r3, r0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fade 	bl	8005554 <USB_WritePacket>
 8004f98:	e0d2      	b.n	8005140 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb4:	0cdb      	lsrs	r3, r3, #19
 8004fb6:	04db      	lsls	r3, r3, #19
 8004fb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	69fa      	ldr	r2, [r7, #28]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004fd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fdc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d126      	bne.n	8005034 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	0148      	lsls	r0, r1, #5
 8005000:	69f9      	ldr	r1, [r7, #28]
 8005002:	4401      	add	r1, r0
 8005004:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005008:	4313      	orrs	r3, r2
 800500a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	0151      	lsls	r1, r2, #5
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	440a      	add	r2, r1
 8005022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005026:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800502a:	6113      	str	r3, [r2, #16]
 800502c:	e03a      	b.n	80050a4 <USB_EPStartXfer+0x3e4>
 800502e:	bf00      	nop
 8005030:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4413      	add	r3, r2
 800503e:	1e5a      	subs	r2, r3, #1
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	8afa      	ldrh	r2, [r7, #22]
 8005050:	fb03 f202 	mul.w	r2, r3, r2
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	8afb      	ldrh	r3, [r7, #22]
 8005068:	04d9      	lsls	r1, r3, #19
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <USB_EPStartXfer+0x48c>)
 800506c:	400b      	ands	r3, r1
 800506e:	69b9      	ldr	r1, [r7, #24]
 8005070:	0148      	lsls	r0, r1, #5
 8005072:	69f9      	ldr	r1, [r7, #28]
 8005074:	4401      	add	r1, r0
 8005076:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800507a:	4313      	orrs	r3, r2
 800507c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	015a      	lsls	r2, r3, #5
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	4413      	add	r3, r2
 8005086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800508a:	691a      	ldr	r2, [r3, #16]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005094:	69b9      	ldr	r1, [r7, #24]
 8005096:	0148      	lsls	r0, r1, #5
 8005098:	69f9      	ldr	r1, [r7, #28]
 800509a:	4401      	add	r1, r0
 800509c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050a0:	4313      	orrs	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050a4:	79fb      	ldrb	r3, [r7, #7]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10d      	bne.n	80050c6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	6919      	ldr	r1, [r3, #16]
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c2:	460a      	mov	r2, r1
 80050c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	791b      	ldrb	r3, [r3, #4]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d128      	bne.n	8005120 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d110      	bne.n	8005100 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e00f      	b.n	8005120 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69ba      	ldr	r2, [r7, #24]
 8005110:	0151      	lsls	r1, r2, #5
 8005112:	69fa      	ldr	r2, [r7, #28]
 8005114:	440a      	add	r2, r1
 8005116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800511a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	4413      	add	r3, r2
 8005128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	0151      	lsls	r1, r2, #5
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	440a      	add	r2, r1
 8005136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800513a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800513e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	1ff80000 	.word	0x1ff80000

08005150 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	4613      	mov	r3, r2
 800515c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	785b      	ldrb	r3, [r3, #1]
 800516c:	2b01      	cmp	r3, #1
 800516e:	f040 80ce 	bne.w	800530e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	699b      	ldr	r3, [r3, #24]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d132      	bne.n	80051e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	691b      	ldr	r3, [r3, #16]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800519c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051d8:	0cdb      	lsrs	r3, r3, #19
 80051da:	04db      	lsls	r3, r3, #19
 80051dc:	6113      	str	r3, [r2, #16]
 80051de:	e04e      	b.n	800527e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	697a      	ldr	r2, [r7, #20]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fa:	0cdb      	lsrs	r3, r3, #19
 80051fc:	04db      	lsls	r3, r3, #19
 80051fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800521e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005222:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	699a      	ldr	r2, [r3, #24]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	429a      	cmp	r2, r3
 800522e:	d903      	bls.n	8005238 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	68da      	ldr	r2, [r3, #12]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005252:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005256:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	015a      	lsls	r2, r3, #5
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4413      	add	r3, r2
 8005260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526e:	6939      	ldr	r1, [r7, #16]
 8005270:	0148      	lsls	r0, r1, #5
 8005272:	6979      	ldr	r1, [r7, #20]
 8005274:	4401      	add	r1, r0
 8005276:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800527a:	4313      	orrs	r3, r2
 800527c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d11e      	bne.n	80052c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d009      	beq.n	80052a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	015a      	lsls	r2, r3, #5
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	4413      	add	r3, r2
 8005294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005298:	461a      	mov	r2, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e097      	b.n	80053f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8083 	beq.w	80053f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	f003 030f 	and.w	r3, r3, #15
 80052fc:	2101      	movs	r1, #1
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	6979      	ldr	r1, [r7, #20]
 8005304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005308:	4313      	orrs	r3, r2
 800530a:	634b      	str	r3, [r1, #52]	; 0x34
 800530c:	e071      	b.n	80053f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005328:	0cdb      	lsrs	r3, r3, #19
 800532a:	04db      	lsls	r3, r3, #19
 800532c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	015a      	lsls	r2, r3, #5
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	4413      	add	r3, r2
 8005336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	0151      	lsls	r1, r2, #5
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	440a      	add	r2, r1
 8005344:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005348:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800534c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005350:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	68da      	ldr	r2, [r3, #12]
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	4413      	add	r3, r2
 8005372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005384:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005388:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053a0:	6939      	ldr	r1, [r7, #16]
 80053a2:	0148      	lsls	r0, r1, #5
 80053a4:	6979      	ldr	r1, [r7, #20]
 80053a6:	4401      	add	r1, r0
 80053a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053ac:	4313      	orrs	r3, r2
 80053ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10d      	bne.n	80053d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d009      	beq.n	80053d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6919      	ldr	r1, [r3, #16]
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ce:	460a      	mov	r2, r1
 80053d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	371c      	adds	r7, #28
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	785b      	ldrb	r3, [r3, #1]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d14a      	bne.n	80054b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005436:	f040 8086 	bne.w	8005546 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	440a      	add	r2, r1
 8005454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005458:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800545c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	7812      	ldrb	r2, [r2, #0]
 8005472:	0151      	lsls	r1, r2, #5
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	440a      	add	r2, r1
 8005478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800547c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005480:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3301      	adds	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f242 7210 	movw	r2, #10000	; 0x2710
 800548e:	4293      	cmp	r3, r2
 8005490:	d902      	bls.n	8005498 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
          break;
 8005496:	e056      	b.n	8005546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054b0:	d0e7      	beq.n	8005482 <USB_EPStopXfer+0x82>
 80054b2:	e048      	b.n	8005546 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	015a      	lsls	r2, r3, #5
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4413      	add	r3, r2
 80054be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054cc:	d13b      	bne.n	8005546 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	7812      	ldrb	r2, [r2, #0]
 80054e2:	0151      	lsls	r1, r2, #5
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	440a      	add	r2, r1
 80054e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80054f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	0151      	lsls	r1, r2, #5
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	440a      	add	r2, r1
 800550c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005522:	4293      	cmp	r3, r2
 8005524:	d902      	bls.n	800552c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	75fb      	strb	r3, [r7, #23]
          break;
 800552a:	e00c      	b.n	8005546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005544:	d0e7      	beq.n	8005516 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005546:	7dfb      	ldrb	r3, [r7, #23]
}
 8005548:	4618      	mov	r0, r3
 800554a:	371c      	adds	r7, #28
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005554:	b480      	push	{r7}
 8005556:	b089      	sub	sp, #36	; 0x24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	4611      	mov	r1, r2
 8005560:	461a      	mov	r2, r3
 8005562:	460b      	mov	r3, r1
 8005564:	71fb      	strb	r3, [r7, #7]
 8005566:	4613      	mov	r3, r2
 8005568:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	d123      	bne.n	80055c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800557a:	88bb      	ldrh	r3, [r7, #4]
 800557c:	3303      	adds	r3, #3
 800557e:	089b      	lsrs	r3, r3, #2
 8005580:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005582:	2300      	movs	r3, #0
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	e018      	b.n	80055ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	031a      	lsls	r2, r3, #12
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	4413      	add	r3, r2
 8005590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005594:	461a      	mov	r2, r3
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	3301      	adds	r3, #1
 80055a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	3301      	adds	r3, #1
 80055a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	3301      	adds	r3, #1
 80055ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	3301      	adds	r3, #1
 80055b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80055b4:	69bb      	ldr	r3, [r7, #24]
 80055b6:	3301      	adds	r3, #1
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d3e2      	bcc.n	8005588 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3724      	adds	r7, #36	; 0x24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b08b      	sub	sp, #44	; 0x2c
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	4613      	mov	r3, r2
 80055dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055e6:	88fb      	ldrh	r3, [r7, #6]
 80055e8:	089b      	lsrs	r3, r3, #2
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	f003 0303 	and.w	r3, r3, #3
 80055f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055f6:	2300      	movs	r3, #0
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	e014      	b.n	8005626 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	601a      	str	r2, [r3, #0]
    pDest++;
 8005608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560a:	3301      	adds	r3, #1
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	3301      	adds	r3, #1
 8005612:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	3301      	adds	r3, #1
 8005618:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800561a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561c:	3301      	adds	r3, #1
 800561e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	3301      	adds	r3, #1
 8005624:	623b      	str	r3, [r7, #32]
 8005626:	6a3a      	ldr	r2, [r7, #32]
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	429a      	cmp	r2, r3
 800562c:	d3e6      	bcc.n	80055fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800562e:	8bfb      	ldrh	r3, [r7, #30]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d01e      	beq.n	8005672 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005634:	2300      	movs	r3, #0
 8005636:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800563e:	461a      	mov	r2, r3
 8005640:	f107 0310 	add.w	r3, r7, #16
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	fa22 f303 	lsr.w	r3, r2, r3
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	701a      	strb	r2, [r3, #0]
      i++;
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	3301      	adds	r3, #1
 800565e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005662:	3301      	adds	r3, #1
 8005664:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005666:	8bfb      	ldrh	r3, [r7, #30]
 8005668:	3b01      	subs	r3, #1
 800566a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800566c:	8bfb      	ldrh	r3, [r7, #30]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1ea      	bne.n	8005648 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005674:	4618      	mov	r0, r3
 8005676:	372c      	adds	r7, #44	; 0x2c
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	785b      	ldrb	r3, [r3, #1]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d12c      	bne.n	80056f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	db12      	blt.n	80056d4 <USB_EPSetStall+0x54>
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00f      	beq.n	80056d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e02b      	b.n	800574e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	db12      	blt.n	800572e <USB_EPSetStall+0xae>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00f      	beq.n	800572e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	0151      	lsls	r1, r2, #5
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	440a      	add	r2, r1
 8005724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800572c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	4413      	add	r3, r2
 8005736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	440a      	add	r2, r1
 8005744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800574c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3714      	adds	r7, #20
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	785b      	ldrb	r3, [r3, #1]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d128      	bne.n	80057ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	440a      	add	r2, r1
 800578e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005796:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	791b      	ldrb	r3, [r3, #4]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d003      	beq.n	80057a8 <USB_EPClearStall+0x4c>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	791b      	ldrb	r3, [r3, #4]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d138      	bne.n	800581a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	0151      	lsls	r1, r2, #5
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	440a      	add	r2, r1
 80057be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c6:	6013      	str	r3, [r2, #0]
 80057c8:	e027      	b.n	800581a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	791b      	ldrb	r3, [r3, #4]
 80057ee:	2b03      	cmp	r3, #3
 80057f0:	d003      	beq.n	80057fa <USB_EPClearStall+0x9e>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	791b      	ldrb	r3, [r3, #4]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d10f      	bne.n	800581a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	4413      	add	r3, r2
 8005802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	440a      	add	r2, r1
 8005810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005818:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005846:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800584a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	011b      	lsls	r3, r3, #4
 8005858:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005862:	4313      	orrs	r3, r2
 8005864:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3714      	adds	r7, #20
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800588e:	f023 0303 	bic.w	r3, r3, #3
 8005892:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058a2:	f023 0302 	bic.w	r3, r3, #2
 80058a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80058d0:	f023 0303 	bic.w	r3, r3, #3
 80058d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e4:	f043 0302 	orr.w	r3, r3, #2
 80058e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	699b      	ldr	r3, [r3, #24]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4013      	ands	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005910:	68fb      	ldr	r3, [r7, #12]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	0c1b      	lsrs	r3, r3, #16
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	4013      	ands	r3, r2
 8005974:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	b29b      	uxth	r3, r3
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005986:	b480      	push	{r7}
 8005988:	b085      	sub	sp, #20
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005996:	78fb      	ldrb	r3, [r7, #3]
 8005998:	015a      	lsls	r2, r3, #5
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4413      	add	r3, r2
 800599e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4013      	ands	r3, r2
 80059b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059b4:	68bb      	ldr	r3, [r7, #8]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b087      	sub	sp, #28
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	fa22 f303 	lsr.w	r3, r2, r3
 80059f2:	01db      	lsls	r3, r3, #7
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059fc:	78fb      	ldrb	r3, [r7, #3]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a10:	68bb      	ldr	r3, [r7, #8]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b083      	sub	sp, #12
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b480      	push	{r7}
 8005a3c:	b085      	sub	sp, #20
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a58:	f023 0307 	bic.w	r3, r3, #7
 8005a5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	460b      	mov	r3, r1
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	333c      	adds	r3, #60	; 0x3c
 8005a96:	3304      	adds	r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4a26      	ldr	r2, [pc, #152]	; (8005b38 <USB_EP0_OutStart+0xb8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d90a      	bls.n	8005aba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ab0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab4:	d101      	bne.n	8005aba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	e037      	b.n	8005b2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ae8:	f043 0318 	orr.w	r3, r3, #24
 8005aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005afc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005b00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005b02:	7afb      	ldrb	r3, [r7, #11]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d10f      	bne.n	8005b28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	461a      	mov	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005b26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	4f54300a 	.word	0x4f54300a

08005b3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	4a13      	ldr	r2, [pc, #76]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e01b      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	daf2      	bge.n	8005b48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f043 0201 	orr.w	r2, r3, #1
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	3301      	adds	r3, #1
 8005b76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <USB_CoreReset+0x64>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e006      	b.n	8005b92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d0f0      	beq.n	8005b72 <USB_CoreReset+0x36>

  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	00030d40 	.word	0x00030d40

08005ba4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	460b      	mov	r3, r1
 8005bae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005bb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005bb4:	f005 f9d8 	bl	800af68 <USBD_static_malloc>
 8005bb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	32b0      	adds	r2, #176	; 0xb0
 8005bca:	2100      	movs	r1, #0
 8005bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e0d4      	b.n	8005d7e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005bd4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005bd8:	2100      	movs	r1, #0
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f005 fc12 	bl	800b404 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	32b0      	adds	r2, #176	; 0xb0
 8005bea:	68f9      	ldr	r1, [r7, #12]
 8005bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	32b0      	adds	r2, #176	; 0xb0
 8005bfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	7c1b      	ldrb	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d138      	bne.n	8005c7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c0c:	4b5e      	ldr	r3, [pc, #376]	; (8005d88 <USBD_CDC_Init+0x1e4>)
 8005c0e:	7819      	ldrb	r1, [r3, #0]
 8005c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c14:	2202      	movs	r2, #2
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f005 f883 	bl	800ad22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c1c:	4b5a      	ldr	r3, [pc, #360]	; (8005d88 <USBD_CDC_Init+0x1e4>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f003 020f 	and.w	r2, r3, #15
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	3324      	adds	r3, #36	; 0x24
 8005c32:	2201      	movs	r2, #1
 8005c34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c36:	4b55      	ldr	r3, [pc, #340]	; (8005d8c <USBD_CDC_Init+0x1e8>)
 8005c38:	7819      	ldrb	r1, [r3, #0]
 8005c3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c3e:	2202      	movs	r2, #2
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f005 f86e 	bl	800ad22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c46:	4b51      	ldr	r3, [pc, #324]	; (8005d8c <USBD_CDC_Init+0x1e8>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f003 020f 	and.w	r2, r3, #15
 8005c4e:	6879      	ldr	r1, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c5e:	2201      	movs	r2, #1
 8005c60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c62:	4b4b      	ldr	r3, [pc, #300]	; (8005d90 <USBD_CDC_Init+0x1ec>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	f003 020f 	and.w	r2, r3, #15
 8005c6a:	6879      	ldr	r1, [r7, #4]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	3326      	adds	r3, #38	; 0x26
 8005c78:	2210      	movs	r2, #16
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	e035      	b.n	8005cea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c7e:	4b42      	ldr	r3, [pc, #264]	; (8005d88 <USBD_CDC_Init+0x1e4>)
 8005c80:	7819      	ldrb	r1, [r3, #0]
 8005c82:	2340      	movs	r3, #64	; 0x40
 8005c84:	2202      	movs	r2, #2
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f005 f84b 	bl	800ad22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c8c:	4b3e      	ldr	r3, [pc, #248]	; (8005d88 <USBD_CDC_Init+0x1e4>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f003 020f 	and.w	r2, r3, #15
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	3324      	adds	r3, #36	; 0x24
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005ca6:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <USBD_CDC_Init+0x1e8>)
 8005ca8:	7819      	ldrb	r1, [r3, #0]
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	2202      	movs	r2, #2
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f005 f837 	bl	800ad22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005cb4:	4b35      	ldr	r3, [pc, #212]	; (8005d8c <USBD_CDC_Init+0x1e8>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	6879      	ldr	r1, [r7, #4]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ccc:	2201      	movs	r2, #1
 8005cce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005cd0:	4b2f      	ldr	r3, [pc, #188]	; (8005d90 <USBD_CDC_Init+0x1ec>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f003 020f 	and.w	r2, r3, #15
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	3326      	adds	r3, #38	; 0x26
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cea:	4b29      	ldr	r3, [pc, #164]	; (8005d90 <USBD_CDC_Init+0x1ec>)
 8005cec:	7819      	ldrb	r1, [r3, #0]
 8005cee:	2308      	movs	r3, #8
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f005 f815 	bl	800ad22 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005cf8:	4b25      	ldr	r3, [pc, #148]	; (8005d90 <USBD_CDC_Init+0x1ec>)
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	6879      	ldr	r1, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3324      	adds	r3, #36	; 0x24
 8005d0e:	2201      	movs	r2, #1
 8005d10:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	33b0      	adds	r3, #176	; 0xb0
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e018      	b.n	8005d7e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	7c1b      	ldrb	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <USBD_CDC_Init+0x1e8>)
 8005d56:	7819      	ldrb	r1, [r3, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f005 f8cc 	bl	800af00 <USBD_LL_PrepareReceive>
 8005d68:	e008      	b.n	8005d7c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <USBD_CDC_Init+0x1e8>)
 8005d6c:	7819      	ldrb	r1, [r3, #0]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d74:	2340      	movs	r3, #64	; 0x40
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f005 f8c2 	bl	800af00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000093 	.word	0x20000093
 8005d8c:	20000094 	.word	0x20000094
 8005d90:	20000095 	.word	0x20000095

08005d94 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005da0:	4b3a      	ldr	r3, [pc, #232]	; (8005e8c <USBD_CDC_DeInit+0xf8>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	4619      	mov	r1, r3
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f004 ffe1 	bl	800ad6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005dac:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <USBD_CDC_DeInit+0xf8>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f003 020f 	and.w	r2, r3, #15
 8005db4:	6879      	ldr	r1, [r7, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	4413      	add	r3, r2
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	440b      	add	r3, r1
 8005dc0:	3324      	adds	r3, #36	; 0x24
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005dc6:	4b32      	ldr	r3, [pc, #200]	; (8005e90 <USBD_CDC_DeInit+0xfc>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	4619      	mov	r1, r3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f004 ffce 	bl	800ad6e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005dd2:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <USBD_CDC_DeInit+0xfc>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	f003 020f 	and.w	r2, r3, #15
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dea:	2200      	movs	r2, #0
 8005dec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005dee:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <USBD_CDC_DeInit+0x100>)
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f004 ffba 	bl	800ad6e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005dfa:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <USBD_CDC_DeInit+0x100>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	f003 020f 	and.w	r2, r3, #15
 8005e02:	6879      	ldr	r1, [r7, #4]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	440b      	add	r3, r1
 8005e0e:	3324      	adds	r3, #36	; 0x24
 8005e10:	2200      	movs	r2, #0
 8005e12:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005e14:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <USBD_CDC_DeInit+0x100>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f003 020f 	and.w	r2, r3, #15
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	3326      	adds	r3, #38	; 0x26
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	32b0      	adds	r2, #176	; 0xb0
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d01f      	beq.n	8005e80 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	33b0      	adds	r3, #176	; 0xb0
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	32b0      	adds	r2, #176	; 0xb0
 8005e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f005 f88e 	bl	800af84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	32b0      	adds	r2, #176	; 0xb0
 8005e72:	2100      	movs	r1, #0
 8005e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000093 	.word	0x20000093
 8005e90:	20000094 	.word	0x20000094
 8005e94:	20000095 	.word	0x20000095

08005e98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	32b0      	adds	r2, #176	; 0xb0
 8005eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e0bf      	b.n	8006048 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d050      	beq.n	8005f76 <USBD_CDC_Setup+0xde>
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	f040 80af 	bne.w	8006038 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	88db      	ldrh	r3, [r3, #6]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d03a      	beq.n	8005f58 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da1b      	bge.n	8005f24 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	33b0      	adds	r3, #176	; 0xb0
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005f02:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f04:	683a      	ldr	r2, [r7, #0]
 8005f06:	88d2      	ldrh	r2, [r2, #6]
 8005f08:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	88db      	ldrh	r3, [r3, #6]
 8005f0e:	2b07      	cmp	r3, #7
 8005f10:	bf28      	it	cs
 8005f12:	2307      	movcs	r3, #7
 8005f14:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	89fa      	ldrh	r2, [r7, #14]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f001 fd89 	bl	8007a34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005f22:	e090      	b.n	8006046 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	785a      	ldrb	r2, [r3, #1]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	88db      	ldrh	r3, [r3, #6]
 8005f32:	2b3f      	cmp	r3, #63	; 0x3f
 8005f34:	d803      	bhi.n	8005f3e <USBD_CDC_Setup+0xa6>
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	88db      	ldrh	r3, [r3, #6]
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	e000      	b.n	8005f40 <USBD_CDC_Setup+0xa8>
 8005f3e:	2240      	movs	r2, #64	; 0x40
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005f46:	6939      	ldr	r1, [r7, #16]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f001 fd9b 	bl	8007a8c <USBD_CtlPrepareRx>
      break;
 8005f56:	e076      	b.n	8006046 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	33b0      	adds	r3, #176	; 0xb0
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	7850      	ldrb	r0, [r2, #1]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	6839      	ldr	r1, [r7, #0]
 8005f72:	4798      	blx	r3
      break;
 8005f74:	e067      	b.n	8006046 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b0b      	cmp	r3, #11
 8005f7c:	d851      	bhi.n	8006022 <USBD_CDC_Setup+0x18a>
 8005f7e:	a201      	add	r2, pc, #4	; (adr r2, 8005f84 <USBD_CDC_Setup+0xec>)
 8005f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f84:	08005fb5 	.word	0x08005fb5
 8005f88:	08006031 	.word	0x08006031
 8005f8c:	08006023 	.word	0x08006023
 8005f90:	08006023 	.word	0x08006023
 8005f94:	08006023 	.word	0x08006023
 8005f98:	08006023 	.word	0x08006023
 8005f9c:	08006023 	.word	0x08006023
 8005fa0:	08006023 	.word	0x08006023
 8005fa4:	08006023 	.word	0x08006023
 8005fa8:	08006023 	.word	0x08006023
 8005fac:	08005fdf 	.word	0x08005fdf
 8005fb0:	08006009 	.word	0x08006009
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d107      	bne.n	8005fd0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005fc0:	f107 030a 	add.w	r3, r7, #10
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 fd33 	bl	8007a34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fce:	e032      	b.n	8006036 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 fcbd 	bl	8007952 <USBD_CtlError>
            ret = USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	75fb      	strb	r3, [r7, #23]
          break;
 8005fdc:	e02b      	b.n	8006036 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d107      	bne.n	8005ffa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fea:	f107 030d 	add.w	r3, r7, #13
 8005fee:	2201      	movs	r2, #1
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fd1e 	bl	8007a34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ff8:	e01d      	b.n	8006036 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f001 fca8 	bl	8007952 <USBD_CtlError>
            ret = USBD_FAIL;
 8006002:	2303      	movs	r3, #3
 8006004:	75fb      	strb	r3, [r7, #23]
          break;
 8006006:	e016      	b.n	8006036 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800600e:	b2db      	uxtb	r3, r3
 8006010:	2b03      	cmp	r3, #3
 8006012:	d00f      	beq.n	8006034 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006014:	6839      	ldr	r1, [r7, #0]
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 fc9b 	bl	8007952 <USBD_CtlError>
            ret = USBD_FAIL;
 800601c:	2303      	movs	r3, #3
 800601e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006020:	e008      	b.n	8006034 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006022:	6839      	ldr	r1, [r7, #0]
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f001 fc94 	bl	8007952 <USBD_CtlError>
          ret = USBD_FAIL;
 800602a:	2303      	movs	r3, #3
 800602c:	75fb      	strb	r3, [r7, #23]
          break;
 800602e:	e002      	b.n	8006036 <USBD_CDC_Setup+0x19e>
          break;
 8006030:	bf00      	nop
 8006032:	e008      	b.n	8006046 <USBD_CDC_Setup+0x1ae>
          break;
 8006034:	bf00      	nop
      }
      break;
 8006036:	e006      	b.n	8006046 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f001 fc89 	bl	8007952 <USBD_CtlError>
      ret = USBD_FAIL;
 8006040:	2303      	movs	r3, #3
 8006042:	75fb      	strb	r3, [r7, #23]
      break;
 8006044:	bf00      	nop
  }

  return (uint8_t)ret;
 8006046:	7dfb      	ldrb	r3, [r7, #23]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006062:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	32b0      	adds	r2, #176	; 0xb0
 800606e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006076:	2303      	movs	r3, #3
 8006078:	e065      	b.n	8006146 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	32b0      	adds	r2, #176	; 0xb0
 8006084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006088:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800608a:	78fb      	ldrb	r3, [r7, #3]
 800608c:	f003 020f 	and.w	r2, r3, #15
 8006090:	6879      	ldr	r1, [r7, #4]
 8006092:	4613      	mov	r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	440b      	add	r3, r1
 800609c:	3318      	adds	r3, #24
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d02f      	beq.n	8006104 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	f003 020f 	and.w	r2, r3, #15
 80060aa:	6879      	ldr	r1, [r7, #4]
 80060ac:	4613      	mov	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	4413      	add	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	440b      	add	r3, r1
 80060b6:	3318      	adds	r3, #24
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 010f 	and.w	r1, r3, #15
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	460b      	mov	r3, r1
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	440b      	add	r3, r1
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4403      	add	r3, r0
 80060cc:	3348      	adds	r3, #72	; 0x48
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d112      	bne.n	8006104 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	f003 020f 	and.w	r2, r3, #15
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	3318      	adds	r3, #24
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060f6:	78f9      	ldrb	r1, [r7, #3]
 80060f8:	2300      	movs	r3, #0
 80060fa:	2200      	movs	r2, #0
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f004 fede 	bl	800aebe <USBD_LL_Transmit>
 8006102:	e01f      	b.n	8006144 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2200      	movs	r2, #0
 8006108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	33b0      	adds	r3, #176	; 0xb0
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d010      	beq.n	8006144 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	33b0      	adds	r3, #176	; 0xb0
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}

0800614e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800614e:	b580      	push	{r7, lr}
 8006150:	b084      	sub	sp, #16
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
 8006156:	460b      	mov	r3, r1
 8006158:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	32b0      	adds	r2, #176	; 0xb0
 8006164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006168:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	32b0      	adds	r2, #176	; 0xb0
 8006174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800617c:	2303      	movs	r3, #3
 800617e:	e01a      	b.n	80061b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f004 fedc 	bl	800af42 <USBD_LL_GetRxDataSize>
 800618a:	4602      	mov	r2, r0
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	33b0      	adds	r3, #176	; 0xb0
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80061b0:	4611      	mov	r1, r2
 80061b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b084      	sub	sp, #16
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	32b0      	adds	r2, #176	; 0xb0
 80061d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	e025      	b.n	800622c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	33b0      	adds	r3, #176	; 0xb0
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d01a      	beq.n	800622a <USBD_CDC_EP0_RxReady+0x6c>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80061fa:	2bff      	cmp	r3, #255	; 0xff
 80061fc:	d015      	beq.n	800622a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	33b0      	adds	r3, #176	; 0xb0
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	4413      	add	r3, r2
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006216:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800621e:	b292      	uxth	r2, r2
 8006220:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	22ff      	movs	r2, #255	; 0xff
 8006226:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800623c:	2182      	movs	r1, #130	; 0x82
 800623e:	4818      	ldr	r0, [pc, #96]	; (80062a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006240:	f000 fd4f 	bl	8006ce2 <USBD_GetEpDesc>
 8006244:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006246:	2101      	movs	r1, #1
 8006248:	4815      	ldr	r0, [pc, #84]	; (80062a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800624a:	f000 fd4a 	bl	8006ce2 <USBD_GetEpDesc>
 800624e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006250:	2181      	movs	r1, #129	; 0x81
 8006252:	4813      	ldr	r0, [pc, #76]	; (80062a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006254:	f000 fd45 	bl	8006ce2 <USBD_GetEpDesc>
 8006258:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	2210      	movs	r2, #16
 8006264:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d006      	beq.n	800627a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2200      	movs	r2, #0
 8006270:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006274:	711a      	strb	r2, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d006      	beq.n	800628e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006288:	711a      	strb	r2, [r3, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2243      	movs	r2, #67	; 0x43
 8006292:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006294:	4b02      	ldr	r3, [pc, #8]	; (80062a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006296:	4618      	mov	r0, r3
 8006298:	3718      	adds	r7, #24
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000050 	.word	0x20000050

080062a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062ac:	2182      	movs	r1, #130	; 0x82
 80062ae:	4818      	ldr	r0, [pc, #96]	; (8006310 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062b0:	f000 fd17 	bl	8006ce2 <USBD_GetEpDesc>
 80062b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062b6:	2101      	movs	r1, #1
 80062b8:	4815      	ldr	r0, [pc, #84]	; (8006310 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062ba:	f000 fd12 	bl	8006ce2 <USBD_GetEpDesc>
 80062be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80062c0:	2181      	movs	r1, #129	; 0x81
 80062c2:	4813      	ldr	r0, [pc, #76]	; (8006310 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80062c4:	f000 fd0d 	bl	8006ce2 <USBD_GetEpDesc>
 80062c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2210      	movs	r2, #16
 80062d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d006      	beq.n	80062ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	2200      	movs	r2, #0
 80062e0:	711a      	strb	r2, [r3, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f042 0202 	orr.w	r2, r2, #2
 80062e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d006      	beq.n	80062fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	711a      	strb	r2, [r3, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f042 0202 	orr.w	r2, r2, #2
 80062fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2243      	movs	r2, #67	; 0x43
 8006302:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006304:	4b02      	ldr	r3, [pc, #8]	; (8006310 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000050 	.word	0x20000050

08006314 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800631c:	2182      	movs	r1, #130	; 0x82
 800631e:	4818      	ldr	r0, [pc, #96]	; (8006380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006320:	f000 fcdf 	bl	8006ce2 <USBD_GetEpDesc>
 8006324:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006326:	2101      	movs	r1, #1
 8006328:	4815      	ldr	r0, [pc, #84]	; (8006380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800632a:	f000 fcda 	bl	8006ce2 <USBD_GetEpDesc>
 800632e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006330:	2181      	movs	r1, #129	; 0x81
 8006332:	4813      	ldr	r0, [pc, #76]	; (8006380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006334:	f000 fcd5 	bl	8006ce2 <USBD_GetEpDesc>
 8006338:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	2210      	movs	r2, #16
 8006344:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d006      	beq.n	800635a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	2200      	movs	r2, #0
 8006350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006354:	711a      	strb	r2, [r3, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006368:	711a      	strb	r2, [r3, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2243      	movs	r2, #67	; 0x43
 8006372:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006374:	4b02      	ldr	r3, [pc, #8]	; (8006380 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000050 	.word	0x20000050

08006384 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	220a      	movs	r2, #10
 8006390:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006392:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006394:	4618      	mov	r0, r3
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	2000000c 	.word	0x2000000c

080063a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e009      	b.n	80063cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	33b0      	adds	r3, #176	; 0xb0
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80063d8:	b480      	push	{r7}
 80063da:	b087      	sub	sp, #28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	32b0      	adds	r2, #176	; 0xb0
 80063ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e008      	b.n	8006410 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	371c      	adds	r7, #28
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	32b0      	adds	r2, #176	; 0xb0
 8006430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006434:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800643c:	2303      	movs	r3, #3
 800643e:	e004      	b.n	800644a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
	...

08006458 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	32b0      	adds	r2, #176	; 0xb0
 800646a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	32b0      	adds	r2, #176	; 0xb0
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006486:	2303      	movs	r3, #3
 8006488:	e025      	b.n	80064d6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006490:	2b00      	cmp	r3, #0
 8006492:	d11f      	bne.n	80064d4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2201      	movs	r2, #1
 8006498:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800649c:	4b10      	ldr	r3, [pc, #64]	; (80064e0 <USBD_CDC_TransmitPacket+0x88>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	f003 020f 	and.w	r2, r3, #15
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	4613      	mov	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4403      	add	r3, r0
 80064b6:	3318      	adds	r3, #24
 80064b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80064ba:	4b09      	ldr	r3, [pc, #36]	; (80064e0 <USBD_CDC_TransmitPacket+0x88>)
 80064bc:	7819      	ldrb	r1, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f004 fcf7 	bl	800aebe <USBD_LL_Transmit>

    ret = USBD_OK;
 80064d0:	2300      	movs	r3, #0
 80064d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000093 	.word	0x20000093

080064e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	32b0      	adds	r2, #176	; 0xb0
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	32b0      	adds	r2, #176	; 0xb0
 8006506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800650e:	2303      	movs	r3, #3
 8006510:	e018      	b.n	8006544 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	7c1b      	ldrb	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <USBD_CDC_ReceivePacket+0x68>)
 800651c:	7819      	ldrb	r1, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f004 fce9 	bl	800af00 <USBD_LL_PrepareReceive>
 800652e:	e008      	b.n	8006542 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <USBD_CDC_ReceivePacket+0x68>)
 8006532:	7819      	ldrb	r1, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800653a:	2340      	movs	r3, #64	; 0x40
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f004 fcdf 	bl	800af00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3710      	adds	r7, #16
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20000094 	.word	0x20000094

08006550 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	4613      	mov	r3, r2
 800655c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d101      	bne.n	8006568 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006564:	2303      	movs	r3, #3
 8006566:	e01f      	b.n	80065a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d003      	beq.n	800658e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	79fa      	ldrb	r2, [r7, #7]
 800659a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f004 fb59 	bl	800ac54 <USBD_LL_Init>
 80065a2:	4603      	mov	r3, r0
 80065a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e025      	b.n	8006614 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32ae      	adds	r2, #174	; 0xae
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00f      	beq.n	8006604 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	32ae      	adds	r2, #174	; 0xae
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	f107 020e 	add.w	r2, r7, #14
 80065f8:	4610      	mov	r0, r2
 80065fa:	4798      	blx	r3
 80065fc:	4602      	mov	r2, r0
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f004 fb61 	bl	800acec <USBD_LL_Start>
 800662a:	4603      	mov	r3, r0
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800663c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	460b      	mov	r3, r1
 8006654:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006656:	2300      	movs	r3, #0
 8006658:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	78fa      	ldrb	r2, [r7, #3]
 800666e:	4611      	mov	r1, r2
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	4798      	blx	r3
 8006674:	4603      	mov	r3, r0
 8006676:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b084      	sub	sp, #16
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	78fa      	ldrb	r2, [r7, #3]
 800669c:	4611      	mov	r1, r2
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	4798      	blx	r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 f908 	bl	80078de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066dc:	461a      	mov	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d01a      	beq.n	8006728 <USBD_LL_SetupStage+0x72>
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d822      	bhi.n	800673c <USBD_LL_SetupStage+0x86>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <USBD_LL_SetupStage+0x4a>
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d00a      	beq.n	8006714 <USBD_LL_SetupStage+0x5e>
 80066fe:	e01d      	b.n	800673c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006706:	4619      	mov	r1, r3
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fb5f 	bl	8006dcc <USBD_StdDevReq>
 800670e:	4603      	mov	r3, r0
 8006710:	73fb      	strb	r3, [r7, #15]
      break;
 8006712:	e020      	b.n	8006756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fbc7 	bl	8006eb0 <USBD_StdItfReq>
 8006722:	4603      	mov	r3, r0
 8006724:	73fb      	strb	r3, [r7, #15]
      break;
 8006726:	e016      	b.n	8006756 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800672e:	4619      	mov	r1, r3
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fc29 	bl	8006f88 <USBD_StdEPReq>
 8006736:	4603      	mov	r3, r0
 8006738:	73fb      	strb	r3, [r7, #15]
      break;
 800673a:	e00c      	b.n	8006756 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006742:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006746:	b2db      	uxtb	r3, r3
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f004 fb2e 	bl	800adac <USBD_LL_StallEP>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
      break;
 8006754:	bf00      	nop
  }

  return ret;
 8006756:	7bfb      	ldrb	r3, [r7, #15]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	460b      	mov	r3, r1
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006772:	7afb      	ldrb	r3, [r7, #11]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d16e      	bne.n	8006856 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800677e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006786:	2b03      	cmp	r3, #3
 8006788:	f040 8098 	bne.w	80068bc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	429a      	cmp	r2, r3
 8006796:	d913      	bls.n	80067c0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	1ad2      	subs	r2, r2, r3
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	4293      	cmp	r3, r2
 80067b0:	bf28      	it	cs
 80067b2:	4613      	movcs	r3, r2
 80067b4:	461a      	mov	r2, r3
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 f984 	bl	8007ac6 <USBD_CtlContinueRx>
 80067be:	e07d      	b.n	80068bc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067c6:	f003 031f 	and.w	r3, r3, #31
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d014      	beq.n	80067f8 <USBD_LL_DataOutStage+0x98>
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d81d      	bhi.n	800680e <USBD_LL_DataOutStage+0xae>
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d002      	beq.n	80067dc <USBD_LL_DataOutStage+0x7c>
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d003      	beq.n	80067e2 <USBD_LL_DataOutStage+0x82>
 80067da:	e018      	b.n	800680e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80067dc:	2300      	movs	r3, #0
 80067de:	75bb      	strb	r3, [r7, #22]
            break;
 80067e0:	e018      	b.n	8006814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	4619      	mov	r1, r3
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f000 fa5e 	bl	8006cae <USBD_CoreFindIF>
 80067f2:	4603      	mov	r3, r0
 80067f4:	75bb      	strb	r3, [r7, #22]
            break;
 80067f6:	e00d      	b.n	8006814 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	4619      	mov	r1, r3
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f000 fa60 	bl	8006cc8 <USBD_CoreFindEP>
 8006808:	4603      	mov	r3, r0
 800680a:	75bb      	strb	r3, [r7, #22]
            break;
 800680c:	e002      	b.n	8006814 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800680e:	2300      	movs	r3, #0
 8006810:	75bb      	strb	r3, [r7, #22]
            break;
 8006812:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006814:	7dbb      	ldrb	r3, [r7, #22]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d119      	bne.n	800684e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b03      	cmp	r3, #3
 8006824:	d113      	bne.n	800684e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006826:	7dba      	ldrb	r2, [r7, #22]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	32ae      	adds	r2, #174	; 0xae
 800682c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006836:	7dba      	ldrb	r2, [r7, #22]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800683e:	7dba      	ldrb	r2, [r7, #22]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	32ae      	adds	r2, #174	; 0xae
 8006844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006848:	691b      	ldr	r3, [r3, #16]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f001 f94a 	bl	8007ae8 <USBD_CtlSendStatus>
 8006854:	e032      	b.n	80068bc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006856:	7afb      	ldrb	r3, [r7, #11]
 8006858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685c:	b2db      	uxtb	r3, r3
 800685e:	4619      	mov	r1, r3
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fa31 	bl	8006cc8 <USBD_CoreFindEP>
 8006866:	4603      	mov	r3, r0
 8006868:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800686a:	7dbb      	ldrb	r3, [r7, #22]
 800686c:	2bff      	cmp	r3, #255	; 0xff
 800686e:	d025      	beq.n	80068bc <USBD_LL_DataOutStage+0x15c>
 8006870:	7dbb      	ldrb	r3, [r7, #22]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d122      	bne.n	80068bc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b03      	cmp	r3, #3
 8006880:	d117      	bne.n	80068b2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006882:	7dba      	ldrb	r2, [r7, #22]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	32ae      	adds	r2, #174	; 0xae
 8006888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00f      	beq.n	80068b2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006892:	7dba      	ldrb	r2, [r7, #22]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800689a:	7dba      	ldrb	r2, [r7, #22]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	32ae      	adds	r2, #174	; 0xae
 80068a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	7afa      	ldrb	r2, [r7, #11]
 80068a8:	4611      	mov	r1, r2
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	4798      	blx	r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	e000      	b.n	80068be <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068bc:	2300      	movs	r3, #0
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3718      	adds	r7, #24
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b086      	sub	sp, #24
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	460b      	mov	r3, r1
 80068d0:	607a      	str	r2, [r7, #4]
 80068d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80068d4:	7afb      	ldrb	r3, [r7, #11]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d16f      	bne.n	80069ba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3314      	adds	r3, #20
 80068de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d15a      	bne.n	80069a0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d914      	bls.n	8006920 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	461a      	mov	r2, r3
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f001 f8ac 	bl	8007a6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006912:	2300      	movs	r3, #0
 8006914:	2200      	movs	r2, #0
 8006916:	2100      	movs	r1, #0
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f004 faf1 	bl	800af00 <USBD_LL_PrepareReceive>
 800691e:	e03f      	b.n	80069a0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	68da      	ldr	r2, [r3, #12]
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	429a      	cmp	r2, r3
 800692a:	d11c      	bne.n	8006966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006934:	429a      	cmp	r2, r3
 8006936:	d316      	bcc.n	8006966 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006942:	429a      	cmp	r2, r3
 8006944:	d20f      	bcs.n	8006966 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006946:	2200      	movs	r2, #0
 8006948:	2100      	movs	r1, #0
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f001 f88d 	bl	8007a6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006958:	2300      	movs	r3, #0
 800695a:	2200      	movs	r2, #0
 800695c:	2100      	movs	r1, #0
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f004 face 	bl	800af00 <USBD_LL_PrepareReceive>
 8006964:	e01c      	b.n	80069a0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b03      	cmp	r3, #3
 8006970:	d10f      	bne.n	8006992 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d009      	beq.n	8006992 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006992:	2180      	movs	r1, #128	; 0x80
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f004 fa09 	bl	800adac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f001 f8b7 	bl	8007b0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d03a      	beq.n	8006a20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f7ff fe42 	bl	8006634 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069b8:	e032      	b.n	8006a20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069ba:	7afb      	ldrb	r3, [r7, #11]
 80069bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 f97f 	bl	8006cc8 <USBD_CoreFindEP>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ce:	7dfb      	ldrb	r3, [r7, #23]
 80069d0:	2bff      	cmp	r3, #255	; 0xff
 80069d2:	d025      	beq.n	8006a20 <USBD_LL_DataInStage+0x15a>
 80069d4:	7dfb      	ldrb	r3, [r7, #23]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d122      	bne.n	8006a20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b03      	cmp	r3, #3
 80069e4:	d11c      	bne.n	8006a20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80069e6:	7dfa      	ldrb	r2, [r7, #23]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	32ae      	adds	r2, #174	; 0xae
 80069ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f0:	695b      	ldr	r3, [r3, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d014      	beq.n	8006a20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80069f6:	7dfa      	ldrb	r2, [r7, #23]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80069fe:	7dfa      	ldrb	r2, [r7, #23]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	32ae      	adds	r2, #174	; 0xae
 8006a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	7afa      	ldrb	r2, [r7, #11]
 8006a0c:	4611      	mov	r1, r2
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	4798      	blx	r3
 8006a12:	4603      	mov	r3, r0
 8006a14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a16:	7dbb      	ldrb	r3, [r7, #22]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a1c:	7dbb      	ldrb	r3, [r7, #22]
 8006a1e:	e000      	b.n	8006a22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3718      	adds	r7, #24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d014      	beq.n	8006a90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00e      	beq.n	8006a90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	6852      	ldr	r2, [r2, #4]
 8006a7e:	b2d2      	uxtb	r2, r2
 8006a80:	4611      	mov	r1, r2
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a90:	2340      	movs	r3, #64	; 0x40
 8006a92:	2200      	movs	r2, #0
 8006a94:	2100      	movs	r1, #0
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f004 f943 	bl	800ad22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2240      	movs	r2, #64	; 0x40
 8006aa8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006aac:	2340      	movs	r3, #64	; 0x40
 8006aae:	2200      	movs	r2, #0
 8006ab0:	2180      	movs	r1, #128	; 0x80
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f004 f935 	bl	800ad22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2240      	movs	r2, #64	; 0x40
 8006ac2:	621a      	str	r2, [r3, #32]

  return ret;
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ace:	b480      	push	{r7}
 8006ad0:	b083      	sub	sp, #12
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	6078      	str	r0, [r7, #4]
 8006ad6:	460b      	mov	r3, r1
 8006ad8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	370c      	adds	r7, #12
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2204      	movs	r2, #4
 8006b08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d106      	bne.n	8006b3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b082      	sub	sp, #8
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d110      	bne.n	8006b80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7a:	69db      	ldr	r3, [r3, #28]
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b082      	sub	sp, #8
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32ae      	adds	r2, #174	; 0xae
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e01c      	b.n	8006be6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d115      	bne.n	8006be4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	32ae      	adds	r2, #174	; 0xae
 8006bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00b      	beq.n	8006be4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	32ae      	adds	r2, #174	; 0xae
 8006bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	78fa      	ldrb	r2, [r7, #3]
 8006bde:	4611      	mov	r1, r2
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3708      	adds	r7, #8
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b082      	sub	sp, #8
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	32ae      	adds	r2, #174	; 0xae
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e01c      	b.n	8006c4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d115      	bne.n	8006c48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	32ae      	adds	r2, #174	; 0xae
 8006c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00b      	beq.n	8006c48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	32ae      	adds	r2, #174	; 0xae
 8006c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	78fa      	ldrb	r2, [r7, #3]
 8006c42:	4611      	mov	r1, r2
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c48:	2300      	movs	r3, #0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006c70:	2300      	movs	r3, #0
 8006c72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00e      	beq.n	8006ca4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6852      	ldr	r2, [r2, #4]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	4611      	mov	r1, r2
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	4798      	blx	r3
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b083      	sub	sp, #12
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006ce2:	b580      	push	{r7, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	885b      	ldrh	r3, [r3, #2]
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d920      	bls.n	8006d4c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	781b      	ldrb	r3, [r3, #0]
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d12:	e013      	b.n	8006d3c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d14:	f107 030a 	add.w	r3, r7, #10
 8006d18:	4619      	mov	r1, r3
 8006d1a:	6978      	ldr	r0, [r7, #20]
 8006d1c:	f000 f81b 	bl	8006d56 <USBD_GetNextDesc>
 8006d20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	785b      	ldrb	r3, [r3, #1]
 8006d26:	2b05      	cmp	r3, #5
 8006d28:	d108      	bne.n	8006d3c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	789b      	ldrb	r3, [r3, #2]
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d008      	beq.n	8006d4a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	885b      	ldrh	r3, [r3, #2]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	897b      	ldrh	r3, [r7, #10]
 8006d44:	429a      	cmp	r2, r3
 8006d46:	d8e5      	bhi.n	8006d14 <USBD_GetEpDesc+0x32>
 8006d48:	e000      	b.n	8006d4c <USBD_GetEpDesc+0x6a>
          break;
 8006d4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d4c:	693b      	ldr	r3, [r7, #16]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3718      	adds	r7, #24
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b085      	sub	sp, #20
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	881a      	ldrh	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	4413      	add	r3, r2
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4413      	add	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b087      	sub	sp, #28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	3301      	adds	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006dae:	8a3b      	ldrh	r3, [r7, #16]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	b21a      	sxth	r2, r3
 8006db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	b21b      	sxth	r3, r3
 8006dbc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006dbe:	89fb      	ldrh	r3, [r7, #14]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b084      	sub	sp, #16
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006de2:	2b40      	cmp	r3, #64	; 0x40
 8006de4:	d005      	beq.n	8006df2 <USBD_StdDevReq+0x26>
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d857      	bhi.n	8006e9a <USBD_StdDevReq+0xce>
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00f      	beq.n	8006e0e <USBD_StdDevReq+0x42>
 8006dee:	2b20      	cmp	r3, #32
 8006df0:	d153      	bne.n	8006e9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	32ae      	adds	r2, #174	; 0xae
 8006dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
 8006e08:	4603      	mov	r3, r0
 8006e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0c:	e04a      	b.n	8006ea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	785b      	ldrb	r3, [r3, #1]
 8006e12:	2b09      	cmp	r3, #9
 8006e14:	d83b      	bhi.n	8006e8e <USBD_StdDevReq+0xc2>
 8006e16:	a201      	add	r2, pc, #4	; (adr r2, 8006e1c <USBD_StdDevReq+0x50>)
 8006e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1c:	08006e71 	.word	0x08006e71
 8006e20:	08006e85 	.word	0x08006e85
 8006e24:	08006e8f 	.word	0x08006e8f
 8006e28:	08006e7b 	.word	0x08006e7b
 8006e2c:	08006e8f 	.word	0x08006e8f
 8006e30:	08006e4f 	.word	0x08006e4f
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e8f 	.word	0x08006e8f
 8006e3c:	08006e67 	.word	0x08006e67
 8006e40:	08006e59 	.word	0x08006e59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa3c 	bl	80072c4 <USBD_GetDescriptor>
          break;
 8006e4c:	e024      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fba1 	bl	8007598 <USBD_SetAddress>
          break;
 8006e56:	e01f      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fbe0 	bl	8007620 <USBD_SetConfig>
 8006e60:	4603      	mov	r3, r0
 8006e62:	73fb      	strb	r3, [r7, #15]
          break;
 8006e64:	e018      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 fc83 	bl	8007774 <USBD_GetConfig>
          break;
 8006e6e:	e013      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fcb4 	bl	80077e0 <USBD_GetStatus>
          break;
 8006e78:	e00e      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fce3 	bl	8007848 <USBD_SetFeature>
          break;
 8006e82:	e009      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fd07 	bl	800789a <USBD_ClrFeature>
          break;
 8006e8c:	e004      	b.n	8006e98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e8e:	6839      	ldr	r1, [r7, #0]
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fd5e 	bl	8007952 <USBD_CtlError>
          break;
 8006e96:	bf00      	nop
      }
      break;
 8006e98:	e004      	b.n	8006ea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fd58 	bl	8007952 <USBD_CtlError>
      break;
 8006ea2:	bf00      	nop
  }

  return ret;
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3710      	adds	r7, #16
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop

08006eb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ec6:	2b40      	cmp	r3, #64	; 0x40
 8006ec8:	d005      	beq.n	8006ed6 <USBD_StdItfReq+0x26>
 8006eca:	2b40      	cmp	r3, #64	; 0x40
 8006ecc:	d852      	bhi.n	8006f74 <USBD_StdItfReq+0xc4>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <USBD_StdItfReq+0x26>
 8006ed2:	2b20      	cmp	r3, #32
 8006ed4:	d14e      	bne.n	8006f74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d840      	bhi.n	8006f66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	889b      	ldrh	r3, [r3, #4]
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d836      	bhi.n	8006f5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	889b      	ldrh	r3, [r3, #4]
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fed9 	bl	8006cae <USBD_CoreFindIF>
 8006efc:	4603      	mov	r3, r0
 8006efe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f00:	7bbb      	ldrb	r3, [r7, #14]
 8006f02:	2bff      	cmp	r3, #255	; 0xff
 8006f04:	d01d      	beq.n	8006f42 <USBD_StdItfReq+0x92>
 8006f06:	7bbb      	ldrb	r3, [r7, #14]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d11a      	bne.n	8006f42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f0c:	7bba      	ldrb	r2, [r7, #14]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	32ae      	adds	r2, #174	; 0xae
 8006f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00f      	beq.n	8006f3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f1c:	7bba      	ldrb	r2, [r7, #14]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f24:	7bba      	ldrb	r2, [r7, #14]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	32ae      	adds	r2, #174	; 0xae
 8006f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	6839      	ldr	r1, [r7, #0]
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	4798      	blx	r3
 8006f36:	4603      	mov	r3, r0
 8006f38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f3a:	e004      	b.n	8006f46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f40:	e001      	b.n	8006f46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	88db      	ldrh	r3, [r3, #6]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d110      	bne.n	8006f70 <USBD_StdItfReq+0xc0>
 8006f4e:	7bfb      	ldrb	r3, [r7, #15]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10d      	bne.n	8006f70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fdc7 	bl	8007ae8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f5a:	e009      	b.n	8006f70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fcf7 	bl	8007952 <USBD_CtlError>
          break;
 8006f64:	e004      	b.n	8006f70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fcf2 	bl	8007952 <USBD_CtlError>
          break;
 8006f6e:	e000      	b.n	8006f72 <USBD_StdItfReq+0xc2>
          break;
 8006f70:	bf00      	nop
      }
      break;
 8006f72:	e004      	b.n	8006f7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 fceb 	bl	8007952 <USBD_CtlError>
      break;
 8006f7c:	bf00      	nop
  }

  return ret;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	889b      	ldrh	r3, [r3, #4]
 8006f9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fa4:	2b40      	cmp	r3, #64	; 0x40
 8006fa6:	d007      	beq.n	8006fb8 <USBD_StdEPReq+0x30>
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	f200 817f 	bhi.w	80072ac <USBD_StdEPReq+0x324>
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d02a      	beq.n	8007008 <USBD_StdEPReq+0x80>
 8006fb2:	2b20      	cmp	r3, #32
 8006fb4:	f040 817a 	bne.w	80072ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f7ff fe83 	bl	8006cc8 <USBD_CoreFindEP>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fc6:	7b7b      	ldrb	r3, [r7, #13]
 8006fc8:	2bff      	cmp	r3, #255	; 0xff
 8006fca:	f000 8174 	beq.w	80072b6 <USBD_StdEPReq+0x32e>
 8006fce:	7b7b      	ldrb	r3, [r7, #13]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f040 8170 	bne.w	80072b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006fd6:	7b7a      	ldrb	r2, [r7, #13]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006fde:	7b7a      	ldrb	r2, [r7, #13]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	32ae      	adds	r2, #174	; 0xae
 8006fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8163 	beq.w	80072b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ff0:	7b7a      	ldrb	r2, [r7, #13]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	32ae      	adds	r2, #174	; 0xae
 8006ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	6839      	ldr	r1, [r7, #0]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	4798      	blx	r3
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007006:	e156      	b.n	80072b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d008      	beq.n	8007022 <USBD_StdEPReq+0x9a>
 8007010:	2b03      	cmp	r3, #3
 8007012:	f300 8145 	bgt.w	80072a0 <USBD_StdEPReq+0x318>
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 809b 	beq.w	8007152 <USBD_StdEPReq+0x1ca>
 800701c:	2b01      	cmp	r3, #1
 800701e:	d03c      	beq.n	800709a <USBD_StdEPReq+0x112>
 8007020:	e13e      	b.n	80072a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	2b02      	cmp	r3, #2
 800702c:	d002      	beq.n	8007034 <USBD_StdEPReq+0xac>
 800702e:	2b03      	cmp	r3, #3
 8007030:	d016      	beq.n	8007060 <USBD_StdEPReq+0xd8>
 8007032:	e02c      	b.n	800708e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <USBD_StdEPReq+0xce>
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	2b80      	cmp	r3, #128	; 0x80
 800703e:	d00a      	beq.n	8007056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007040:	7bbb      	ldrb	r3, [r7, #14]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f003 feb1 	bl	800adac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800704a:	2180      	movs	r1, #128	; 0x80
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f003 fead 	bl	800adac <USBD_LL_StallEP>
 8007052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007054:	e020      	b.n	8007098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc7a 	bl	8007952 <USBD_CtlError>
              break;
 800705e:	e01b      	b.n	8007098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	885b      	ldrh	r3, [r3, #2]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10e      	bne.n	8007086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00b      	beq.n	8007086 <USBD_StdEPReq+0xfe>
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b80      	cmp	r3, #128	; 0x80
 8007072:	d008      	beq.n	8007086 <USBD_StdEPReq+0xfe>
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	88db      	ldrh	r3, [r3, #6]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800707c:	7bbb      	ldrb	r3, [r7, #14]
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f003 fe93 	bl	800adac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 fd2e 	bl	8007ae8 <USBD_CtlSendStatus>

              break;
 800708c:	e004      	b.n	8007098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fc5e 	bl	8007952 <USBD_CtlError>
              break;
 8007096:	bf00      	nop
          }
          break;
 8007098:	e107      	b.n	80072aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d002      	beq.n	80070ac <USBD_StdEPReq+0x124>
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d016      	beq.n	80070d8 <USBD_StdEPReq+0x150>
 80070aa:	e04b      	b.n	8007144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070ac:	7bbb      	ldrb	r3, [r7, #14]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <USBD_StdEPReq+0x146>
 80070b2:	7bbb      	ldrb	r3, [r7, #14]
 80070b4:	2b80      	cmp	r3, #128	; 0x80
 80070b6:	d00a      	beq.n	80070ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070b8:	7bbb      	ldrb	r3, [r7, #14]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f003 fe75 	bl	800adac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070c2:	2180      	movs	r1, #128	; 0x80
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f003 fe71 	bl	800adac <USBD_LL_StallEP>
 80070ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80070cc:	e040      	b.n	8007150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80070ce:	6839      	ldr	r1, [r7, #0]
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc3e 	bl	8007952 <USBD_CtlError>
              break;
 80070d6:	e03b      	b.n	8007150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	885b      	ldrh	r3, [r3, #2]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d136      	bne.n	800714e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80070ea:	7bbb      	ldrb	r3, [r7, #14]
 80070ec:	4619      	mov	r1, r3
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f003 fe7b 	bl	800adea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fcf7 	bl	8007ae8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fde2 	bl	8006cc8 <USBD_CoreFindEP>
 8007104:	4603      	mov	r3, r0
 8007106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007108:	7b7b      	ldrb	r3, [r7, #13]
 800710a:	2bff      	cmp	r3, #255	; 0xff
 800710c:	d01f      	beq.n	800714e <USBD_StdEPReq+0x1c6>
 800710e:	7b7b      	ldrb	r3, [r7, #13]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11c      	bne.n	800714e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007114:	7b7a      	ldrb	r2, [r7, #13]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800711c:	7b7a      	ldrb	r2, [r7, #13]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	32ae      	adds	r2, #174	; 0xae
 8007122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d010      	beq.n	800714e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800712c:	7b7a      	ldrb	r2, [r7, #13]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	; 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007142:	e004      	b.n	800714e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fc03 	bl	8007952 <USBD_CtlError>
              break;
 800714c:	e000      	b.n	8007150 <USBD_StdEPReq+0x1c8>
              break;
 800714e:	bf00      	nop
          }
          break;
 8007150:	e0ab      	b.n	80072aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b02      	cmp	r3, #2
 800715c:	d002      	beq.n	8007164 <USBD_StdEPReq+0x1dc>
 800715e:	2b03      	cmp	r3, #3
 8007160:	d032      	beq.n	80071c8 <USBD_StdEPReq+0x240>
 8007162:	e097      	b.n	8007294 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007164:	7bbb      	ldrb	r3, [r7, #14]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <USBD_StdEPReq+0x1f2>
 800716a:	7bbb      	ldrb	r3, [r7, #14]
 800716c:	2b80      	cmp	r3, #128	; 0x80
 800716e:	d004      	beq.n	800717a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fbed 	bl	8007952 <USBD_CtlError>
                break;
 8007178:	e091      	b.n	800729e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800717a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717e:	2b00      	cmp	r3, #0
 8007180:	da0b      	bge.n	800719a <USBD_StdEPReq+0x212>
 8007182:	7bbb      	ldrb	r3, [r7, #14]
 8007184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	3310      	adds	r3, #16
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4413      	add	r3, r2
 8007196:	3304      	adds	r3, #4
 8007198:	e00b      	b.n	80071b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800719a:	7bbb      	ldrb	r3, [r7, #14]
 800719c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071a0:	4613      	mov	r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	3304      	adds	r3, #4
 80071b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	2202      	movs	r2, #2
 80071be:	4619      	mov	r1, r3
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc37 	bl	8007a34 <USBD_CtlSendData>
              break;
 80071c6:	e06a      	b.n	800729e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	da11      	bge.n	80071f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	6879      	ldr	r1, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	3324      	adds	r3, #36	; 0x24
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d117      	bne.n	800721a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fbb0 	bl	8007952 <USBD_CtlError>
                  break;
 80071f2:	e054      	b.n	800729e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	440b      	add	r3, r1
 8007206:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800720a:	881b      	ldrh	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d104      	bne.n	800721a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb9d 	bl	8007952 <USBD_CtlError>
                  break;
 8007218:	e041      	b.n	800729e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800721a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800721e:	2b00      	cmp	r3, #0
 8007220:	da0b      	bge.n	800723a <USBD_StdEPReq+0x2b2>
 8007222:	7bbb      	ldrb	r3, [r7, #14]
 8007224:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	3310      	adds	r3, #16
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	4413      	add	r3, r2
 8007236:	3304      	adds	r3, #4
 8007238:	e00b      	b.n	8007252 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007240:	4613      	mov	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	4413      	add	r3, r2
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	4413      	add	r3, r2
 8007250:	3304      	adds	r3, #4
 8007252:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <USBD_StdEPReq+0x2d8>
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b80      	cmp	r3, #128	; 0x80
 800725e:	d103      	bne.n	8007268 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e00e      	b.n	8007286 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f003 fddb 	bl	800ae28 <USBD_LL_IsStallEP>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
 800727e:	e002      	b.n	8007286 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2202      	movs	r2, #2
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fbd1 	bl	8007a34 <USBD_CtlSendData>
              break;
 8007292:	e004      	b.n	800729e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fb5b 	bl	8007952 <USBD_CtlError>
              break;
 800729c:	bf00      	nop
          }
          break;
 800729e:	e004      	b.n	80072aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fb55 	bl	8007952 <USBD_CtlError>
          break;
 80072a8:	bf00      	nop
      }
      break;
 80072aa:	e005      	b.n	80072b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fb4f 	bl	8007952 <USBD_CtlError>
      break;
 80072b4:	e000      	b.n	80072b8 <USBD_StdEPReq+0x330>
      break;
 80072b6:	bf00      	nop
  }

  return ret;
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80072d6:	2300      	movs	r3, #0
 80072d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	885b      	ldrh	r3, [r3, #2]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	2b06      	cmp	r3, #6
 80072e6:	f200 8128 	bhi.w	800753a <USBD_GetDescriptor+0x276>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <USBD_GetDescriptor+0x2c>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	0800730d 	.word	0x0800730d
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007365 	.word	0x08007365
 80072fc:	0800753b 	.word	0x0800753b
 8007300:	0800753b 	.word	0x0800753b
 8007304:	080074db 	.word	0x080074db
 8007308:	08007507 	.word	0x08007507
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	7c12      	ldrb	r2, [r2, #16]
 8007318:	f107 0108 	add.w	r1, r7, #8
 800731c:	4610      	mov	r0, r2
 800731e:	4798      	blx	r3
 8007320:	60f8      	str	r0, [r7, #12]
      break;
 8007322:	e112      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	7c1b      	ldrb	r3, [r3, #16]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10d      	bne.n	8007348 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007334:	f107 0208 	add.w	r2, r7, #8
 8007338:	4610      	mov	r0, r2
 800733a:	4798      	blx	r3
 800733c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3301      	adds	r3, #1
 8007342:	2202      	movs	r2, #2
 8007344:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007346:	e100      	b.n	800754a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007350:	f107 0208 	add.w	r2, r7, #8
 8007354:	4610      	mov	r0, r2
 8007356:	4798      	blx	r3
 8007358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	3301      	adds	r3, #1
 800735e:	2202      	movs	r2, #2
 8007360:	701a      	strb	r2, [r3, #0]
      break;
 8007362:	e0f2      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	885b      	ldrh	r3, [r3, #2]
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b05      	cmp	r3, #5
 800736c:	f200 80ac 	bhi.w	80074c8 <USBD_GetDescriptor+0x204>
 8007370:	a201      	add	r2, pc, #4	; (adr r2, 8007378 <USBD_GetDescriptor+0xb4>)
 8007372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007376:	bf00      	nop
 8007378:	08007391 	.word	0x08007391
 800737c:	080073c5 	.word	0x080073c5
 8007380:	080073f9 	.word	0x080073f9
 8007384:	0800742d 	.word	0x0800742d
 8007388:	08007461 	.word	0x08007461
 800738c:	08007495 	.word	0x08007495
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00b      	beq.n	80073b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	7c12      	ldrb	r2, [r2, #16]
 80073a8:	f107 0108 	add.w	r1, r7, #8
 80073ac:	4610      	mov	r0, r2
 80073ae:	4798      	blx	r3
 80073b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073b2:	e091      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073b4:	6839      	ldr	r1, [r7, #0]
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 facb 	bl	8007952 <USBD_CtlError>
            err++;
 80073bc:	7afb      	ldrb	r3, [r7, #11]
 80073be:	3301      	adds	r3, #1
 80073c0:	72fb      	strb	r3, [r7, #11]
          break;
 80073c2:	e089      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e077      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fab1 	bl	8007952 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e06f      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	68db      	ldr	r3, [r3, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e05d      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa97 	bl	8007952 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e055      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e043      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa7d 	bl	8007952 <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e03b      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e029      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa63 	bl	8007952 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e021      	b.n	80074d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	699b      	ldr	r3, [r3, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	699b      	ldr	r3, [r3, #24]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e00f      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa49 	bl	8007952 <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e007      	b.n	80074d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fa41 	bl	8007952 <USBD_CtlError>
          err++;
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	3301      	adds	r3, #1
 80074d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80074d6:	bf00      	nop
      }
      break;
 80074d8:	e037      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7c1b      	ldrb	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d109      	bne.n	80074f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074ea:	f107 0208 	add.w	r2, r7, #8
 80074ee:	4610      	mov	r0, r2
 80074f0:	4798      	blx	r3
 80074f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074f4:	e029      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fa2a 	bl	8007952 <USBD_CtlError>
        err++;
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	3301      	adds	r3, #1
 8007502:	72fb      	strb	r3, [r7, #11]
      break;
 8007504:	e021      	b.n	800754a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	7c1b      	ldrb	r3, [r3, #16]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10d      	bne.n	800752a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f107 0208 	add.w	r2, r7, #8
 800751a:	4610      	mov	r0, r2
 800751c:	4798      	blx	r3
 800751e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	2207      	movs	r2, #7
 8007526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007528:	e00f      	b.n	800754a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa10 	bl	8007952 <USBD_CtlError>
        err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	e007      	b.n	800754a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800753a:	6839      	ldr	r1, [r7, #0]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f000 fa08 	bl	8007952 <USBD_CtlError>
      err++;
 8007542:	7afb      	ldrb	r3, [r7, #11]
 8007544:	3301      	adds	r3, #1
 8007546:	72fb      	strb	r3, [r7, #11]
      break;
 8007548:	bf00      	nop
  }

  if (err != 0U)
 800754a:	7afb      	ldrb	r3, [r7, #11]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d11e      	bne.n	800758e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	88db      	ldrh	r3, [r3, #6]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d016      	beq.n	8007586 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007558:	893b      	ldrh	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00e      	beq.n	800757c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	88da      	ldrh	r2, [r3, #6]
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	4293      	cmp	r3, r2
 8007566:	bf28      	it	cs
 8007568:	4613      	movcs	r3, r2
 800756a:	b29b      	uxth	r3, r3
 800756c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800756e:	893b      	ldrh	r3, [r7, #8]
 8007570:	461a      	mov	r2, r3
 8007572:	68f9      	ldr	r1, [r7, #12]
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fa5d 	bl	8007a34 <USBD_CtlSendData>
 800757a:	e009      	b.n	8007590 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f9e7 	bl	8007952 <USBD_CtlError>
 8007584:	e004      	b.n	8007590 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 faae 	bl	8007ae8 <USBD_CtlSendStatus>
 800758c:	e000      	b.n	8007590 <USBD_GetDescriptor+0x2cc>
    return;
 800758e:	bf00      	nop
  }
}
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop

08007598 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	889b      	ldrh	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d131      	bne.n	800760e <USBD_SetAddress+0x76>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	88db      	ldrh	r3, [r3, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d12d      	bne.n	800760e <USBD_SetAddress+0x76>
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	885b      	ldrh	r3, [r3, #2]
 80075b6:	2b7f      	cmp	r3, #127	; 0x7f
 80075b8:	d829      	bhi.n	800760e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	885b      	ldrh	r3, [r3, #2]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d104      	bne.n	80075dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80075d2:	6839      	ldr	r1, [r7, #0]
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f000 f9bc 	bl	8007952 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075da:	e01d      	b.n	8007618 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7bfa      	ldrb	r2, [r7, #15]
 80075e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	4619      	mov	r1, r3
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f003 fc49 	bl	800ae80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa7a 	bl	8007ae8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d004      	beq.n	8007604 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2202      	movs	r2, #2
 80075fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	e009      	b.n	8007618 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760c:	e004      	b.n	8007618 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f99e 	bl	8007952 <USBD_CtlError>
  }
}
 8007616:	bf00      	nop
 8007618:	bf00      	nop
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	b2da      	uxtb	r2, r3
 8007634:	4b4e      	ldr	r3, [pc, #312]	; (8007770 <USBD_SetConfig+0x150>)
 8007636:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007638:	4b4d      	ldr	r3, [pc, #308]	; (8007770 <USBD_SetConfig+0x150>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d905      	bls.n	800764c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 f985 	bl	8007952 <USBD_CtlError>
    return USBD_FAIL;
 8007648:	2303      	movs	r3, #3
 800764a:	e08c      	b.n	8007766 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d002      	beq.n	800765e <USBD_SetConfig+0x3e>
 8007658:	2b03      	cmp	r3, #3
 800765a:	d029      	beq.n	80076b0 <USBD_SetConfig+0x90>
 800765c:	e075      	b.n	800774a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800765e:	4b44      	ldr	r3, [pc, #272]	; (8007770 <USBD_SetConfig+0x150>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d020      	beq.n	80076a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007666:	4b42      	ldr	r3, [pc, #264]	; (8007770 <USBD_SetConfig+0x150>)
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007670:	4b3f      	ldr	r3, [pc, #252]	; (8007770 <USBD_SetConfig+0x150>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fe ffe7 	bl	800664a <USBD_SetClassConfig>
 800767c:	4603      	mov	r3, r0
 800767e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007680:	7bfb      	ldrb	r3, [r7, #15]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f962 	bl	8007952 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2202      	movs	r2, #2
 8007692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007696:	e065      	b.n	8007764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fa25 	bl	8007ae8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2203      	movs	r2, #3
 80076a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076a6:	e05d      	b.n	8007764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fa1d 	bl	8007ae8 <USBD_CtlSendStatus>
      break;
 80076ae:	e059      	b.n	8007764 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076b0:	4b2f      	ldr	r3, [pc, #188]	; (8007770 <USBD_SetConfig+0x150>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d112      	bne.n	80076de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2202      	movs	r2, #2
 80076bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076c0:	4b2b      	ldr	r3, [pc, #172]	; (8007770 <USBD_SetConfig+0x150>)
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076ca:	4b29      	ldr	r3, [pc, #164]	; (8007770 <USBD_SetConfig+0x150>)
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7fe ffd6 	bl	8006682 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa06 	bl	8007ae8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076dc:	e042      	b.n	8007764 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <USBD_SetConfig+0x150>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d02a      	beq.n	8007742 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f7fe ffc4 	bl	8006682 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80076fa:	4b1d      	ldr	r3, [pc, #116]	; (8007770 <USBD_SetConfig+0x150>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007704:	4b1a      	ldr	r3, [pc, #104]	; (8007770 <USBD_SetConfig+0x150>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7fe ff9d 	bl	800664a <USBD_SetClassConfig>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00f      	beq.n	800773a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800771a:	6839      	ldr	r1, [r7, #0]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 f918 	bl	8007952 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	b2db      	uxtb	r3, r3
 8007728:	4619      	mov	r1, r3
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7fe ffa9 	bl	8006682 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007738:	e014      	b.n	8007764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9d4 	bl	8007ae8 <USBD_CtlSendStatus>
      break;
 8007740:	e010      	b.n	8007764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f9d0 	bl	8007ae8 <USBD_CtlSendStatus>
      break;
 8007748:	e00c      	b.n	8007764 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f900 	bl	8007952 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <USBD_SetConfig+0x150>)
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	4619      	mov	r1, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fe ff92 	bl	8006682 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800775e:	2303      	movs	r3, #3
 8007760:	73fb      	strb	r3, [r7, #15]
      break;
 8007762:	bf00      	nop
  }

  return ret;
 8007764:	7bfb      	ldrb	r3, [r7, #15]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	200011c8 	.word	0x200011c8

08007774 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88db      	ldrh	r3, [r3, #6]
 8007782:	2b01      	cmp	r3, #1
 8007784:	d004      	beq.n	8007790 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f8e2 	bl	8007952 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800778e:	e023      	b.n	80077d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	dc02      	bgt.n	80077a2 <USBD_GetConfig+0x2e>
 800779c:	2b00      	cmp	r3, #0
 800779e:	dc03      	bgt.n	80077a8 <USBD_GetConfig+0x34>
 80077a0:	e015      	b.n	80077ce <USBD_GetConfig+0x5a>
 80077a2:	2b03      	cmp	r3, #3
 80077a4:	d00b      	beq.n	80077be <USBD_GetConfig+0x4a>
 80077a6:	e012      	b.n	80077ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	3308      	adds	r3, #8
 80077b2:	2201      	movs	r2, #1
 80077b4:	4619      	mov	r1, r3
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f93c 	bl	8007a34 <USBD_CtlSendData>
        break;
 80077bc:	e00c      	b.n	80077d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	3304      	adds	r3, #4
 80077c2:	2201      	movs	r2, #1
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f934 	bl	8007a34 <USBD_CtlSendData>
        break;
 80077cc:	e004      	b.n	80077d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80077ce:	6839      	ldr	r1, [r7, #0]
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f8be 	bl	8007952 <USBD_CtlError>
        break;
 80077d6:	bf00      	nop
}
 80077d8:	bf00      	nop
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d81e      	bhi.n	8007836 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	88db      	ldrh	r3, [r3, #6]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d004      	beq.n	800780a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f8a5 	bl	8007952 <USBD_CtlError>
        break;
 8007808:	e01a      	b.n	8007840 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2201      	movs	r2, #1
 800780e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007816:	2b00      	cmp	r3, #0
 8007818:	d005      	beq.n	8007826 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f043 0202 	orr.w	r2, r3, #2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	330c      	adds	r3, #12
 800782a:	2202      	movs	r2, #2
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f900 	bl	8007a34 <USBD_CtlSendData>
      break;
 8007834:	e004      	b.n	8007840 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 f88a 	bl	8007952 <USBD_CtlError>
      break;
 800783e:	bf00      	nop
  }
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	885b      	ldrh	r3, [r3, #2]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d107      	bne.n	800786a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2201      	movs	r2, #1
 800785e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f940 	bl	8007ae8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007868:	e013      	b.n	8007892 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	885b      	ldrh	r3, [r3, #2]
 800786e:	2b02      	cmp	r3, #2
 8007870:	d10b      	bne.n	800788a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	889b      	ldrh	r3, [r3, #4]
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	b29b      	uxth	r3, r3
 800787a:	b2da      	uxtb	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f930 	bl	8007ae8 <USBD_CtlSendStatus>
}
 8007888:	e003      	b.n	8007892 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f860 	bl	8007952 <USBD_CtlError>
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b082      	sub	sp, #8
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	3b01      	subs	r3, #1
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d80b      	bhi.n	80078ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	885b      	ldrh	r3, [r3, #2]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d10c      	bne.n	80078d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f910 	bl	8007ae8 <USBD_CtlSendStatus>
      }
      break;
 80078c8:	e004      	b.n	80078d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f840 	bl	8007952 <USBD_CtlError>
      break;
 80078d2:	e000      	b.n	80078d6 <USBD_ClrFeature+0x3c>
      break;
 80078d4:	bf00      	nop
  }
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b084      	sub	sp, #16
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	781a      	ldrb	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3301      	adds	r3, #1
 80078f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	781a      	ldrb	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	3301      	adds	r3, #1
 8007906:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f7ff fa41 	bl	8006d90 <SWAPBYTE>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	3301      	adds	r3, #1
 800791a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	3301      	adds	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f7ff fa34 	bl	8006d90 <SWAPBYTE>
 8007928:	4603      	mov	r3, r0
 800792a:	461a      	mov	r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3301      	adds	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fa27 	bl	8006d90 <SWAPBYTE>
 8007942:	4603      	mov	r3, r0
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	80da      	strh	r2, [r3, #6]
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b082      	sub	sp, #8
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
 800795a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800795c:	2180      	movs	r1, #128	; 0x80
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f003 fa24 	bl	800adac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007964:	2100      	movs	r1, #0
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f003 fa20 	bl	800adac <USBD_LL_StallEP>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007980:	2300      	movs	r3, #0
 8007982:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d036      	beq.n	80079f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f000 f836 	bl	8007a00 <USBD_GetLen>
 8007994:	4603      	mov	r3, r0
 8007996:	3301      	adds	r3, #1
 8007998:	b29b      	uxth	r3, r3
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	b29a      	uxth	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	4413      	add	r3, r2
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80079ae:	7dfb      	ldrb	r3, [r7, #23]
 80079b0:	3301      	adds	r3, #1
 80079b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079b4:	7dfb      	ldrb	r3, [r7, #23]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	4413      	add	r3, r2
 80079ba:	2203      	movs	r2, #3
 80079bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
 80079c0:	3301      	adds	r3, #1
 80079c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80079c4:	e013      	b.n	80079ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	4413      	add	r3, r2
 80079cc:	693a      	ldr	r2, [r7, #16]
 80079ce:	7812      	ldrb	r2, [r2, #0]
 80079d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	3301      	adds	r3, #1
 80079d6:	613b      	str	r3, [r7, #16]
    idx++;
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	3301      	adds	r3, #1
 80079dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80079de:	7dfb      	ldrb	r3, [r7, #23]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	4413      	add	r3, r2
 80079e4:	2200      	movs	r2, #0
 80079e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	3301      	adds	r3, #1
 80079ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e7      	bne.n	80079c6 <USBD_GetString+0x52>
 80079f6:	e000      	b.n	80079fa <USBD_GetString+0x86>
    return;
 80079f8:	bf00      	nop
  }
}
 80079fa:	3718      	adds	r7, #24
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a10:	e005      	b.n	8007a1e <USBD_GetLen+0x1e>
  {
    len++;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	3301      	adds	r3, #1
 8007a16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	781b      	ldrb	r3, [r3, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f5      	bne.n	8007a12 <USBD_GetLen+0x12>
  }

  return len;
 8007a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2202      	movs	r2, #2
 8007a44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	f003 fa2f 	bl	800aebe <USBD_LL_Transmit>

  return USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b084      	sub	sp, #16
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f003 fa1e 	bl	800aebe <USBD_LL_Transmit>

  return USBD_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2203      	movs	r2, #3
 8007a9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f003 fa22 	bl	800af00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	2100      	movs	r1, #0
 8007ad8:	68f8      	ldr	r0, [r7, #12]
 8007ada:	f003 fa11 	bl	800af00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2204      	movs	r2, #4
 8007af4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007af8:	2300      	movs	r3, #0
 8007afa:	2200      	movs	r2, #0
 8007afc:	2100      	movs	r1, #0
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f003 f9dd 	bl	800aebe <USBD_LL_Transmit>

  return USBD_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2205      	movs	r2, #5
 8007b1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b1e:	2300      	movs	r3, #0
 8007b20:	2200      	movs	r2, #0
 8007b22:	2100      	movs	r1, #0
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f003 f9eb 	bl	800af00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3708      	adds	r7, #8
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a07      	ldr	r2, [pc, #28]	; (8007b60 <vApplicationGetIdleTaskMemory+0x2c>)
 8007b44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4a06      	ldr	r2, [pc, #24]	; (8007b64 <vApplicationGetIdleTaskMemory+0x30>)
 8007b4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2280      	movs	r2, #128	; 0x80
 8007b50:	601a      	str	r2, [r3, #0]
}
 8007b52:	bf00      	nop
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	200011cc 	.word	0x200011cc
 8007b64:	20001228 	.word	0x20001228

08007b68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	4a07      	ldr	r2, [pc, #28]	; (8007b94 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	4a06      	ldr	r2, [pc, #24]	; (8007b98 <vApplicationGetTimerTaskMemory+0x30>)
 8007b7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b86:	601a      	str	r2, [r3, #0]
}
 8007b88:	bf00      	nop
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	20001428 	.word	0x20001428
 8007b98:	20001484 	.word	0x20001484

08007b9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f103 0208 	add.w	r2, r3, #8
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f103 0208 	add.w	r2, r3, #8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f103 0208 	add.w	r2, r3, #8
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b085      	sub	sp, #20
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
 8007bfe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	601a      	str	r2, [r3, #0]
}
 8007c32:	bf00      	nop
 8007c34:	3714      	adds	r7, #20
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c54:	d103      	bne.n	8007c5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	e00c      	b.n	8007c78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	3308      	adds	r3, #8
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e002      	b.n	8007c6c <vListInsert+0x2e>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d2f6      	bcs.n	8007c66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	1c5a      	adds	r2, r3, #1
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	601a      	str	r2, [r3, #0]
}
 8007ca4:	bf00      	nop
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6892      	ldr	r2, [r2, #8]
 8007cc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	6852      	ldr	r2, [r2, #4]
 8007cd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d103      	bne.n	8007ce4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	1e5a      	subs	r2, r3, #1
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007d2e:	f002 f889 	bl	8009e44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3a:	68f9      	ldr	r1, [r7, #12]
 8007d3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d3e:	fb01 f303 	mul.w	r3, r1, r3
 8007d42:	441a      	add	r2, r3
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	68f9      	ldr	r1, [r7, #12]
 8007d62:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	441a      	add	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	22ff      	movs	r2, #255	; 0xff
 8007d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	22ff      	movs	r2, #255	; 0xff
 8007d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d114      	bne.n	8007dae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01a      	beq.n	8007dc2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	3310      	adds	r3, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f001 f93d 	bl	8009010 <xTaskRemoveFromEventList>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d012      	beq.n	8007dc2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d9c:	4b0c      	ldr	r3, [pc, #48]	; (8007dd0 <xQueueGenericReset+0xcc>)
 8007d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da2:	601a      	str	r2, [r3, #0]
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	e009      	b.n	8007dc2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3310      	adds	r3, #16
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff fef2 	bl	8007b9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3324      	adds	r3, #36	; 0x24
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7ff feed 	bl	8007b9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007dc2:	f002 f86f 	bl	8009ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007dc6:	2301      	movs	r3, #1
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3710      	adds	r7, #16
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08e      	sub	sp, #56	; 0x38
 8007dd8:	af02      	add	r7, sp, #8
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
 8007de0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d10a      	bne.n	8007e1a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e08:	f383 8811 	msr	BASEPRI, r3
 8007e0c:	f3bf 8f6f 	isb	sy
 8007e10:	f3bf 8f4f 	dsb	sy
 8007e14:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e16:	bf00      	nop
 8007e18:	e7fe      	b.n	8007e18 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <xQueueGenericCreateStatic+0x52>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <xQueueGenericCreateStatic+0x56>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueGenericCreateStatic+0x58>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	f383 8811 	msr	BASEPRI, r3
 8007e38:	f3bf 8f6f 	isb	sy
 8007e3c:	f3bf 8f4f 	dsb	sy
 8007e40:	623b      	str	r3, [r7, #32]
}
 8007e42:	bf00      	nop
 8007e44:	e7fe      	b.n	8007e44 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d102      	bne.n	8007e52 <xQueueGenericCreateStatic+0x7e>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <xQueueGenericCreateStatic+0x82>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <xQueueGenericCreateStatic+0x84>
 8007e56:	2300      	movs	r3, #0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10a      	bne.n	8007e72 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	61fb      	str	r3, [r7, #28]
}
 8007e6e:	bf00      	nop
 8007e70:	e7fe      	b.n	8007e70 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e72:	2350      	movs	r3, #80	; 0x50
 8007e74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b50      	cmp	r3, #80	; 0x50
 8007e7a:	d00a      	beq.n	8007e92 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	61bb      	str	r3, [r7, #24]
}
 8007e8e:	bf00      	nop
 8007e90:	e7fe      	b.n	8007e90 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e92:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00d      	beq.n	8007eba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ea6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	68b9      	ldr	r1, [r7, #8]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 f83f 	bl	8007f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3730      	adds	r7, #48	; 0x30
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	; 0x28
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <xQueueGenericCreate+0x2a>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	613b      	str	r3, [r7, #16]
}
 8007eea:	bf00      	nop
 8007eec:	e7fe      	b.n	8007eec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	fb02 f303 	mul.w	r3, r2, r3
 8007ef6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	3350      	adds	r3, #80	; 0x50
 8007efc:	4618      	mov	r0, r3
 8007efe:	f002 f8c3 	bl	800a088 <pvPortMalloc>
 8007f02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	3350      	adds	r3, #80	; 0x50
 8007f12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f1c:	79fa      	ldrb	r2, [r7, #7]
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	4613      	mov	r3, r2
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f805 	bl	8007f38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3720      	adds	r7, #32
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	e002      	b.n	8007f5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f66:	2101      	movs	r1, #1
 8007f68:	69b8      	ldr	r0, [r7, #24]
 8007f6a:	f7ff fecb 	bl	8007d04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	78fa      	ldrb	r2, [r7, #3]
 8007f72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f76:	bf00      	nop
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08e      	sub	sp, #56	; 0x38
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
 8007f8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xQueueGenericSend+0x32>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d103      	bne.n	8007fc0 <xQueueGenericSend+0x40>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <xQueueGenericSend+0x44>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e000      	b.n	8007fc6 <xQueueGenericSend+0x46>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <xQueueGenericSend+0x60>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d103      	bne.n	8007fee <xQueueGenericSend+0x6e>
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d101      	bne.n	8007ff2 <xQueueGenericSend+0x72>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <xQueueGenericSend+0x74>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d10a      	bne.n	800800e <xQueueGenericSend+0x8e>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	623b      	str	r3, [r7, #32]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800800e:	f001 f9bd 	bl	800938c <xTaskGetSchedulerState>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <xQueueGenericSend+0x9e>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d101      	bne.n	8008022 <xQueueGenericSend+0xa2>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <xQueueGenericSend+0xa4>
 8008022:	2300      	movs	r3, #0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d10a      	bne.n	800803e <xQueueGenericSend+0xbe>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	61fb      	str	r3, [r7, #28]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800803e:	f001 ff01 	bl	8009e44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800804a:	429a      	cmp	r2, r3
 800804c:	d302      	bcc.n	8008054 <xQueueGenericSend+0xd4>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d129      	bne.n	80080a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	68b9      	ldr	r1, [r7, #8]
 8008058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800805a:	f000 fa0b 	bl	8008474 <prvCopyDataToQueue>
 800805e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	2b00      	cmp	r3, #0
 8008066:	d010      	beq.n	800808a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806a:	3324      	adds	r3, #36	; 0x24
 800806c:	4618      	mov	r0, r3
 800806e:	f000 ffcf 	bl	8009010 <xTaskRemoveFromEventList>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d013      	beq.n	80080a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008078:	4b3f      	ldr	r3, [pc, #252]	; (8008178 <xQueueGenericSend+0x1f8>)
 800807a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	e00a      	b.n	80080a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d007      	beq.n	80080a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008090:	4b39      	ldr	r3, [pc, #228]	; (8008178 <xQueueGenericSend+0x1f8>)
 8008092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	f3bf 8f4f 	dsb	sy
 800809c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80080a0:	f001 ff00 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e063      	b.n	8008170 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d103      	bne.n	80080b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080ae:	f001 fef9 	bl	8009ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	e05c      	b.n	8008170 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d106      	bne.n	80080ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080bc:	f107 0314 	add.w	r3, r7, #20
 80080c0:	4618      	mov	r0, r3
 80080c2:	f001 f809 	bl	80090d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080ca:	f001 feeb 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080ce:	f000 fd7b 	bl	8008bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080d2:	f001 feb7 	bl	8009e44 <vPortEnterCritical>
 80080d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080dc:	b25b      	sxtb	r3, r3
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d103      	bne.n	80080ec <xQueueGenericSend+0x16c>
 80080e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080f2:	b25b      	sxtb	r3, r3
 80080f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f8:	d103      	bne.n	8008102 <xQueueGenericSend+0x182>
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008102:	f001 fecf 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008106:	1d3a      	adds	r2, r7, #4
 8008108:	f107 0314 	add.w	r3, r7, #20
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f000 fff8 	bl	8009104 <xTaskCheckForTimeOut>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d124      	bne.n	8008164 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800811a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800811c:	f000 faa2 	bl	8008664 <prvIsQueueFull>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d018      	beq.n	8008158 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008128:	3310      	adds	r3, #16
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	4611      	mov	r1, r2
 800812e:	4618      	mov	r0, r3
 8008130:	f000 ff1e 	bl	8008f70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008134:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008136:	f000 fa2d 	bl	8008594 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800813a:	f000 fd53 	bl	8008be4 <xTaskResumeAll>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	f47f af7c 	bne.w	800803e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <xQueueGenericSend+0x1f8>)
 8008148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	f3bf 8f4f 	dsb	sy
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	e772      	b.n	800803e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008158:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800815a:	f000 fa1b 	bl	8008594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800815e:	f000 fd41 	bl	8008be4 <xTaskResumeAll>
 8008162:	e76c      	b.n	800803e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008164:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008166:	f000 fa15 	bl	8008594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800816a:	f000 fd3b 	bl	8008be4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800816e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008170:	4618      	mov	r0, r3
 8008172:	3738      	adds	r7, #56	; 0x38
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	e000ed04 	.word	0xe000ed04

0800817c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800817c:	b580      	push	{r7, lr}
 800817e:	b090      	sub	sp, #64	; 0x40
 8008180:	af00      	add	r7, sp, #0
 8008182:	60f8      	str	r0, [r7, #12]
 8008184:	60b9      	str	r1, [r7, #8]
 8008186:	607a      	str	r2, [r7, #4]
 8008188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800818e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d103      	bne.n	80081b8 <xQueueGenericSendFromISR+0x3c>
 80081b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d101      	bne.n	80081bc <xQueueGenericSendFromISR+0x40>
 80081b8:	2301      	movs	r3, #1
 80081ba:	e000      	b.n	80081be <xQueueGenericSendFromISR+0x42>
 80081bc:	2300      	movs	r3, #0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d10a      	bne.n	80081d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80081d4:	bf00      	nop
 80081d6:	e7fe      	b.n	80081d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d103      	bne.n	80081e6 <xQueueGenericSendFromISR+0x6a>
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d101      	bne.n	80081ea <xQueueGenericSendFromISR+0x6e>
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <xQueueGenericSendFromISR+0x70>
 80081ea:	2300      	movs	r3, #0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	623b      	str	r3, [r7, #32]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008206:	f001 feff 	bl	800a008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800820a:	f3ef 8211 	mrs	r2, BASEPRI
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	61fa      	str	r2, [r7, #28]
 8008220:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008222:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008224:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822e:	429a      	cmp	r2, r3
 8008230:	d302      	bcc.n	8008238 <xQueueGenericSendFromISR+0xbc>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d12f      	bne.n	8008298 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800823e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008246:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008248:	683a      	ldr	r2, [r7, #0]
 800824a:	68b9      	ldr	r1, [r7, #8]
 800824c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800824e:	f000 f911 	bl	8008474 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008252:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825a:	d112      	bne.n	8008282 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d016      	beq.n	8008292 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	3324      	adds	r3, #36	; 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fed1 	bl	8009010 <xTaskRemoveFromEventList>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00e      	beq.n	8008292 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	e007      	b.n	8008292 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008282:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008286:	3301      	adds	r3, #1
 8008288:	b2db      	uxtb	r3, r3
 800828a:	b25a      	sxtb	r2, r3
 800828c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008292:	2301      	movs	r3, #1
 8008294:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008296:	e001      	b.n	800829c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800829c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800829e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80082a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80082a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3740      	adds	r7, #64	; 0x40
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
	...

080082b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08c      	sub	sp, #48	; 0x30
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10a      	bne.n	80082e4 <xQueueReceive+0x30>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	623b      	str	r3, [r7, #32]
}
 80082e0:	bf00      	nop
 80082e2:	e7fe      	b.n	80082e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d103      	bne.n	80082f2 <xQueueReceive+0x3e>
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <xQueueReceive+0x42>
 80082f2:	2301      	movs	r3, #1
 80082f4:	e000      	b.n	80082f8 <xQueueReceive+0x44>
 80082f6:	2300      	movs	r3, #0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d10a      	bne.n	8008312 <xQueueReceive+0x5e>
	__asm volatile
 80082fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008300:	f383 8811 	msr	BASEPRI, r3
 8008304:	f3bf 8f6f 	isb	sy
 8008308:	f3bf 8f4f 	dsb	sy
 800830c:	61fb      	str	r3, [r7, #28]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008312:	f001 f83b 	bl	800938c <xTaskGetSchedulerState>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <xQueueReceive+0x6e>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <xQueueReceive+0x72>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <xQueueReceive+0x74>
 8008326:	2300      	movs	r3, #0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueReceive+0x8e>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	61bb      	str	r3, [r7, #24]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008342:	f001 fd7f 	bl	8009e44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	2b00      	cmp	r3, #0
 8008350:	d01f      	beq.n	8008392 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008352:	68b9      	ldr	r1, [r7, #8]
 8008354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008356:	f000 f8f7 	bl	8008548 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	1e5a      	subs	r2, r3, #1
 800835e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008360:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008364:	691b      	ldr	r3, [r3, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00f      	beq.n	800838a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	3310      	adds	r3, #16
 800836e:	4618      	mov	r0, r3
 8008370:	f000 fe4e 	bl	8009010 <xTaskRemoveFromEventList>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d007      	beq.n	800838a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800837a:	4b3d      	ldr	r3, [pc, #244]	; (8008470 <xQueueReceive+0x1bc>)
 800837c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800838a:	f001 fd8b 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 800838e:	2301      	movs	r3, #1
 8008390:	e069      	b.n	8008466 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008398:	f001 fd84 	bl	8009ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800839c:	2300      	movs	r3, #0
 800839e:	e062      	b.n	8008466 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d106      	bne.n	80083b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80083a6:	f107 0310 	add.w	r3, r7, #16
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fe94 	bl	80090d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80083b0:	2301      	movs	r3, #1
 80083b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80083b4:	f001 fd76 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80083b8:	f000 fc06 	bl	8008bc8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80083bc:	f001 fd42 	bl	8009e44 <vPortEnterCritical>
 80083c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083c6:	b25b      	sxtb	r3, r3
 80083c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083cc:	d103      	bne.n	80083d6 <xQueueReceive+0x122>
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083dc:	b25b      	sxtb	r3, r3
 80083de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083e2:	d103      	bne.n	80083ec <xQueueReceive+0x138>
 80083e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083ec:	f001 fd5a 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80083f0:	1d3a      	adds	r2, r7, #4
 80083f2:	f107 0310 	add.w	r3, r7, #16
 80083f6:	4611      	mov	r1, r2
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fe83 	bl	8009104 <xTaskCheckForTimeOut>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d123      	bne.n	800844c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008406:	f000 f917 	bl	8008638 <prvIsQueueEmpty>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d017      	beq.n	8008440 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008412:	3324      	adds	r3, #36	; 0x24
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	4611      	mov	r1, r2
 8008418:	4618      	mov	r0, r3
 800841a:	f000 fda9 	bl	8008f70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800841e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008420:	f000 f8b8 	bl	8008594 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008424:	f000 fbde 	bl	8008be4 <xTaskResumeAll>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d189      	bne.n	8008342 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800842e:	4b10      	ldr	r3, [pc, #64]	; (8008470 <xQueueReceive+0x1bc>)
 8008430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	e780      	b.n	8008342 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008442:	f000 f8a7 	bl	8008594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008446:	f000 fbcd 	bl	8008be4 <xTaskResumeAll>
 800844a:	e77a      	b.n	8008342 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800844c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800844e:	f000 f8a1 	bl	8008594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008452:	f000 fbc7 	bl	8008be4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008458:	f000 f8ee 	bl	8008638 <prvIsQueueEmpty>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	f43f af6f 	beq.w	8008342 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008464:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008466:	4618      	mov	r0, r3
 8008468:	3730      	adds	r7, #48	; 0x30
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	e000ed04 	.word	0xe000ed04

08008474 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10d      	bne.n	80084ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d14d      	bne.n	8008536 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	4618      	mov	r0, r3
 80084a0:	f000 ff92 	bl	80093c8 <xTaskPriorityDisinherit>
 80084a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	609a      	str	r2, [r3, #8]
 80084ac:	e043      	b.n	8008536 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d119      	bne.n	80084e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6858      	ldr	r0, [r3, #4]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	461a      	mov	r2, r3
 80084be:	68b9      	ldr	r1, [r7, #8]
 80084c0:	f002 ff92 	bl	800b3e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084cc:	441a      	add	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d32b      	bcc.n	8008536 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	605a      	str	r2, [r3, #4]
 80084e6:	e026      	b.n	8008536 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	68d8      	ldr	r0, [r3, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f0:	461a      	mov	r2, r3
 80084f2:	68b9      	ldr	r1, [r7, #8]
 80084f4:	f002 ff78 	bl	800b3e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68da      	ldr	r2, [r3, #12]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	425b      	negs	r3, r3
 8008502:	441a      	add	r2, r3
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d207      	bcs.n	8008524 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	425b      	negs	r3, r3
 800851e:	441a      	add	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2b02      	cmp	r3, #2
 8008528:	d105      	bne.n	8008536 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	3b01      	subs	r3, #1
 8008534:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	1c5a      	adds	r2, r3, #1
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800853e:	697b      	ldr	r3, [r7, #20]
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d018      	beq.n	800858c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	441a      	add	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68da      	ldr	r2, [r3, #12]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	429a      	cmp	r2, r3
 8008572:	d303      	bcc.n	800857c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	68d9      	ldr	r1, [r3, #12]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	461a      	mov	r2, r3
 8008586:	6838      	ldr	r0, [r7, #0]
 8008588:	f002 ff2e 	bl	800b3e8 <memcpy>
	}
}
 800858c:	bf00      	nop
 800858e:	3708      	adds	r7, #8
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}

08008594 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800859c:	f001 fc52 	bl	8009e44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085a8:	e011      	b.n	80085ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d012      	beq.n	80085d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	3324      	adds	r3, #36	; 0x24
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 fd2a 	bl	8009010 <xTaskRemoveFromEventList>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d001      	beq.n	80085c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085c2:	f000 fe01 	bl	80091c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	3b01      	subs	r3, #1
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dce9      	bgt.n	80085aa <prvUnlockQueue+0x16>
 80085d6:	e000      	b.n	80085da <prvUnlockQueue+0x46>
					break;
 80085d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	22ff      	movs	r2, #255	; 0xff
 80085de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085e2:	f001 fc5f 	bl	8009ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085e6:	f001 fc2d 	bl	8009e44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085f2:	e011      	b.n	8008618 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d012      	beq.n	8008622 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	3310      	adds	r3, #16
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fd05 	bl	8009010 <xTaskRemoveFromEventList>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800860c:	f000 fddc 	bl	80091c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	3b01      	subs	r3, #1
 8008614:	b2db      	uxtb	r3, r3
 8008616:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dce9      	bgt.n	80085f4 <prvUnlockQueue+0x60>
 8008620:	e000      	b.n	8008624 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008622:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	22ff      	movs	r2, #255	; 0xff
 8008628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800862c:	f001 fc3a 	bl	8009ea4 <vPortExitCritical>
}
 8008630:	bf00      	nop
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008640:	f001 fc00 	bl	8009e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008648:	2b00      	cmp	r3, #0
 800864a:	d102      	bne.n	8008652 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800864c:	2301      	movs	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e001      	b.n	8008656 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008652:	2300      	movs	r3, #0
 8008654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008656:	f001 fc25 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 800865a:	68fb      	ldr	r3, [r7, #12]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800866c:	f001 fbea 	bl	8009e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008678:	429a      	cmp	r2, r3
 800867a:	d102      	bne.n	8008682 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800867c:	2301      	movs	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	e001      	b.n	8008686 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008686:	f001 fc0d 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 800868a:	68fb      	ldr	r3, [r7, #12]
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
 80086a2:	e014      	b.n	80086ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086a4:	4a0f      	ldr	r2, [pc, #60]	; (80086e4 <vQueueAddToRegistry+0x50>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086b0:	490c      	ldr	r1, [pc, #48]	; (80086e4 <vQueueAddToRegistry+0x50>)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086ba:	4a0a      	ldr	r2, [pc, #40]	; (80086e4 <vQueueAddToRegistry+0x50>)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	00db      	lsls	r3, r3, #3
 80086c0:	4413      	add	r3, r2
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086c6:	e006      	b.n	80086d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b07      	cmp	r3, #7
 80086d2:	d9e7      	bls.n	80086a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086d4:	bf00      	nop
 80086d6:	bf00      	nop
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	20001884 	.word	0x20001884

080086e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086f8:	f001 fba4 	bl	8009e44 <vPortEnterCritical>
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008702:	b25b      	sxtb	r3, r3
 8008704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008708:	d103      	bne.n	8008712 <vQueueWaitForMessageRestricted+0x2a>
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2200      	movs	r2, #0
 800870e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008718:	b25b      	sxtb	r3, r3
 800871a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800871e:	d103      	bne.n	8008728 <vQueueWaitForMessageRestricted+0x40>
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008728:	f001 fbbc 	bl	8009ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d106      	bne.n	8008742 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	3324      	adds	r3, #36	; 0x24
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	68b9      	ldr	r1, [r7, #8]
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fc3b 	bl	8008fb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008742:	6978      	ldr	r0, [r7, #20]
 8008744:	f7ff ff26 	bl	8008594 <prvUnlockQueue>
	}
 8008748:	bf00      	nop
 800874a:	3718      	adds	r7, #24
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	; 0x38
 8008754:	af04      	add	r7, sp, #16
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
 800875c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800875e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	623b      	str	r3, [r7, #32]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800877a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800877c:	2b00      	cmp	r3, #0
 800877e:	d10a      	bne.n	8008796 <xTaskCreateStatic+0x46>
	__asm volatile
 8008780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	61fb      	str	r3, [r7, #28]
}
 8008792:	bf00      	nop
 8008794:	e7fe      	b.n	8008794 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008796:	235c      	movs	r3, #92	; 0x5c
 8008798:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	2b5c      	cmp	r3, #92	; 0x5c
 800879e:	d00a      	beq.n	80087b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	61bb      	str	r3, [r7, #24]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d01e      	beq.n	80087fc <xTaskCreateStatic+0xac>
 80087be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01b      	beq.n	80087fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087d6:	2300      	movs	r3, #0
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087dc:	9302      	str	r3, [sp, #8]
 80087de:	f107 0314 	add.w	r3, r7, #20
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	68b9      	ldr	r1, [r7, #8]
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 f850 	bl	8008894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087f6:	f000 f8dd 	bl	80089b4 <prvAddNewTaskToReadyList>
 80087fa:	e001      	b.n	8008800 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008800:	697b      	ldr	r3, [r7, #20]
	}
 8008802:	4618      	mov	r0, r3
 8008804:	3728      	adds	r7, #40	; 0x28
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800880a:	b580      	push	{r7, lr}
 800880c:	b08c      	sub	sp, #48	; 0x30
 800880e:	af04      	add	r7, sp, #16
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	603b      	str	r3, [r7, #0]
 8008816:	4613      	mov	r3, r2
 8008818:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800881a:	88fb      	ldrh	r3, [r7, #6]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4618      	mov	r0, r3
 8008820:	f001 fc32 	bl	800a088 <pvPortMalloc>
 8008824:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d00e      	beq.n	800884a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800882c:	205c      	movs	r0, #92	; 0x5c
 800882e:	f001 fc2b 	bl	800a088 <pvPortMalloc>
 8008832:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	697a      	ldr	r2, [r7, #20]
 800883e:	631a      	str	r2, [r3, #48]	; 0x30
 8008840:	e005      	b.n	800884e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008842:	6978      	ldr	r0, [r7, #20]
 8008844:	f001 fcec 	bl	800a220 <vPortFree>
 8008848:	e001      	b.n	800884e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d017      	beq.n	8008884 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800885c:	88fa      	ldrh	r2, [r7, #6]
 800885e:	2300      	movs	r3, #0
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68b9      	ldr	r1, [r7, #8]
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 f80e 	bl	8008894 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008878:	69f8      	ldr	r0, [r7, #28]
 800887a:	f000 f89b 	bl	80089b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800887e:	2301      	movs	r3, #1
 8008880:	61bb      	str	r3, [r7, #24]
 8008882:	e002      	b.n	800888a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008884:	f04f 33ff 	mov.w	r3, #4294967295
 8008888:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800888a:	69bb      	ldr	r3, [r7, #24]
	}
 800888c:	4618      	mov	r0, r3
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b088      	sub	sp, #32
 8008898:	af00      	add	r7, sp, #0
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	461a      	mov	r2, r3
 80088ac:	21a5      	movs	r1, #165	; 0xa5
 80088ae:	f002 fda9 	bl	800b404 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088bc:	3b01      	subs	r3, #1
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4413      	add	r3, r2
 80088c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	f023 0307 	bic.w	r3, r3, #7
 80088ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088cc:	69bb      	ldr	r3, [r7, #24]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00a      	beq.n	80088ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80088d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088da:	f383 8811 	msr	BASEPRI, r3
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f3bf 8f4f 	dsb	sy
 80088e6:	617b      	str	r3, [r7, #20]
}
 80088e8:	bf00      	nop
 80088ea:	e7fe      	b.n	80088ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01f      	beq.n	8008932 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]
 80088f6:	e012      	b.n	800891e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	7819      	ldrb	r1, [r3, #0]
 8008900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	4413      	add	r3, r2
 8008906:	3334      	adds	r3, #52	; 0x34
 8008908:	460a      	mov	r2, r1
 800890a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	4413      	add	r3, r2
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d006      	beq.n	8008926 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	3301      	adds	r3, #1
 800891c:	61fb      	str	r3, [r7, #28]
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2b0f      	cmp	r3, #15
 8008922:	d9e9      	bls.n	80088f8 <prvInitialiseNewTask+0x64>
 8008924:	e000      	b.n	8008928 <prvInitialiseNewTask+0x94>
			{
				break;
 8008926:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892a:	2200      	movs	r2, #0
 800892c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008930:	e003      	b.n	800893a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800893a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893c:	2b37      	cmp	r3, #55	; 0x37
 800893e:	d901      	bls.n	8008944 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008940:	2337      	movs	r3, #55	; 0x37
 8008942:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008948:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800894e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008952:	2200      	movs	r2, #0
 8008954:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008958:	3304      	adds	r3, #4
 800895a:	4618      	mov	r0, r3
 800895c:	f7ff f93e 	bl	8007bdc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	3318      	adds	r3, #24
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff f939 	bl	8007bdc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800896e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008972:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008978:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800897e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008982:	2200      	movs	r2, #0
 8008984:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	68f9      	ldr	r1, [r7, #12]
 8008992:	69b8      	ldr	r0, [r7, #24]
 8008994:	f001 f928 	bl	8009be8 <pxPortInitialiseStack>
 8008998:	4602      	mov	r2, r0
 800899a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80089a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089aa:	bf00      	nop
 80089ac:	3720      	adds	r7, #32
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
	...

080089b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089bc:	f001 fa42 	bl	8009e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089c0:	4b2d      	ldr	r3, [pc, #180]	; (8008a78 <prvAddNewTaskToReadyList+0xc4>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	3301      	adds	r3, #1
 80089c6:	4a2c      	ldr	r2, [pc, #176]	; (8008a78 <prvAddNewTaskToReadyList+0xc4>)
 80089c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089ca:	4b2c      	ldr	r3, [pc, #176]	; (8008a7c <prvAddNewTaskToReadyList+0xc8>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d109      	bne.n	80089e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089d2:	4a2a      	ldr	r2, [pc, #168]	; (8008a7c <prvAddNewTaskToReadyList+0xc8>)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089d8:	4b27      	ldr	r3, [pc, #156]	; (8008a78 <prvAddNewTaskToReadyList+0xc4>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d110      	bne.n	8008a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089e0:	f000 fc16 	bl	8009210 <prvInitialiseTaskLists>
 80089e4:	e00d      	b.n	8008a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089e6:	4b26      	ldr	r3, [pc, #152]	; (8008a80 <prvAddNewTaskToReadyList+0xcc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d109      	bne.n	8008a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089ee:	4b23      	ldr	r3, [pc, #140]	; (8008a7c <prvAddNewTaskToReadyList+0xc8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d802      	bhi.n	8008a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089fc:	4a1f      	ldr	r2, [pc, #124]	; (8008a7c <prvAddNewTaskToReadyList+0xc8>)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008a02:	4b20      	ldr	r3, [pc, #128]	; (8008a84 <prvAddNewTaskToReadyList+0xd0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3301      	adds	r3, #1
 8008a08:	4a1e      	ldr	r2, [pc, #120]	; (8008a84 <prvAddNewTaskToReadyList+0xd0>)
 8008a0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a0c:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <prvAddNewTaskToReadyList+0xd0>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a18:	4b1b      	ldr	r3, [pc, #108]	; (8008a88 <prvAddNewTaskToReadyList+0xd4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d903      	bls.n	8008a28 <prvAddNewTaskToReadyList+0x74>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	4a18      	ldr	r2, [pc, #96]	; (8008a88 <prvAddNewTaskToReadyList+0xd4>)
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a2c:	4613      	mov	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4413      	add	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4a15      	ldr	r2, [pc, #84]	; (8008a8c <prvAddNewTaskToReadyList+0xd8>)
 8008a36:	441a      	add	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3304      	adds	r3, #4
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	4610      	mov	r0, r2
 8008a40:	f7ff f8d9 	bl	8007bf6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a44:	f001 fa2e 	bl	8009ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a48:	4b0d      	ldr	r3, [pc, #52]	; (8008a80 <prvAddNewTaskToReadyList+0xcc>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d00e      	beq.n	8008a6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a50:	4b0a      	ldr	r3, [pc, #40]	; (8008a7c <prvAddNewTaskToReadyList+0xc8>)
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d207      	bcs.n	8008a6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a5e:	4b0c      	ldr	r3, [pc, #48]	; (8008a90 <prvAddNewTaskToReadyList+0xdc>)
 8008a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a6e:	bf00      	nop
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20001d98 	.word	0x20001d98
 8008a7c:	200018c4 	.word	0x200018c4
 8008a80:	20001da4 	.word	0x20001da4
 8008a84:	20001db4 	.word	0x20001db4
 8008a88:	20001da0 	.word	0x20001da0
 8008a8c:	200018c8 	.word	0x200018c8
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d017      	beq.n	8008ad6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008aa6:	4b13      	ldr	r3, [pc, #76]	; (8008af4 <vTaskDelay+0x60>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00a      	beq.n	8008ac4 <vTaskDelay+0x30>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	60bb      	str	r3, [r7, #8]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ac4:	f000 f880 	bl	8008bc8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ac8:	2100      	movs	r1, #0
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 fcea 	bl	80094a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ad0:	f000 f888 	bl	8008be4 <xTaskResumeAll>
 8008ad4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d107      	bne.n	8008aec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008adc:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <vTaskDelay+0x64>)
 8008ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae2:	601a      	str	r2, [r3, #0]
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aec:	bf00      	nop
 8008aee:	3710      	adds	r7, #16
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	20001dc0 	.word	0x20001dc0
 8008af8:	e000ed04 	.word	0xe000ed04

08008afc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b08a      	sub	sp, #40	; 0x28
 8008b00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b02:	2300      	movs	r3, #0
 8008b04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b06:	2300      	movs	r3, #0
 8008b08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b0a:	463a      	mov	r2, r7
 8008b0c:	1d39      	adds	r1, r7, #4
 8008b0e:	f107 0308 	add.w	r3, r7, #8
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7ff f80e 	bl	8007b34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	9202      	str	r2, [sp, #8]
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	2300      	movs	r3, #0
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	460a      	mov	r2, r1
 8008b2a:	4921      	ldr	r1, [pc, #132]	; (8008bb0 <vTaskStartScheduler+0xb4>)
 8008b2c:	4821      	ldr	r0, [pc, #132]	; (8008bb4 <vTaskStartScheduler+0xb8>)
 8008b2e:	f7ff fe0f 	bl	8008750 <xTaskCreateStatic>
 8008b32:	4603      	mov	r3, r0
 8008b34:	4a20      	ldr	r2, [pc, #128]	; (8008bb8 <vTaskStartScheduler+0xbc>)
 8008b36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b38:	4b1f      	ldr	r3, [pc, #124]	; (8008bb8 <vTaskStartScheduler+0xbc>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d002      	beq.n	8008b46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b40:	2301      	movs	r3, #1
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e001      	b.n	8008b4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b46:	2300      	movs	r3, #0
 8008b48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d102      	bne.n	8008b56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b50:	f000 fcfc 	bl	800954c <xTimerCreateTimerTask>
 8008b54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d116      	bne.n	8008b8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	613b      	str	r3, [r7, #16]
}
 8008b6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b70:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <vTaskStartScheduler+0xc0>)
 8008b72:	f04f 32ff 	mov.w	r2, #4294967295
 8008b76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b78:	4b11      	ldr	r3, [pc, #68]	; (8008bc0 <vTaskStartScheduler+0xc4>)
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b7e:	4b11      	ldr	r3, [pc, #68]	; (8008bc4 <vTaskStartScheduler+0xc8>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b84:	f001 f8bc 	bl	8009d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b88:	e00e      	b.n	8008ba8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b90:	d10a      	bne.n	8008ba8 <vTaskStartScheduler+0xac>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	60fb      	str	r3, [r7, #12]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <vTaskStartScheduler+0xaa>
}
 8008ba8:	bf00      	nop
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	0800b43c 	.word	0x0800b43c
 8008bb4:	080091e1 	.word	0x080091e1
 8008bb8:	20001dbc 	.word	0x20001dbc
 8008bbc:	20001db8 	.word	0x20001db8
 8008bc0:	20001da4 	.word	0x20001da4
 8008bc4:	20001d9c 	.word	0x20001d9c

08008bc8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008bcc:	4b04      	ldr	r3, [pc, #16]	; (8008be0 <vTaskSuspendAll+0x18>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	4a03      	ldr	r2, [pc, #12]	; (8008be0 <vTaskSuspendAll+0x18>)
 8008bd4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008bd6:	bf00      	nop
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	20001dc0 	.word	0x20001dc0

08008be4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bea:	2300      	movs	r3, #0
 8008bec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008bf2:	4b42      	ldr	r3, [pc, #264]	; (8008cfc <xTaskResumeAll+0x118>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d10a      	bne.n	8008c10 <xTaskResumeAll+0x2c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	603b      	str	r3, [r7, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c10:	f001 f918 	bl	8009e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c14:	4b39      	ldr	r3, [pc, #228]	; (8008cfc <xTaskResumeAll+0x118>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	4a38      	ldr	r2, [pc, #224]	; (8008cfc <xTaskResumeAll+0x118>)
 8008c1c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c1e:	4b37      	ldr	r3, [pc, #220]	; (8008cfc <xTaskResumeAll+0x118>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d162      	bne.n	8008cec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c26:	4b36      	ldr	r3, [pc, #216]	; (8008d00 <xTaskResumeAll+0x11c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d05e      	beq.n	8008cec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c2e:	e02f      	b.n	8008c90 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c30:	4b34      	ldr	r3, [pc, #208]	; (8008d04 <xTaskResumeAll+0x120>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	3318      	adds	r3, #24
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff f837 	bl	8007cb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff f832 	bl	8007cb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c50:	4b2d      	ldr	r3, [pc, #180]	; (8008d08 <xTaskResumeAll+0x124>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d903      	bls.n	8008c60 <xTaskResumeAll+0x7c>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	4a2a      	ldr	r2, [pc, #168]	; (8008d08 <xTaskResumeAll+0x124>)
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c64:	4613      	mov	r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4a27      	ldr	r2, [pc, #156]	; (8008d0c <xTaskResumeAll+0x128>)
 8008c6e:	441a      	add	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3304      	adds	r3, #4
 8008c74:	4619      	mov	r1, r3
 8008c76:	4610      	mov	r0, r2
 8008c78:	f7fe ffbd 	bl	8007bf6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c80:	4b23      	ldr	r3, [pc, #140]	; (8008d10 <xTaskResumeAll+0x12c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d302      	bcc.n	8008c90 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c8a:	4b22      	ldr	r3, [pc, #136]	; (8008d14 <xTaskResumeAll+0x130>)
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c90:	4b1c      	ldr	r3, [pc, #112]	; (8008d04 <xTaskResumeAll+0x120>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1cb      	bne.n	8008c30 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d001      	beq.n	8008ca2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c9e:	f000 fb55 	bl	800934c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ca2:	4b1d      	ldr	r3, [pc, #116]	; (8008d18 <xTaskResumeAll+0x134>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d010      	beq.n	8008cd0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008cae:	f000 f847 	bl	8008d40 <xTaskIncrementTick>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d002      	beq.n	8008cbe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008cb8:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <xTaskResumeAll+0x130>)
 8008cba:	2201      	movs	r2, #1
 8008cbc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f1      	bne.n	8008cae <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008cca:	4b13      	ldr	r3, [pc, #76]	; (8008d18 <xTaskResumeAll+0x134>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008cd0:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <xTaskResumeAll+0x130>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d009      	beq.n	8008cec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	; (8008d1c <xTaskResumeAll+0x138>)
 8008cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce2:	601a      	str	r2, [r3, #0]
 8008ce4:	f3bf 8f4f 	dsb	sy
 8008ce8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008cec:	f001 f8da 	bl	8009ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	20001dc0 	.word	0x20001dc0
 8008d00:	20001d98 	.word	0x20001d98
 8008d04:	20001d58 	.word	0x20001d58
 8008d08:	20001da0 	.word	0x20001da0
 8008d0c:	200018c8 	.word	0x200018c8
 8008d10:	200018c4 	.word	0x200018c4
 8008d14:	20001dac 	.word	0x20001dac
 8008d18:	20001da8 	.word	0x20001da8
 8008d1c:	e000ed04 	.word	0xe000ed04

08008d20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d26:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <xTaskGetTickCount+0x1c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d2c:	687b      	ldr	r3, [r7, #4]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	20001d9c 	.word	0x20001d9c

08008d40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d4a:	4b4f      	ldr	r3, [pc, #316]	; (8008e88 <xTaskIncrementTick+0x148>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f040 808f 	bne.w	8008e72 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d54:	4b4d      	ldr	r3, [pc, #308]	; (8008e8c <xTaskIncrementTick+0x14c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d5c:	4a4b      	ldr	r2, [pc, #300]	; (8008e8c <xTaskIncrementTick+0x14c>)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d120      	bne.n	8008daa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d68:	4b49      	ldr	r3, [pc, #292]	; (8008e90 <xTaskIncrementTick+0x150>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00a      	beq.n	8008d88 <xTaskIncrementTick+0x48>
	__asm volatile
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	f383 8811 	msr	BASEPRI, r3
 8008d7a:	f3bf 8f6f 	isb	sy
 8008d7e:	f3bf 8f4f 	dsb	sy
 8008d82:	603b      	str	r3, [r7, #0]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <xTaskIncrementTick+0x46>
 8008d88:	4b41      	ldr	r3, [pc, #260]	; (8008e90 <xTaskIncrementTick+0x150>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	60fb      	str	r3, [r7, #12]
 8008d8e:	4b41      	ldr	r3, [pc, #260]	; (8008e94 <xTaskIncrementTick+0x154>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a3f      	ldr	r2, [pc, #252]	; (8008e90 <xTaskIncrementTick+0x150>)
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	4a3f      	ldr	r2, [pc, #252]	; (8008e94 <xTaskIncrementTick+0x154>)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	4b3e      	ldr	r3, [pc, #248]	; (8008e98 <xTaskIncrementTick+0x158>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	4a3d      	ldr	r2, [pc, #244]	; (8008e98 <xTaskIncrementTick+0x158>)
 8008da4:	6013      	str	r3, [r2, #0]
 8008da6:	f000 fad1 	bl	800934c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008daa:	4b3c      	ldr	r3, [pc, #240]	; (8008e9c <xTaskIncrementTick+0x15c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d349      	bcc.n	8008e48 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008db4:	4b36      	ldr	r3, [pc, #216]	; (8008e90 <xTaskIncrementTick+0x150>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dbe:	4b37      	ldr	r3, [pc, #220]	; (8008e9c <xTaskIncrementTick+0x15c>)
 8008dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc4:	601a      	str	r2, [r3, #0]
					break;
 8008dc6:	e03f      	b.n	8008e48 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc8:	4b31      	ldr	r3, [pc, #196]	; (8008e90 <xTaskIncrementTick+0x150>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dd8:	693a      	ldr	r2, [r7, #16]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d203      	bcs.n	8008de8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008de0:	4a2e      	ldr	r2, [pc, #184]	; (8008e9c <xTaskIncrementTick+0x15c>)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008de6:	e02f      	b.n	8008e48 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	3304      	adds	r3, #4
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe ff5f 	bl	8007cb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d004      	beq.n	8008e04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	3318      	adds	r3, #24
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe ff56 	bl	8007cb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e08:	4b25      	ldr	r3, [pc, #148]	; (8008ea0 <xTaskIncrementTick+0x160>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d903      	bls.n	8008e18 <xTaskIncrementTick+0xd8>
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	4a22      	ldr	r2, [pc, #136]	; (8008ea0 <xTaskIncrementTick+0x160>)
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4a1f      	ldr	r2, [pc, #124]	; (8008ea4 <xTaskIncrementTick+0x164>)
 8008e26:	441a      	add	r2, r3
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7fe fee1 	bl	8007bf6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e38:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <xTaskIncrementTick+0x168>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d3b8      	bcc.n	8008db4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008e42:	2301      	movs	r3, #1
 8008e44:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e46:	e7b5      	b.n	8008db4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e48:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <xTaskIncrementTick+0x168>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4e:	4915      	ldr	r1, [pc, #84]	; (8008ea4 <xTaskIncrementTick+0x164>)
 8008e50:	4613      	mov	r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4413      	add	r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	440b      	add	r3, r1
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d901      	bls.n	8008e64 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008e60:	2301      	movs	r3, #1
 8008e62:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e64:	4b11      	ldr	r3, [pc, #68]	; (8008eac <xTaskIncrementTick+0x16c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d007      	beq.n	8008e7c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	617b      	str	r3, [r7, #20]
 8008e70:	e004      	b.n	8008e7c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e72:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <xTaskIncrementTick+0x170>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3301      	adds	r3, #1
 8008e78:	4a0d      	ldr	r2, [pc, #52]	; (8008eb0 <xTaskIncrementTick+0x170>)
 8008e7a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e7c:	697b      	ldr	r3, [r7, #20]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3718      	adds	r7, #24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20001dc0 	.word	0x20001dc0
 8008e8c:	20001d9c 	.word	0x20001d9c
 8008e90:	20001d50 	.word	0x20001d50
 8008e94:	20001d54 	.word	0x20001d54
 8008e98:	20001db0 	.word	0x20001db0
 8008e9c:	20001db8 	.word	0x20001db8
 8008ea0:	20001da0 	.word	0x20001da0
 8008ea4:	200018c8 	.word	0x200018c8
 8008ea8:	200018c4 	.word	0x200018c4
 8008eac:	20001dac 	.word	0x20001dac
 8008eb0:	20001da8 	.word	0x20001da8

08008eb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008eba:	4b28      	ldr	r3, [pc, #160]	; (8008f5c <vTaskSwitchContext+0xa8>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ec2:	4b27      	ldr	r3, [pc, #156]	; (8008f60 <vTaskSwitchContext+0xac>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ec8:	e041      	b.n	8008f4e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008eca:	4b25      	ldr	r3, [pc, #148]	; (8008f60 <vTaskSwitchContext+0xac>)
 8008ecc:	2200      	movs	r2, #0
 8008ece:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed0:	4b24      	ldr	r3, [pc, #144]	; (8008f64 <vTaskSwitchContext+0xb0>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	60fb      	str	r3, [r7, #12]
 8008ed6:	e010      	b.n	8008efa <vTaskSwitchContext+0x46>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10a      	bne.n	8008ef4 <vTaskSwitchContext+0x40>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	607b      	str	r3, [r7, #4]
}
 8008ef0:	bf00      	nop
 8008ef2:	e7fe      	b.n	8008ef2 <vTaskSwitchContext+0x3e>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	491b      	ldr	r1, [pc, #108]	; (8008f68 <vTaskSwitchContext+0xb4>)
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0e4      	beq.n	8008ed8 <vTaskSwitchContext+0x24>
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	4a13      	ldr	r2, [pc, #76]	; (8008f68 <vTaskSwitchContext+0xb4>)
 8008f1a:	4413      	add	r3, r2
 8008f1c:	60bb      	str	r3, [r7, #8]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	685a      	ldr	r2, [r3, #4]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	605a      	str	r2, [r3, #4]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d104      	bne.n	8008f3e <vTaskSwitchContext+0x8a>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	605a      	str	r2, [r3, #4]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	4a09      	ldr	r2, [pc, #36]	; (8008f6c <vTaskSwitchContext+0xb8>)
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	4a06      	ldr	r2, [pc, #24]	; (8008f64 <vTaskSwitchContext+0xb0>)
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6013      	str	r3, [r2, #0]
}
 8008f4e:	bf00      	nop
 8008f50:	3714      	adds	r7, #20
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	20001dc0 	.word	0x20001dc0
 8008f60:	20001dac 	.word	0x20001dac
 8008f64:	20001da0 	.word	0x20001da0
 8008f68:	200018c8 	.word	0x200018c8
 8008f6c:	200018c4 	.word	0x200018c4

08008f70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	60fb      	str	r3, [r7, #12]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f96:	4b07      	ldr	r3, [pc, #28]	; (8008fb4 <vTaskPlaceOnEventList+0x44>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3318      	adds	r3, #24
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7fe fe4d 	bl	8007c3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fa4:	2101      	movs	r1, #1
 8008fa6:	6838      	ldr	r0, [r7, #0]
 8008fa8:	f000 fa7c 	bl	80094a4 <prvAddCurrentTaskToDelayedList>
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	200018c4 	.word	0x200018c4

08008fb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	617b      	str	r3, [r7, #20]
}
 8008fdc:	bf00      	nop
 8008fde:	e7fe      	b.n	8008fde <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	; (800900c <vTaskPlaceOnEventListRestricted+0x54>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3318      	adds	r3, #24
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f7fe fe04 	bl	8007bf6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d002      	beq.n	8008ffa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ffa:	6879      	ldr	r1, [r7, #4]
 8008ffc:	68b8      	ldr	r0, [r7, #8]
 8008ffe:	f000 fa51 	bl	80094a4 <prvAddCurrentTaskToDelayedList>
	}
 8009002:	bf00      	nop
 8009004:	3718      	adds	r7, #24
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	200018c4 	.word	0x200018c4

08009010 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10a      	bne.n	800903c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	60fb      	str	r3, [r7, #12]
}
 8009038:	bf00      	nop
 800903a:	e7fe      	b.n	800903a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	3318      	adds	r3, #24
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe fe35 	bl	8007cb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009046:	4b1e      	ldr	r3, [pc, #120]	; (80090c0 <xTaskRemoveFromEventList+0xb0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d11d      	bne.n	800908a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	3304      	adds	r3, #4
 8009052:	4618      	mov	r0, r3
 8009054:	f7fe fe2c 	bl	8007cb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905c:	4b19      	ldr	r3, [pc, #100]	; (80090c4 <xTaskRemoveFromEventList+0xb4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d903      	bls.n	800906c <xTaskRemoveFromEventList+0x5c>
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	4a16      	ldr	r2, [pc, #88]	; (80090c4 <xTaskRemoveFromEventList+0xb4>)
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4a13      	ldr	r2, [pc, #76]	; (80090c8 <xTaskRemoveFromEventList+0xb8>)
 800907a:	441a      	add	r2, r3
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	3304      	adds	r3, #4
 8009080:	4619      	mov	r1, r3
 8009082:	4610      	mov	r0, r2
 8009084:	f7fe fdb7 	bl	8007bf6 <vListInsertEnd>
 8009088:	e005      	b.n	8009096 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	3318      	adds	r3, #24
 800908e:	4619      	mov	r1, r3
 8009090:	480e      	ldr	r0, [pc, #56]	; (80090cc <xTaskRemoveFromEventList+0xbc>)
 8009092:	f7fe fdb0 	bl	8007bf6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800909a:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <xTaskRemoveFromEventList+0xc0>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	429a      	cmp	r2, r3
 80090a2:	d905      	bls.n	80090b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090a4:	2301      	movs	r3, #1
 80090a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090a8:	4b0a      	ldr	r3, [pc, #40]	; (80090d4 <xTaskRemoveFromEventList+0xc4>)
 80090aa:	2201      	movs	r2, #1
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	e001      	b.n	80090b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80090b0:	2300      	movs	r3, #0
 80090b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090b4:	697b      	ldr	r3, [r7, #20]
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	20001dc0 	.word	0x20001dc0
 80090c4:	20001da0 	.word	0x20001da0
 80090c8:	200018c8 	.word	0x200018c8
 80090cc:	20001d58 	.word	0x20001d58
 80090d0:	200018c4 	.word	0x200018c4
 80090d4:	20001dac 	.word	0x20001dac

080090d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090e0:	4b06      	ldr	r3, [pc, #24]	; (80090fc <vTaskInternalSetTimeOutState+0x24>)
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80090e8:	4b05      	ldr	r3, [pc, #20]	; (8009100 <vTaskInternalSetTimeOutState+0x28>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	605a      	str	r2, [r3, #4]
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr
 80090fc:	20001db0 	.word	0x20001db0
 8009100:	20001d9c 	.word	0x20001d9c

08009104 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b088      	sub	sp, #32
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	613b      	str	r3, [r7, #16]
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	f383 8811 	msr	BASEPRI, r3
 8009138:	f3bf 8f6f 	isb	sy
 800913c:	f3bf 8f4f 	dsb	sy
 8009140:	60fb      	str	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009146:	f000 fe7d 	bl	8009e44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800914a:	4b1d      	ldr	r3, [pc, #116]	; (80091c0 <xTaskCheckForTimeOut+0xbc>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	1ad3      	subs	r3, r2, r3
 8009158:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009162:	d102      	bne.n	800916a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009164:	2300      	movs	r3, #0
 8009166:	61fb      	str	r3, [r7, #28]
 8009168:	e023      	b.n	80091b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	4b15      	ldr	r3, [pc, #84]	; (80091c4 <xTaskCheckForTimeOut+0xc0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d007      	beq.n	8009186 <xTaskCheckForTimeOut+0x82>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	429a      	cmp	r2, r3
 800917e:	d302      	bcc.n	8009186 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009180:	2301      	movs	r3, #1
 8009182:	61fb      	str	r3, [r7, #28]
 8009184:	e015      	b.n	80091b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	429a      	cmp	r2, r3
 800918e:	d20b      	bcs.n	80091a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	1ad2      	subs	r2, r2, r3
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff ff9b 	bl	80090d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091a2:	2300      	movs	r3, #0
 80091a4:	61fb      	str	r3, [r7, #28]
 80091a6:	e004      	b.n	80091b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	2200      	movs	r2, #0
 80091ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091ae:	2301      	movs	r3, #1
 80091b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091b2:	f000 fe77 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 80091b6:	69fb      	ldr	r3, [r7, #28]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3720      	adds	r7, #32
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20001d9c 	.word	0x20001d9c
 80091c4:	20001db0 	.word	0x20001db0

080091c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091cc:	4b03      	ldr	r3, [pc, #12]	; (80091dc <vTaskMissedYield+0x14>)
 80091ce:	2201      	movs	r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
}
 80091d2:	bf00      	nop
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	20001dac 	.word	0x20001dac

080091e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80091e8:	f000 f852 	bl	8009290 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80091ec:	4b06      	ldr	r3, [pc, #24]	; (8009208 <prvIdleTask+0x28>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d9f9      	bls.n	80091e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80091f4:	4b05      	ldr	r3, [pc, #20]	; (800920c <prvIdleTask+0x2c>)
 80091f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009204:	e7f0      	b.n	80091e8 <prvIdleTask+0x8>
 8009206:	bf00      	nop
 8009208:	200018c8 	.word	0x200018c8
 800920c:	e000ed04 	.word	0xe000ed04

08009210 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009216:	2300      	movs	r3, #0
 8009218:	607b      	str	r3, [r7, #4]
 800921a:	e00c      	b.n	8009236 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	4a12      	ldr	r2, [pc, #72]	; (8009270 <prvInitialiseTaskLists+0x60>)
 8009228:	4413      	add	r3, r2
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe fcb6 	bl	8007b9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	3301      	adds	r3, #1
 8009234:	607b      	str	r3, [r7, #4]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2b37      	cmp	r3, #55	; 0x37
 800923a:	d9ef      	bls.n	800921c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800923c:	480d      	ldr	r0, [pc, #52]	; (8009274 <prvInitialiseTaskLists+0x64>)
 800923e:	f7fe fcad 	bl	8007b9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009242:	480d      	ldr	r0, [pc, #52]	; (8009278 <prvInitialiseTaskLists+0x68>)
 8009244:	f7fe fcaa 	bl	8007b9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009248:	480c      	ldr	r0, [pc, #48]	; (800927c <prvInitialiseTaskLists+0x6c>)
 800924a:	f7fe fca7 	bl	8007b9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800924e:	480c      	ldr	r0, [pc, #48]	; (8009280 <prvInitialiseTaskLists+0x70>)
 8009250:	f7fe fca4 	bl	8007b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009254:	480b      	ldr	r0, [pc, #44]	; (8009284 <prvInitialiseTaskLists+0x74>)
 8009256:	f7fe fca1 	bl	8007b9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800925a:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <prvInitialiseTaskLists+0x78>)
 800925c:	4a05      	ldr	r2, [pc, #20]	; (8009274 <prvInitialiseTaskLists+0x64>)
 800925e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009260:	4b0a      	ldr	r3, [pc, #40]	; (800928c <prvInitialiseTaskLists+0x7c>)
 8009262:	4a05      	ldr	r2, [pc, #20]	; (8009278 <prvInitialiseTaskLists+0x68>)
 8009264:	601a      	str	r2, [r3, #0]
}
 8009266:	bf00      	nop
 8009268:	3708      	adds	r7, #8
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	200018c8 	.word	0x200018c8
 8009274:	20001d28 	.word	0x20001d28
 8009278:	20001d3c 	.word	0x20001d3c
 800927c:	20001d58 	.word	0x20001d58
 8009280:	20001d6c 	.word	0x20001d6c
 8009284:	20001d84 	.word	0x20001d84
 8009288:	20001d50 	.word	0x20001d50
 800928c:	20001d54 	.word	0x20001d54

08009290 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009296:	e019      	b.n	80092cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009298:	f000 fdd4 	bl	8009e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800929c:	4b10      	ldr	r3, [pc, #64]	; (80092e0 <prvCheckTasksWaitingTermination+0x50>)
 800929e:	68db      	ldr	r3, [r3, #12]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3304      	adds	r3, #4
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe fd01 	bl	8007cb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092ae:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <prvCheckTasksWaitingTermination+0x54>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3b01      	subs	r3, #1
 80092b4:	4a0b      	ldr	r2, [pc, #44]	; (80092e4 <prvCheckTasksWaitingTermination+0x54>)
 80092b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092b8:	4b0b      	ldr	r3, [pc, #44]	; (80092e8 <prvCheckTasksWaitingTermination+0x58>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3b01      	subs	r3, #1
 80092be:	4a0a      	ldr	r2, [pc, #40]	; (80092e8 <prvCheckTasksWaitingTermination+0x58>)
 80092c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092c2:	f000 fdef 	bl	8009ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f810 	bl	80092ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092cc:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <prvCheckTasksWaitingTermination+0x58>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e1      	bne.n	8009298 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092d4:	bf00      	nop
 80092d6:	bf00      	nop
 80092d8:	3708      	adds	r7, #8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20001d6c 	.word	0x20001d6c
 80092e4:	20001d98 	.word	0x20001d98
 80092e8:	20001d80 	.word	0x20001d80

080092ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d108      	bne.n	8009310 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009302:	4618      	mov	r0, r3
 8009304:	f000 ff8c 	bl	800a220 <vPortFree>
				vPortFree( pxTCB );
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 ff89 	bl	800a220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800930e:	e018      	b.n	8009342 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009316:	2b01      	cmp	r3, #1
 8009318:	d103      	bne.n	8009322 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 ff80 	bl	800a220 <vPortFree>
	}
 8009320:	e00f      	b.n	8009342 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009328:	2b02      	cmp	r3, #2
 800932a:	d00a      	beq.n	8009342 <prvDeleteTCB+0x56>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <prvDeleteTCB+0x54>
	}
 8009342:	bf00      	nop
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
	...

0800934c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <prvResetNextTaskUnblockTime+0x38>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d104      	bne.n	8009366 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800935c:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <prvResetNextTaskUnblockTime+0x3c>)
 800935e:	f04f 32ff 	mov.w	r2, #4294967295
 8009362:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009364:	e008      	b.n	8009378 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009366:	4b07      	ldr	r3, [pc, #28]	; (8009384 <prvResetNextTaskUnblockTime+0x38>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4a04      	ldr	r2, [pc, #16]	; (8009388 <prvResetNextTaskUnblockTime+0x3c>)
 8009376:	6013      	str	r3, [r2, #0]
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr
 8009384:	20001d50 	.word	0x20001d50
 8009388:	20001db8 	.word	0x20001db8

0800938c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009392:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <xTaskGetSchedulerState+0x34>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d102      	bne.n	80093a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800939a:	2301      	movs	r3, #1
 800939c:	607b      	str	r3, [r7, #4]
 800939e:	e008      	b.n	80093b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a0:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <xTaskGetSchedulerState+0x38>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d102      	bne.n	80093ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093a8:	2302      	movs	r3, #2
 80093aa:	607b      	str	r3, [r7, #4]
 80093ac:	e001      	b.n	80093b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093ae:	2300      	movs	r3, #0
 80093b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093b2:	687b      	ldr	r3, [r7, #4]
	}
 80093b4:	4618      	mov	r0, r3
 80093b6:	370c      	adds	r7, #12
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr
 80093c0:	20001da4 	.word	0x20001da4
 80093c4:	20001dc0 	.word	0x20001dc0

080093c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093d4:	2300      	movs	r3, #0
 80093d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d056      	beq.n	800948c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80093de:	4b2e      	ldr	r3, [pc, #184]	; (8009498 <xTaskPriorityDisinherit+0xd0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d00a      	beq.n	80093fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80093e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ec:	f383 8811 	msr	BASEPRI, r3
 80093f0:	f3bf 8f6f 	isb	sy
 80093f4:	f3bf 8f4f 	dsb	sy
 80093f8:	60fb      	str	r3, [r7, #12]
}
 80093fa:	bf00      	nop
 80093fc:	e7fe      	b.n	80093fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009402:	2b00      	cmp	r3, #0
 8009404:	d10a      	bne.n	800941c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	60bb      	str	r3, [r7, #8]
}
 8009418:	bf00      	nop
 800941a:	e7fe      	b.n	800941a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009420:	1e5a      	subs	r2, r3, #1
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800942e:	429a      	cmp	r2, r3
 8009430:	d02c      	beq.n	800948c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009436:	2b00      	cmp	r3, #0
 8009438:	d128      	bne.n	800948c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	3304      	adds	r3, #4
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fc36 	bl	8007cb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800945c:	4b0f      	ldr	r3, [pc, #60]	; (800949c <xTaskPriorityDisinherit+0xd4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d903      	bls.n	800946c <xTaskPriorityDisinherit+0xa4>
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009468:	4a0c      	ldr	r2, [pc, #48]	; (800949c <xTaskPriorityDisinherit+0xd4>)
 800946a:	6013      	str	r3, [r2, #0]
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009470:	4613      	mov	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4413      	add	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <xTaskPriorityDisinherit+0xd8>)
 800947a:	441a      	add	r2, r3
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	3304      	adds	r3, #4
 8009480:	4619      	mov	r1, r3
 8009482:	4610      	mov	r0, r2
 8009484:	f7fe fbb7 	bl	8007bf6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009488:	2301      	movs	r3, #1
 800948a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800948c:	697b      	ldr	r3, [r7, #20]
	}
 800948e:	4618      	mov	r0, r3
 8009490:	3718      	adds	r7, #24
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	200018c4 	.word	0x200018c4
 800949c:	20001da0 	.word	0x20001da0
 80094a0:	200018c8 	.word	0x200018c8

080094a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094ae:	4b21      	ldr	r3, [pc, #132]	; (8009534 <prvAddCurrentTaskToDelayedList+0x90>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094b4:	4b20      	ldr	r3, [pc, #128]	; (8009538 <prvAddCurrentTaskToDelayedList+0x94>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	3304      	adds	r3, #4
 80094ba:	4618      	mov	r0, r3
 80094bc:	f7fe fbf8 	bl	8007cb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c6:	d10a      	bne.n	80094de <prvAddCurrentTaskToDelayedList+0x3a>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d007      	beq.n	80094de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ce:	4b1a      	ldr	r3, [pc, #104]	; (8009538 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3304      	adds	r3, #4
 80094d4:	4619      	mov	r1, r3
 80094d6:	4819      	ldr	r0, [pc, #100]	; (800953c <prvAddCurrentTaskToDelayedList+0x98>)
 80094d8:	f7fe fb8d 	bl	8007bf6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094dc:	e026      	b.n	800952c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4413      	add	r3, r2
 80094e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094e6:	4b14      	ldr	r3, [pc, #80]	; (8009538 <prvAddCurrentTaskToDelayedList+0x94>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d209      	bcs.n	800950a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f6:	4b12      	ldr	r3, [pc, #72]	; (8009540 <prvAddCurrentTaskToDelayedList+0x9c>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b0f      	ldr	r3, [pc, #60]	; (8009538 <prvAddCurrentTaskToDelayedList+0x94>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe fb9b 	bl	8007c3e <vListInsert>
}
 8009508:	e010      	b.n	800952c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800950a:	4b0e      	ldr	r3, [pc, #56]	; (8009544 <prvAddCurrentTaskToDelayedList+0xa0>)
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	4b0a      	ldr	r3, [pc, #40]	; (8009538 <prvAddCurrentTaskToDelayedList+0x94>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	3304      	adds	r3, #4
 8009514:	4619      	mov	r1, r3
 8009516:	4610      	mov	r0, r2
 8009518:	f7fe fb91 	bl	8007c3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <prvAddCurrentTaskToDelayedList+0xa4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	429a      	cmp	r2, r3
 8009524:	d202      	bcs.n	800952c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009526:	4a08      	ldr	r2, [pc, #32]	; (8009548 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	6013      	str	r3, [r2, #0]
}
 800952c:	bf00      	nop
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}
 8009534:	20001d9c 	.word	0x20001d9c
 8009538:	200018c4 	.word	0x200018c4
 800953c:	20001d84 	.word	0x20001d84
 8009540:	20001d54 	.word	0x20001d54
 8009544:	20001d50 	.word	0x20001d50
 8009548:	20001db8 	.word	0x20001db8

0800954c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08a      	sub	sp, #40	; 0x28
 8009550:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009556:	f000 fb07 	bl	8009b68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800955a:	4b1c      	ldr	r3, [pc, #112]	; (80095cc <xTimerCreateTimerTask+0x80>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d021      	beq.n	80095a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009566:	2300      	movs	r3, #0
 8009568:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800956a:	1d3a      	adds	r2, r7, #4
 800956c:	f107 0108 	add.w	r1, r7, #8
 8009570:	f107 030c 	add.w	r3, r7, #12
 8009574:	4618      	mov	r0, r3
 8009576:	f7fe faf7 	bl	8007b68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	9202      	str	r2, [sp, #8]
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	2302      	movs	r3, #2
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	2300      	movs	r3, #0
 800958a:	460a      	mov	r2, r1
 800958c:	4910      	ldr	r1, [pc, #64]	; (80095d0 <xTimerCreateTimerTask+0x84>)
 800958e:	4811      	ldr	r0, [pc, #68]	; (80095d4 <xTimerCreateTimerTask+0x88>)
 8009590:	f7ff f8de 	bl	8008750 <xTaskCreateStatic>
 8009594:	4603      	mov	r3, r0
 8009596:	4a10      	ldr	r2, [pc, #64]	; (80095d8 <xTimerCreateTimerTask+0x8c>)
 8009598:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800959a:	4b0f      	ldr	r3, [pc, #60]	; (80095d8 <xTimerCreateTimerTask+0x8c>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095a2:	2301      	movs	r3, #1
 80095a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	613b      	str	r3, [r7, #16]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095c2:	697b      	ldr	r3, [r7, #20]
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3718      	adds	r7, #24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	20001df4 	.word	0x20001df4
 80095d0:	0800b444 	.word	0x0800b444
 80095d4:	08009711 	.word	0x08009711
 80095d8:	20001df8 	.word	0x20001df8

080095dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	607a      	str	r2, [r7, #4]
 80095e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095ea:	2300      	movs	r3, #0
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d10a      	bne.n	800960a <xTimerGenericCommand+0x2e>
	__asm volatile
 80095f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f8:	f383 8811 	msr	BASEPRI, r3
 80095fc:	f3bf 8f6f 	isb	sy
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	623b      	str	r3, [r7, #32]
}
 8009606:	bf00      	nop
 8009608:	e7fe      	b.n	8009608 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800960a:	4b1a      	ldr	r3, [pc, #104]	; (8009674 <xTimerGenericCommand+0x98>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d02a      	beq.n	8009668 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	2b05      	cmp	r3, #5
 8009622:	dc18      	bgt.n	8009656 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009624:	f7ff feb2 	bl	800938c <xTaskGetSchedulerState>
 8009628:	4603      	mov	r3, r0
 800962a:	2b02      	cmp	r3, #2
 800962c:	d109      	bne.n	8009642 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800962e:	4b11      	ldr	r3, [pc, #68]	; (8009674 <xTimerGenericCommand+0x98>)
 8009630:	6818      	ldr	r0, [r3, #0]
 8009632:	f107 0110 	add.w	r1, r7, #16
 8009636:	2300      	movs	r3, #0
 8009638:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800963a:	f7fe fca1 	bl	8007f80 <xQueueGenericSend>
 800963e:	6278      	str	r0, [r7, #36]	; 0x24
 8009640:	e012      	b.n	8009668 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009642:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <xTimerGenericCommand+0x98>)
 8009644:	6818      	ldr	r0, [r3, #0]
 8009646:	f107 0110 	add.w	r1, r7, #16
 800964a:	2300      	movs	r3, #0
 800964c:	2200      	movs	r2, #0
 800964e:	f7fe fc97 	bl	8007f80 <xQueueGenericSend>
 8009652:	6278      	str	r0, [r7, #36]	; 0x24
 8009654:	e008      	b.n	8009668 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009656:	4b07      	ldr	r3, [pc, #28]	; (8009674 <xTimerGenericCommand+0x98>)
 8009658:	6818      	ldr	r0, [r3, #0]
 800965a:	f107 0110 	add.w	r1, r7, #16
 800965e:	2300      	movs	r3, #0
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	f7fe fd8b 	bl	800817c <xQueueGenericSendFromISR>
 8009666:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800966a:	4618      	mov	r0, r3
 800966c:	3728      	adds	r7, #40	; 0x28
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	20001df4 	.word	0x20001df4

08009678 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b088      	sub	sp, #32
 800967c:	af02      	add	r7, sp, #8
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009682:	4b22      	ldr	r3, [pc, #136]	; (800970c <prvProcessExpiredTimer+0x94>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	3304      	adds	r3, #4
 8009690:	4618      	mov	r0, r3
 8009692:	f7fe fb0d 	bl	8007cb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800969c:	f003 0304 	and.w	r3, r3, #4
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d022      	beq.n	80096ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	699a      	ldr	r2, [r3, #24]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	18d1      	adds	r1, r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	6978      	ldr	r0, [r7, #20]
 80096b2:	f000 f8d1 	bl	8009858 <prvInsertTimerInActiveList>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d01f      	beq.n	80096fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096bc:	2300      	movs	r3, #0
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	2300      	movs	r3, #0
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	2100      	movs	r1, #0
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	f7ff ff88 	bl	80095dc <xTimerGenericCommand>
 80096cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d113      	bne.n	80096fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	60fb      	str	r3, [r7, #12]
}
 80096e6:	bf00      	nop
 80096e8:	e7fe      	b.n	80096e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096f0:	f023 0301 	bic.w	r3, r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	6a1b      	ldr	r3, [r3, #32]
 8009700:	6978      	ldr	r0, [r7, #20]
 8009702:	4798      	blx	r3
}
 8009704:	bf00      	nop
 8009706:	3718      	adds	r7, #24
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20001dec 	.word	0x20001dec

08009710 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009718:	f107 0308 	add.w	r3, r7, #8
 800971c:	4618      	mov	r0, r3
 800971e:	f000 f857 	bl	80097d0 <prvGetNextExpireTime>
 8009722:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4619      	mov	r1, r3
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 f803 	bl	8009734 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800972e:	f000 f8d5 	bl	80098dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009732:	e7f1      	b.n	8009718 <prvTimerTask+0x8>

08009734 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800973e:	f7ff fa43 	bl	8008bc8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009742:	f107 0308 	add.w	r3, r7, #8
 8009746:	4618      	mov	r0, r3
 8009748:	f000 f866 	bl	8009818 <prvSampleTimeNow>
 800974c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d130      	bne.n	80097b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10a      	bne.n	8009770 <prvProcessTimerOrBlockTask+0x3c>
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	429a      	cmp	r2, r3
 8009760:	d806      	bhi.n	8009770 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009762:	f7ff fa3f 	bl	8008be4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009766:	68f9      	ldr	r1, [r7, #12]
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ff85 	bl	8009678 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800976e:	e024      	b.n	80097ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009776:	4b13      	ldr	r3, [pc, #76]	; (80097c4 <prvProcessTimerOrBlockTask+0x90>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <prvProcessTimerOrBlockTask+0x50>
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <prvProcessTimerOrBlockTask+0x52>
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009788:	4b0f      	ldr	r3, [pc, #60]	; (80097c8 <prvProcessTimerOrBlockTask+0x94>)
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	687a      	ldr	r2, [r7, #4]
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4619      	mov	r1, r3
 8009796:	f7fe ffa7 	bl	80086e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800979a:	f7ff fa23 	bl	8008be4 <xTaskResumeAll>
 800979e:	4603      	mov	r3, r0
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10a      	bne.n	80097ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097a4:	4b09      	ldr	r3, [pc, #36]	; (80097cc <prvProcessTimerOrBlockTask+0x98>)
 80097a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	f3bf 8f6f 	isb	sy
}
 80097b4:	e001      	b.n	80097ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097b6:	f7ff fa15 	bl	8008be4 <xTaskResumeAll>
}
 80097ba:	bf00      	nop
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	20001df0 	.word	0x20001df0
 80097c8:	20001df4 	.word	0x20001df4
 80097cc:	e000ed04 	.word	0xe000ed04

080097d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097d0:	b480      	push	{r7}
 80097d2:	b085      	sub	sp, #20
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097d8:	4b0e      	ldr	r3, [pc, #56]	; (8009814 <prvGetNextExpireTime+0x44>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <prvGetNextExpireTime+0x16>
 80097e2:	2201      	movs	r2, #1
 80097e4:	e000      	b.n	80097e8 <prvGetNextExpireTime+0x18>
 80097e6:	2200      	movs	r2, #0
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d105      	bne.n	8009800 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097f4:	4b07      	ldr	r3, [pc, #28]	; (8009814 <prvGetNextExpireTime+0x44>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e001      	b.n	8009804 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009800:	2300      	movs	r3, #0
 8009802:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009804:	68fb      	ldr	r3, [r7, #12]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3714      	adds	r7, #20
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr
 8009812:	bf00      	nop
 8009814:	20001dec 	.word	0x20001dec

08009818 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009820:	f7ff fa7e 	bl	8008d20 <xTaskGetTickCount>
 8009824:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009826:	4b0b      	ldr	r3, [pc, #44]	; (8009854 <prvSampleTimeNow+0x3c>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	429a      	cmp	r2, r3
 800982e:	d205      	bcs.n	800983c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009830:	f000 f936 	bl	8009aa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2201      	movs	r2, #1
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e002      	b.n	8009842 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009842:	4a04      	ldr	r2, [pc, #16]	; (8009854 <prvSampleTimeNow+0x3c>)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009848:	68fb      	ldr	r3, [r7, #12]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	20001dfc 	.word	0x20001dfc

08009858 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	607a      	str	r2, [r7, #4]
 8009864:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009866:	2300      	movs	r3, #0
 8009868:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	68fa      	ldr	r2, [r7, #12]
 8009874:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009876:	68ba      	ldr	r2, [r7, #8]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	429a      	cmp	r2, r3
 800987c:	d812      	bhi.n	80098a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	1ad2      	subs	r2, r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	429a      	cmp	r2, r3
 800988a:	d302      	bcc.n	8009892 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800988c:	2301      	movs	r3, #1
 800988e:	617b      	str	r3, [r7, #20]
 8009890:	e01b      	b.n	80098ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009892:	4b10      	ldr	r3, [pc, #64]	; (80098d4 <prvInsertTimerInActiveList+0x7c>)
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3304      	adds	r3, #4
 800989a:	4619      	mov	r1, r3
 800989c:	4610      	mov	r0, r2
 800989e:	f7fe f9ce 	bl	8007c3e <vListInsert>
 80098a2:	e012      	b.n	80098ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d206      	bcs.n	80098ba <prvInsertTimerInActiveList+0x62>
 80098ac:	68ba      	ldr	r2, [r7, #8]
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	429a      	cmp	r2, r3
 80098b2:	d302      	bcc.n	80098ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098b4:	2301      	movs	r3, #1
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e007      	b.n	80098ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098ba:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <prvInsertTimerInActiveList+0x80>)
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	3304      	adds	r3, #4
 80098c2:	4619      	mov	r1, r3
 80098c4:	4610      	mov	r0, r2
 80098c6:	f7fe f9ba 	bl	8007c3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098ca:	697b      	ldr	r3, [r7, #20]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20001df0 	.word	0x20001df0
 80098d8:	20001dec 	.word	0x20001dec

080098dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b08e      	sub	sp, #56	; 0x38
 80098e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098e2:	e0ca      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	da18      	bge.n	800991c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098ea:	1d3b      	adds	r3, r7, #4
 80098ec:	3304      	adds	r3, #4
 80098ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10a      	bne.n	800990c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	61fb      	str	r3, [r7, #28]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800990c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009912:	6850      	ldr	r0, [r2, #4]
 8009914:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009916:	6892      	ldr	r2, [r2, #8]
 8009918:	4611      	mov	r1, r2
 800991a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	f2c0 80aa 	blt.w	8009a78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7fe f9bb 	bl	8007cb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800993a:	463b      	mov	r3, r7
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff ff6b 	bl	8009818 <prvSampleTimeNow>
 8009942:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2b09      	cmp	r3, #9
 8009948:	f200 8097 	bhi.w	8009a7a <prvProcessReceivedCommands+0x19e>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <prvProcessReceivedCommands+0x78>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	0800997d 	.word	0x0800997d
 8009958:	0800997d 	.word	0x0800997d
 800995c:	0800997d 	.word	0x0800997d
 8009960:	080099f1 	.word	0x080099f1
 8009964:	08009a05 	.word	0x08009a05
 8009968:	08009a4f 	.word	0x08009a4f
 800996c:	0800997d 	.word	0x0800997d
 8009970:	0800997d 	.word	0x0800997d
 8009974:	080099f1 	.word	0x080099f1
 8009978:	08009a05 	.word	0x08009a05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800997c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	18d1      	adds	r1, r2, r3
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800999a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800999c:	f7ff ff5c 	bl	8009858 <prvInsertTimerInActiveList>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d069      	beq.n	8009a7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d05e      	beq.n	8009a7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	441a      	add	r2, r3
 80099c4:	2300      	movs	r3, #0
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	2300      	movs	r3, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ce:	f7ff fe05 	bl	80095dc <xTimerGenericCommand>
 80099d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d14f      	bne.n	8009a7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	61bb      	str	r3, [r7, #24]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a02:	e03a      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	617b      	str	r3, [r7, #20]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a40:	18d1      	adds	r1, r2, r3
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a48:	f7ff ff06 	bl	8009858 <prvInsertTimerInActiveList>
					break;
 8009a4c:	e015      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d103      	bne.n	8009a64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a5e:	f000 fbdf 	bl	800a220 <vPortFree>
 8009a62:	e00a      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a6a:	f023 0301 	bic.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a76:	e000      	b.n	8009a7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a7a:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <prvProcessReceivedCommands+0x1c0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	1d39      	adds	r1, r7, #4
 8009a80:	2200      	movs	r2, #0
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fc16 	bl	80082b4 <xQueueReceive>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f47f af2a 	bne.w	80098e4 <prvProcessReceivedCommands+0x8>
	}
}
 8009a90:	bf00      	nop
 8009a92:	bf00      	nop
 8009a94:	3730      	adds	r7, #48	; 0x30
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20001df4 	.word	0x20001df4

08009aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aa6:	e048      	b.n	8009b3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aa8:	4b2d      	ldr	r3, [pc, #180]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab2:	4b2b      	ldr	r3, [pc, #172]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe f8f5 	bl	8007cb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d02e      	beq.n	8009b3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d90e      	bls.n	8009b0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009afa:	4b19      	ldr	r3, [pc, #100]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3304      	adds	r3, #4
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f7fe f89a 	bl	8007c3e <vListInsert>
 8009b0a:	e016      	b.n	8009b3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	2300      	movs	r3, #0
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	2100      	movs	r1, #0
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fd60 	bl	80095dc <xTimerGenericCommand>
 8009b1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	603b      	str	r3, [r7, #0]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1b1      	bne.n	8009aa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <prvSwitchTimerLists+0xc4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a04      	ldr	r2, [pc, #16]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b52:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <prvSwitchTimerLists+0xc4>)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	6013      	str	r3, [r2, #0]
}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20001dec 	.word	0x20001dec
 8009b64:	20001df0 	.word	0x20001df0

08009b68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b6e:	f000 f969 	bl	8009e44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b72:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d120      	bne.n	8009bbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b7a:	4814      	ldr	r0, [pc, #80]	; (8009bcc <prvCheckForValidListAndQueue+0x64>)
 8009b7c:	f7fe f80e 	bl	8007b9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b80:	4813      	ldr	r0, [pc, #76]	; (8009bd0 <prvCheckForValidListAndQueue+0x68>)
 8009b82:	f7fe f80b 	bl	8007b9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <prvCheckForValidListAndQueue+0x6c>)
 8009b88:	4a10      	ldr	r2, [pc, #64]	; (8009bcc <prvCheckForValidListAndQueue+0x64>)
 8009b8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b8c:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <prvCheckForValidListAndQueue+0x70>)
 8009b8e:	4a10      	ldr	r2, [pc, #64]	; (8009bd0 <prvCheckForValidListAndQueue+0x68>)
 8009b90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b92:	2300      	movs	r3, #0
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <prvCheckForValidListAndQueue+0x74>)
 8009b98:	4a11      	ldr	r2, [pc, #68]	; (8009be0 <prvCheckForValidListAndQueue+0x78>)
 8009b9a:	2110      	movs	r1, #16
 8009b9c:	200a      	movs	r0, #10
 8009b9e:	f7fe f919 	bl	8007dd4 <xQueueGenericCreateStatic>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4a08      	ldr	r2, [pc, #32]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009ba6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ba8:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d005      	beq.n	8009bbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	490b      	ldr	r1, [pc, #44]	; (8009be4 <prvCheckForValidListAndQueue+0x7c>)
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fd6c 	bl	8008694 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bbc:	f000 f972 	bl	8009ea4 <vPortExitCritical>
}
 8009bc0:	bf00      	nop
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	20001df4 	.word	0x20001df4
 8009bcc:	20001dc4 	.word	0x20001dc4
 8009bd0:	20001dd8 	.word	0x20001dd8
 8009bd4:	20001dec 	.word	0x20001dec
 8009bd8:	20001df0 	.word	0x20001df0
 8009bdc:	20001ea0 	.word	0x20001ea0
 8009be0:	20001e00 	.word	0x20001e00
 8009be4:	0800b44c 	.word	0x0800b44c

08009be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3b04      	subs	r3, #4
 8009bf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f023 0201 	bic.w	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3b04      	subs	r3, #4
 8009c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c18:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <pxPortInitialiseStack+0x64>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3b14      	subs	r3, #20
 8009c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3b04      	subs	r3, #4
 8009c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f06f 0202 	mvn.w	r2, #2
 8009c36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3b20      	subs	r3, #32
 8009c3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	08009c51 	.word	0x08009c51

08009c50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c5a:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <prvTaskExitError+0x54>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c62:	d00a      	beq.n	8009c7a <prvTaskExitError+0x2a>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	60fb      	str	r3, [r7, #12]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <prvTaskExitError+0x28>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	60bb      	str	r3, [r7, #8]
}
 8009c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c8e:	bf00      	nop
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0fc      	beq.n	8009c90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20000098 	.word	0x20000098
	...

08009cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cb0:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <pxCurrentTCBConst2>)
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	6808      	ldr	r0, [r1, #0]
 8009cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	f380 8809 	msr	PSP, r0
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8811 	msr	BASEPRI, r0
 8009cca:	4770      	bx	lr
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst2>:
 8009cd0:	200018c4 	.word	0x200018c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cd8:	4808      	ldr	r0, [pc, #32]	; (8009cfc <prvPortStartFirstTask+0x24>)
 8009cda:	6800      	ldr	r0, [r0, #0]
 8009cdc:	6800      	ldr	r0, [r0, #0]
 8009cde:	f380 8808 	msr	MSP, r0
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f380 8814 	msr	CONTROL, r0
 8009cea:	b662      	cpsie	i
 8009cec:	b661      	cpsie	f
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	df00      	svc	0
 8009cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cfa:	bf00      	nop
 8009cfc:	e000ed08 	.word	0xe000ed08

08009d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d06:	4b46      	ldr	r3, [pc, #280]	; (8009e20 <xPortStartScheduler+0x120>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a46      	ldr	r2, [pc, #280]	; (8009e24 <xPortStartScheduler+0x124>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d10a      	bne.n	8009d26 <xPortStartScheduler+0x26>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	613b      	str	r3, [r7, #16]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d26:	4b3e      	ldr	r3, [pc, #248]	; (8009e20 <xPortStartScheduler+0x120>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a3f      	ldr	r2, [pc, #252]	; (8009e28 <xPortStartScheduler+0x128>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10a      	bne.n	8009d46 <xPortStartScheduler+0x46>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d46:	4b39      	ldr	r3, [pc, #228]	; (8009e2c <xPortStartScheduler+0x12c>)
 8009d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	22ff      	movs	r2, #255	; 0xff
 8009d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	4b31      	ldr	r3, [pc, #196]	; (8009e30 <xPortStartScheduler+0x130>)
 8009d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d6e:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d70:	2207      	movs	r2, #7
 8009d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d74:	e009      	b.n	8009d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d76:	4b2f      	ldr	r3, [pc, #188]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	4a2d      	ldr	r2, [pc, #180]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d92:	2b80      	cmp	r3, #128	; 0x80
 8009d94:	d0ef      	beq.n	8009d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d96:	4b27      	ldr	r3, [pc, #156]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f1c3 0307 	rsb	r3, r3, #7
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d00a      	beq.n	8009db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	60bb      	str	r3, [r7, #8]
}
 8009db4:	bf00      	nop
 8009db6:	e7fe      	b.n	8009db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009db8:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009dc2:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dca:	4a1a      	ldr	r2, [pc, #104]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dd6:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <xPortStartScheduler+0x138>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a17      	ldr	r2, [pc, #92]	; (8009e38 <xPortStartScheduler+0x138>)
 8009ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009de2:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <xPortStartScheduler+0x138>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <xPortStartScheduler+0x138>)
 8009de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dee:	f000 f8dd 	bl	8009fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009df2:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <xPortStartScheduler+0x13c>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009df8:	f000 f8fc 	bl	8009ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dfc:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <xPortStartScheduler+0x140>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0f      	ldr	r2, [pc, #60]	; (8009e40 <xPortStartScheduler+0x140>)
 8009e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e08:	f7ff ff66 	bl	8009cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e0c:	f7ff f852 	bl	8008eb4 <vTaskSwitchContext>
	prvTaskExitError();
 8009e10:	f7ff ff1e 	bl	8009c50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	e000ed00 	.word	0xe000ed00
 8009e24:	410fc271 	.word	0x410fc271
 8009e28:	410fc270 	.word	0x410fc270
 8009e2c:	e000e400 	.word	0xe000e400
 8009e30:	20001ef0 	.word	0x20001ef0
 8009e34:	20001ef4 	.word	0x20001ef4
 8009e38:	e000ed20 	.word	0xe000ed20
 8009e3c:	20000098 	.word	0x20000098
 8009e40:	e000ef34 	.word	0xe000ef34

08009e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	607b      	str	r3, [r7, #4]
}
 8009e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3301      	adds	r3, #1
 8009e64:	4a0d      	ldr	r2, [pc, #52]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d10f      	bne.n	8009e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e70:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <vPortEnterCritical+0x5c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	603b      	str	r3, [r7, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <vPortEnterCritical+0x4a>
	}
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	20000098 	.word	0x20000098
 8009ea0:	e000ed04 	.word	0xe000ed04

08009ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eaa:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <vPortExitCritical+0x50>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <vPortExitCritical+0x24>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	607b      	str	r3, [r7, #4]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <vPortExitCritical+0x50>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	4a09      	ldr	r2, [pc, #36]	; (8009ef4 <vPortExitCritical+0x50>)
 8009ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ed2:	4b08      	ldr	r3, [pc, #32]	; (8009ef4 <vPortExitCritical+0x50>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <vPortExitCritical+0x42>
 8009eda:	2300      	movs	r3, #0
 8009edc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	f383 8811 	msr	BASEPRI, r3
}
 8009ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000098 	.word	0x20000098
	...

08009f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f00:	f3ef 8009 	mrs	r0, PSP
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <pxCurrentTCBConst>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	f01e 0f10 	tst.w	lr, #16
 8009f10:	bf08      	it	eq
 8009f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	6010      	str	r0, [r2, #0]
 8009f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f24:	f380 8811 	msr	BASEPRI, r0
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f7fe ffc0 	bl	8008eb4 <vTaskSwitchContext>
 8009f34:	f04f 0000 	mov.w	r0, #0
 8009f38:	f380 8811 	msr	BASEPRI, r0
 8009f3c:	bc09      	pop	{r0, r3}
 8009f3e:	6819      	ldr	r1, [r3, #0]
 8009f40:	6808      	ldr	r0, [r1, #0]
 8009f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f46:	f01e 0f10 	tst.w	lr, #16
 8009f4a:	bf08      	it	eq
 8009f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f50:	f380 8809 	msr	PSP, r0
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	f3af 8000 	nop.w

08009f60 <pxCurrentTCBConst>:
 8009f60:	200018c4 	.word	0x200018c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop

08009f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	607b      	str	r3, [r7, #4]
}
 8009f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f82:	f7fe fedd 	bl	8008d40 <xTaskIncrementTick>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <xPortSysTickHandler+0x40>)
 8009f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f383 8811 	msr	BASEPRI, r3
}
 8009f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <vPortSetupTimerInterrupt+0x34>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <vPortSetupTimerInterrupt+0x38>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <vPortSetupTimerInterrupt+0x3c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <vPortSetupTimerInterrupt+0x40>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	099b      	lsrs	r3, r3, #6
 8009fc8:	4a09      	ldr	r2, [pc, #36]	; (8009ff0 <vPortSetupTimerInterrupt+0x44>)
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fce:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <vPortSetupTimerInterrupt+0x34>)
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	601a      	str	r2, [r3, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	e000e010 	.word	0xe000e010
 8009fe4:	e000e018 	.word	0xe000e018
 8009fe8:	20000000 	.word	0x20000000
 8009fec:	10624dd3 	.word	0x10624dd3
 8009ff0:	e000e014 	.word	0xe000e014

08009ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a004 <vPortEnableVFP+0x10>
 8009ff8:	6801      	ldr	r1, [r0, #0]
 8009ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ffe:	6001      	str	r1, [r0, #0]
 800a000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a002:	bf00      	nop
 800a004:	e000ed88 	.word	0xe000ed88

0800a008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a00e:	f3ef 8305 	mrs	r3, IPSR
 800a012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b0f      	cmp	r3, #15
 800a018:	d914      	bls.n	800a044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a01a:	4a17      	ldr	r2, [pc, #92]	; (800a078 <vPortValidateInterruptPriority+0x70>)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a024:	4b15      	ldr	r3, [pc, #84]	; (800a07c <vPortValidateInterruptPriority+0x74>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	7afa      	ldrb	r2, [r7, #11]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d20a      	bcs.n	800a044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a044:	4b0e      	ldr	r3, [pc, #56]	; (800a080 <vPortValidateInterruptPriority+0x78>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a04c:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <vPortValidateInterruptPriority+0x7c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d90a      	bls.n	800a06a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	603b      	str	r3, [r7, #0]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <vPortValidateInterruptPriority+0x60>
	}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	e000e3f0 	.word	0xe000e3f0
 800a07c:	20001ef0 	.word	0x20001ef0
 800a080:	e000ed0c 	.word	0xe000ed0c
 800a084:	20001ef4 	.word	0x20001ef4

0800a088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08a      	sub	sp, #40	; 0x28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a090:	2300      	movs	r3, #0
 800a092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a094:	f7fe fd98 	bl	8008bc8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a098:	4b5b      	ldr	r3, [pc, #364]	; (800a208 <pvPortMalloc+0x180>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0a0:	f000 f920 	bl	800a2e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0a4:	4b59      	ldr	r3, [pc, #356]	; (800a20c <pvPortMalloc+0x184>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 8093 	bne.w	800a1d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01d      	beq.n	800a0f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0b8:	2208      	movs	r2, #8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d014      	beq.n	800a0f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f023 0307 	bic.w	r3, r3, #7
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	617b      	str	r3, [r7, #20]
}
 800a0f0:	bf00      	nop
 800a0f2:	e7fe      	b.n	800a0f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d06e      	beq.n	800a1d8 <pvPortMalloc+0x150>
 800a0fa:	4b45      	ldr	r3, [pc, #276]	; (800a210 <pvPortMalloc+0x188>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d869      	bhi.n	800a1d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a104:	4b43      	ldr	r3, [pc, #268]	; (800a214 <pvPortMalloc+0x18c>)
 800a106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a108:	4b42      	ldr	r3, [pc, #264]	; (800a214 <pvPortMalloc+0x18c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a10e:	e004      	b.n	800a11a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d903      	bls.n	800a12c <pvPortMalloc+0xa4>
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f1      	bne.n	800a110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a12c:	4b36      	ldr	r3, [pc, #216]	; (800a208 <pvPortMalloc+0x180>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a132:	429a      	cmp	r2, r3
 800a134:	d050      	beq.n	800a1d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2208      	movs	r2, #8
 800a13c:	4413      	add	r3, r2
 800a13e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	1ad2      	subs	r2, r2, r3
 800a150:	2308      	movs	r3, #8
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	429a      	cmp	r2, r3
 800a156:	d91f      	bls.n	800a198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <pvPortMalloc+0xf8>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	613b      	str	r3, [r7, #16]
}
 800a17c:	bf00      	nop
 800a17e:	e7fe      	b.n	800a17e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	1ad2      	subs	r2, r2, r3
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a192:	69b8      	ldr	r0, [r7, #24]
 800a194:	f000 f908 	bl	800a3a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a198:	4b1d      	ldr	r3, [pc, #116]	; (800a210 <pvPortMalloc+0x188>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	4a1b      	ldr	r2, [pc, #108]	; (800a210 <pvPortMalloc+0x188>)
 800a1a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1a6:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <pvPortMalloc+0x188>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	4b1b      	ldr	r3, [pc, #108]	; (800a218 <pvPortMalloc+0x190>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d203      	bcs.n	800a1ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1b2:	4b17      	ldr	r3, [pc, #92]	; (800a210 <pvPortMalloc+0x188>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a18      	ldr	r2, [pc, #96]	; (800a218 <pvPortMalloc+0x190>)
 800a1b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	4b13      	ldr	r3, [pc, #76]	; (800a20c <pvPortMalloc+0x184>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1ce:	4b13      	ldr	r3, [pc, #76]	; (800a21c <pvPortMalloc+0x194>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	4a11      	ldr	r2, [pc, #68]	; (800a21c <pvPortMalloc+0x194>)
 800a1d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1d8:	f7fe fd04 	bl	8008be4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	f003 0307 	and.w	r3, r3, #7
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00a      	beq.n	800a1fc <pvPortMalloc+0x174>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	60fb      	str	r3, [r7, #12]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <pvPortMalloc+0x172>
	return pvReturn;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3728      	adds	r7, #40	; 0x28
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20005b00 	.word	0x20005b00
 800a20c:	20005b14 	.word	0x20005b14
 800a210:	20005b04 	.word	0x20005b04
 800a214:	20005af8 	.word	0x20005af8
 800a218:	20005b08 	.word	0x20005b08
 800a21c:	20005b0c 	.word	0x20005b0c

0800a220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d04d      	beq.n	800a2ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a232:	2308      	movs	r3, #8
 800a234:	425b      	negs	r3, r3
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	4413      	add	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	4b24      	ldr	r3, [pc, #144]	; (800a2d8 <vPortFree+0xb8>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4013      	ands	r3, r2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10a      	bne.n	800a264 <vPortFree+0x44>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	60fb      	str	r3, [r7, #12]
}
 800a260:	bf00      	nop
 800a262:	e7fe      	b.n	800a262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <vPortFree+0x62>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	60bb      	str	r3, [r7, #8]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	4b14      	ldr	r3, [pc, #80]	; (800a2d8 <vPortFree+0xb8>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d01e      	beq.n	800a2ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d11a      	bne.n	800a2ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4b0e      	ldr	r3, [pc, #56]	; (800a2d8 <vPortFree+0xb8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	401a      	ands	r2, r3
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2a8:	f7fe fc8e 	bl	8008bc8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <vPortFree+0xbc>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4a09      	ldr	r2, [pc, #36]	; (800a2dc <vPortFree+0xbc>)
 800a2b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ba:	6938      	ldr	r0, [r7, #16]
 800a2bc:	f000 f874 	bl	800a3a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2c0:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <vPortFree+0xc0>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	4a06      	ldr	r2, [pc, #24]	; (800a2e0 <vPortFree+0xc0>)
 800a2c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2ca:	f7fe fc8b 	bl	8008be4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ce:	bf00      	nop
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20005b14 	.word	0x20005b14
 800a2dc:	20005b04 	.word	0x20005b04
 800a2e0:	20005b10 	.word	0x20005b10

0800a2e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2f0:	4b27      	ldr	r3, [pc, #156]	; (800a390 <prvHeapInit+0xac>)
 800a2f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3307      	adds	r3, #7
 800a302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0307 	bic.w	r3, r3, #7
 800a30a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4a1f      	ldr	r2, [pc, #124]	; (800a390 <prvHeapInit+0xac>)
 800a314:	4413      	add	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a31c:	4a1d      	ldr	r2, [pc, #116]	; (800a394 <prvHeapInit+0xb0>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <prvHeapInit+0xb0>)
 800a324:	2200      	movs	r2, #0
 800a326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	4413      	add	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a330:	2208      	movs	r2, #8
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0307 	bic.w	r3, r3, #7
 800a33e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4a15      	ldr	r2, [pc, #84]	; (800a398 <prvHeapInit+0xb4>)
 800a344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a346:	4b14      	ldr	r3, [pc, #80]	; (800a398 <prvHeapInit+0xb4>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2200      	movs	r2, #0
 800a34c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a34e:	4b12      	ldr	r3, [pc, #72]	; (800a398 <prvHeapInit+0xb4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a364:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <prvHeapInit+0xb4>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	4a0a      	ldr	r2, [pc, #40]	; (800a39c <prvHeapInit+0xb8>)
 800a372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	4a09      	ldr	r2, [pc, #36]	; (800a3a0 <prvHeapInit+0xbc>)
 800a37a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <prvHeapInit+0xc0>)
 800a37e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a382:	601a      	str	r2, [r3, #0]
}
 800a384:	bf00      	nop
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	20001ef8 	.word	0x20001ef8
 800a394:	20005af8 	.word	0x20005af8
 800a398:	20005b00 	.word	0x20005b00
 800a39c:	20005b08 	.word	0x20005b08
 800a3a0:	20005b04 	.word	0x20005b04
 800a3a4:	20005b14 	.word	0x20005b14

0800a3a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3b0:	4b28      	ldr	r3, [pc, #160]	; (800a454 <prvInsertBlockIntoFreeList+0xac>)
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e002      	b.n	800a3bc <prvInsertBlockIntoFreeList+0x14>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d8f7      	bhi.n	800a3b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d108      	bne.n	800a3ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d118      	bne.n	800a430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b15      	ldr	r3, [pc, #84]	; (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d00d      	beq.n	800a426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	441a      	add	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e008      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e003      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d002      	beq.n	800a446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a446:	bf00      	nop
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	20005af8 	.word	0x20005af8
 800a458:	20005b00 	.word	0x20005b00

0800a45c <HAL_I2S_RxCpltCallback>:


static void expandPDMbuffer( const uint16_t *inBuffer , float32_t *outBuffer   );

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
	 xQueueSendFromISR( xDecimationQueue , & u16PDM_Buffer , &xHigherPriorityTaskWoken );
 800a464:	4b05      	ldr	r3, [pc, #20]	; (800a47c <HAL_I2S_RxCpltCallback+0x20>)
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	2300      	movs	r3, #0
 800a46a:	4a05      	ldr	r2, [pc, #20]	; (800a480 <HAL_I2S_RxCpltCallback+0x24>)
 800a46c:	4905      	ldr	r1, [pc, #20]	; (800a484 <HAL_I2S_RxCpltCallback+0x28>)
 800a46e:	f7fd fe85 	bl	800817c <xQueueGenericSendFromISR>

}
 800a472:	bf00      	nop
 800a474:	3708      	adds	r7, #8
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	20007b24 	.word	0x20007b24
 800a480:	20007b20 	.word	0x20007b20
 800a484:	20007b28 	.word	0x20007b28

0800a488 <vDecimationTaskRoutine>:



void vDecimationTaskRoutine( void * pvParameters )
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af02      	add	r7, sp, #8
 800a48e:	6078      	str	r0, [r7, #4]
	/* create decimation  queue */

	xDecimationQueue =  xQueueCreate( DECMATION_QUEUE_SIZE , sizeof(  uint16_t  ) * PDM_BUFFER_SIZE   ) ;
 800a490:	2200      	movs	r2, #0
 800a492:	2180      	movs	r1, #128	; 0x80
 800a494:	2004      	movs	r0, #4
 800a496:	f7fd fd15 	bl	8007ec4 <xQueueGenericCreate>
 800a49a:	4603      	mov	r3, r0
 800a49c:	4a18      	ldr	r2, [pc, #96]	; (800a500 <vDecimationTaskRoutine+0x78>)
 800a49e:	6013      	str	r3, [r2, #0]

	/* Init  arm  CIMSIS  Deciamtion filter  */
	arm_fir_decimate_init_f32	(&DecimateInstance  , FIR_LENGTH , DECIMATOR , 	fir_coeff_arrary , DecimateState , PDM_BITS_SIZE );
 800a4a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	4b17      	ldr	r3, [pc, #92]	; (800a504 <vDecimationTaskRoutine+0x7c>)
 800a4a8:	9300      	str	r3, [sp, #0]
 800a4aa:	4b17      	ldr	r3, [pc, #92]	; (800a508 <vDecimationTaskRoutine+0x80>)
 800a4ac:	2240      	movs	r2, #64	; 0x40
 800a4ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a4b2:	4816      	ldr	r0, [pc, #88]	; (800a50c <vDecimationTaskRoutine+0x84>)
 800a4b4:	f000 fd9c 	bl	800aff0 <arm_fir_decimate_init_f32>


	/* Microphone Init  */
	u8Microphone_Init ();
 800a4b8:	f7f6 f816 	bl	80004e8 <u8Microphone_Init>

	/* Microphone Start */
	u8Microphone_Start(  u16PDM_Buffer ,  PDM_BUFFER_SIZE  );
 800a4bc:	2140      	movs	r1, #64	; 0x40
 800a4be:	4814      	ldr	r0, [pc, #80]	; (800a510 <vDecimationTaskRoutine+0x88>)
 800a4c0:	f7f6 f94c 	bl	800075c <u8Microphone_Start>

    while ( 1 )
    {
        /* Task code goes here. */

    	if (  xQueueReceive( xDecimationQueue , u16IntermidatePDMBuf , 0U  ) == pdPASS  )
 800a4c4:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <vDecimationTaskRoutine+0x78>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	4912      	ldr	r1, [pc, #72]	; (800a514 <vDecimationTaskRoutine+0x8c>)
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f7fd fef1 	bl	80082b4 <xQueueReceive>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d10e      	bne.n	800a4f6 <vDecimationTaskRoutine+0x6e>
    	{

    		/* expand pdm u16buffer to  float  buffer ( bits ) */

    		expandPDMbuffer( u16IntermidatePDMBuf  ,  f32PDM_BITS_Buffer  ) ;
 800a4d8:	490f      	ldr	r1, [pc, #60]	; (800a518 <vDecimationTaskRoutine+0x90>)
 800a4da:	480e      	ldr	r0, [pc, #56]	; (800a514 <vDecimationTaskRoutine+0x8c>)
 800a4dc:	f000 f820 	bl	800a520 <expandPDMbuffer>

    		/* process ar decimation filter */
    		arm_fir_decimate_f32(&DecimateInstance , f32PDM_BITS_Buffer , f32PCM_Buffer , PDM_BITS_SIZE  );
 800a4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e4:	4a0d      	ldr	r2, [pc, #52]	; (800a51c <vDecimationTaskRoutine+0x94>)
 800a4e6:	490c      	ldr	r1, [pc, #48]	; (800a518 <vDecimationTaskRoutine+0x90>)
 800a4e8:	4808      	ldr	r0, [pc, #32]	; (800a50c <vDecimationTaskRoutine+0x84>)
 800a4ea:	f000 fd9d 	bl	800b028 <arm_fir_decimate_f32>

    		/* send samples via usb */

    		 CDC_Transmit_FS( (uint8_t * ) f32PCM_Buffer, PCM_BUFFER_SIZE  * sizeof(float));
 800a4ee:	2140      	movs	r1, #64	; 0x40
 800a4f0:	480a      	ldr	r0, [pc, #40]	; (800a51c <vDecimationTaskRoutine+0x94>)
 800a4f2:	f000 f913 	bl	800a71c <CDC_Transmit_FS>

    	}


    	vTaskDelay(  1U  ) ;
 800a4f6:	2001      	movs	r0, #1
 800a4f8:	f7fe facc 	bl	8008a94 <vTaskDelay>
    	if (  xQueueReceive( xDecimationQueue , u16IntermidatePDMBuf , 0U  ) == pdPASS  )
 800a4fc:	e7e2      	b.n	800a4c4 <vDecimationTaskRoutine+0x3c>
 800a4fe:	bf00      	nop
 800a500:	20007b24 	.word	0x20007b24
 800a504:	20005b24 	.word	0x20005b24
 800a508:	2000009c 	.word	0x2000009c
 800a50c:	20005b18 	.word	0x20005b18
 800a510:	20007b28 	.word	0x20007b28
 800a514:	20007ba8 	.word	0x20007ba8
 800a518:	20007c28 	.word	0x20007c28
 800a51c:	20008c28 	.word	0x20008c28

0800a520 <expandPDMbuffer>:




static void expandPDMbuffer( const uint16_t *inBuffer , float32_t *outBuffer   )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
    uint32_t bitIndex = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]
    uint16_t modifiedCurrentWord = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	817b      	strh	r3, [r7, #10]

    memset(outBuffer, 0, sizeof(PDM_BITS_SIZE ));
 800a532:	2204      	movs	r2, #4
 800a534:	2100      	movs	r1, #0
 800a536:	6838      	ldr	r0, [r7, #0]
 800a538:	f000 ff64 	bl	800b404 <memset>

    /* Move each bit from each uint16_t word to an element of output array. */
    for(bitIndex=0;
 800a53c:	2300      	movs	r3, #0
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e023      	b.n	800a58a <expandPDMbuffer+0x6a>
        bitIndex < PDM_BITS_SIZE ;
        bitIndex++)
    {
        if (bitIndex % 16 == 0)
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f003 030f 	and.w	r3, r3, #15
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d106      	bne.n	800a55a <expandPDMbuffer+0x3a>
        {
            modifiedCurrentWord = inBuffer[bitIndex/16];
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	091b      	lsrs	r3, r3, #4
 800a550:	005b      	lsls	r3, r3, #1
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	4413      	add	r3, r2
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	817b      	strh	r3, [r7, #10]
        }

        if (modifiedCurrentWord & 0x8000)
 800a55a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	da06      	bge.n	800a570 <expandPDMbuffer+0x50>
        {
            outBuffer[bitIndex] = INT16_MAX;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	4413      	add	r3, r2
 800a56a:	4a0c      	ldr	r2, [pc, #48]	; (800a59c <expandPDMbuffer+0x7c>)
 800a56c:	601a      	str	r2, [r3, #0]
 800a56e:	e006      	b.n	800a57e <expandPDMbuffer+0x5e>
        }
        else
        {
            outBuffer[bitIndex] = INT16_MIN;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	4413      	add	r3, r2
 800a578:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 800a57c:	601a      	str	r2, [r3, #0]
        }

        modifiedCurrentWord = modifiedCurrentWord << 1;
 800a57e:	897b      	ldrh	r3, [r7, #10]
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	817b      	strh	r3, [r7, #10]
        bitIndex++)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3301      	adds	r3, #1
 800a588:	60fb      	str	r3, [r7, #12]
    for(bitIndex=0;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a590:	d3d7      	bcc.n	800a542 <expandPDMbuffer+0x22>
    }
}
 800a592:	bf00      	nop
 800a594:	bf00      	nop
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	46fffe00 	.word	0x46fffe00

0800a5a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	4912      	ldr	r1, [pc, #72]	; (800a5f0 <MX_USB_DEVICE_Init+0x50>)
 800a5a8:	4812      	ldr	r0, [pc, #72]	; (800a5f4 <MX_USB_DEVICE_Init+0x54>)
 800a5aa:	f7fb ffd1 	bl	8006550 <USBD_Init>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5b4:	f7f6 f970 	bl	8000898 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5b8:	490f      	ldr	r1, [pc, #60]	; (800a5f8 <MX_USB_DEVICE_Init+0x58>)
 800a5ba:	480e      	ldr	r0, [pc, #56]	; (800a5f4 <MX_USB_DEVICE_Init+0x54>)
 800a5bc:	f7fb fff8 	bl	80065b0 <USBD_RegisterClass>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d001      	beq.n	800a5ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5c6:	f7f6 f967 	bl	8000898 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5ca:	490c      	ldr	r1, [pc, #48]	; (800a5fc <MX_USB_DEVICE_Init+0x5c>)
 800a5cc:	4809      	ldr	r0, [pc, #36]	; (800a5f4 <MX_USB_DEVICE_Init+0x54>)
 800a5ce:	f7fb fee9 	bl	80063a4 <USBD_CDC_RegisterInterface>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5d8:	f7f6 f95e 	bl	8000898 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5dc:	4805      	ldr	r0, [pc, #20]	; (800a5f4 <MX_USB_DEVICE_Init+0x54>)
 800a5de:	f7fc f81d 	bl	800661c <USBD_Start>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d001      	beq.n	800a5ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a5e8:	f7f6 f956 	bl	8000898 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a5ec:	bf00      	nop
 800a5ee:	bd80      	pop	{r7, pc}
 800a5f0:	200010b0 	.word	0x200010b0
 800a5f4:	20008c68 	.word	0x20008c68
 800a5f8:	20000018 	.word	0x20000018
 800a5fc:	2000109c 	.word	0x2000109c

0800a600 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a604:	2200      	movs	r2, #0
 800a606:	4905      	ldr	r1, [pc, #20]	; (800a61c <CDC_Init_FS+0x1c>)
 800a608:	4805      	ldr	r0, [pc, #20]	; (800a620 <CDC_Init_FS+0x20>)
 800a60a:	f7fb fee5 	bl	80063d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a60e:	4905      	ldr	r1, [pc, #20]	; (800a624 <CDC_Init_FS+0x24>)
 800a610:	4803      	ldr	r0, [pc, #12]	; (800a620 <CDC_Init_FS+0x20>)
 800a612:	f7fb ff03 	bl	800641c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a616:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a618:	4618      	mov	r0, r3
 800a61a:	bd80      	pop	{r7, pc}
 800a61c:	20009744 	.word	0x20009744
 800a620:	20008c68 	.word	0x20008c68
 800a624:	20008f44 	.word	0x20008f44

0800a628 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a62c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a62e:	4618      	mov	r0, r3
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a638:	b480      	push	{r7}
 800a63a:	b083      	sub	sp, #12
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	6039      	str	r1, [r7, #0]
 800a642:	71fb      	strb	r3, [r7, #7]
 800a644:	4613      	mov	r3, r2
 800a646:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a648:	79fb      	ldrb	r3, [r7, #7]
 800a64a:	2b23      	cmp	r3, #35	; 0x23
 800a64c:	d84a      	bhi.n	800a6e4 <CDC_Control_FS+0xac>
 800a64e:	a201      	add	r2, pc, #4	; (adr r2, 800a654 <CDC_Control_FS+0x1c>)
 800a650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a654:	0800a6e5 	.word	0x0800a6e5
 800a658:	0800a6e5 	.word	0x0800a6e5
 800a65c:	0800a6e5 	.word	0x0800a6e5
 800a660:	0800a6e5 	.word	0x0800a6e5
 800a664:	0800a6e5 	.word	0x0800a6e5
 800a668:	0800a6e5 	.word	0x0800a6e5
 800a66c:	0800a6e5 	.word	0x0800a6e5
 800a670:	0800a6e5 	.word	0x0800a6e5
 800a674:	0800a6e5 	.word	0x0800a6e5
 800a678:	0800a6e5 	.word	0x0800a6e5
 800a67c:	0800a6e5 	.word	0x0800a6e5
 800a680:	0800a6e5 	.word	0x0800a6e5
 800a684:	0800a6e5 	.word	0x0800a6e5
 800a688:	0800a6e5 	.word	0x0800a6e5
 800a68c:	0800a6e5 	.word	0x0800a6e5
 800a690:	0800a6e5 	.word	0x0800a6e5
 800a694:	0800a6e5 	.word	0x0800a6e5
 800a698:	0800a6e5 	.word	0x0800a6e5
 800a69c:	0800a6e5 	.word	0x0800a6e5
 800a6a0:	0800a6e5 	.word	0x0800a6e5
 800a6a4:	0800a6e5 	.word	0x0800a6e5
 800a6a8:	0800a6e5 	.word	0x0800a6e5
 800a6ac:	0800a6e5 	.word	0x0800a6e5
 800a6b0:	0800a6e5 	.word	0x0800a6e5
 800a6b4:	0800a6e5 	.word	0x0800a6e5
 800a6b8:	0800a6e5 	.word	0x0800a6e5
 800a6bc:	0800a6e5 	.word	0x0800a6e5
 800a6c0:	0800a6e5 	.word	0x0800a6e5
 800a6c4:	0800a6e5 	.word	0x0800a6e5
 800a6c8:	0800a6e5 	.word	0x0800a6e5
 800a6cc:	0800a6e5 	.word	0x0800a6e5
 800a6d0:	0800a6e5 	.word	0x0800a6e5
 800a6d4:	0800a6e5 	.word	0x0800a6e5
 800a6d8:	0800a6e5 	.word	0x0800a6e5
 800a6dc:	0800a6e5 	.word	0x0800a6e5
 800a6e0:	0800a6e5 	.word	0x0800a6e5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6e4:	bf00      	nop
  }

  return (USBD_OK);
 800a6e6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b082      	sub	sp, #8
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6fe:	6879      	ldr	r1, [r7, #4]
 800a700:	4805      	ldr	r0, [pc, #20]	; (800a718 <CDC_Receive_FS+0x24>)
 800a702:	f7fb fe8b 	bl	800641c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a706:	4804      	ldr	r0, [pc, #16]	; (800a718 <CDC_Receive_FS+0x24>)
 800a708:	f7fb feec 	bl	80064e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a70c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	20008c68 	.word	0x20008c68

0800a71c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a728:	2300      	movs	r3, #0
 800a72a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a72c:	4b0d      	ldr	r3, [pc, #52]	; (800a764 <CDC_Transmit_FS+0x48>)
 800a72e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a732:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a73e:	2301      	movs	r3, #1
 800a740:	e00b      	b.n	800a75a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a742:	887b      	ldrh	r3, [r7, #2]
 800a744:	461a      	mov	r2, r3
 800a746:	6879      	ldr	r1, [r7, #4]
 800a748:	4806      	ldr	r0, [pc, #24]	; (800a764 <CDC_Transmit_FS+0x48>)
 800a74a:	f7fb fe45 	bl	80063d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a74e:	4805      	ldr	r0, [pc, #20]	; (800a764 <CDC_Transmit_FS+0x48>)
 800a750:	f7fb fe82 	bl	8006458 <USBD_CDC_TransmitPacket>
 800a754:	4603      	mov	r3, r0
 800a756:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a758:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3710      	adds	r7, #16
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
 800a762:	bf00      	nop
 800a764:	20008c68 	.word	0x20008c68

0800a768 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a768:	b480      	push	{r7}
 800a76a:	b087      	sub	sp, #28
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	4613      	mov	r3, r2
 800a774:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a776:	2300      	movs	r3, #0
 800a778:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a77a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	371c      	adds	r7, #28
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr
	...

0800a78c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	4603      	mov	r3, r0
 800a794:	6039      	str	r1, [r7, #0]
 800a796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	2212      	movs	r2, #18
 800a79c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a79e:	4b03      	ldr	r3, [pc, #12]	; (800a7ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr
 800a7ac:	200010cc 	.word	0x200010cc

0800a7b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b083      	sub	sp, #12
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	6039      	str	r1, [r7, #0]
 800a7ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	2204      	movs	r2, #4
 800a7c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7c2:	4b03      	ldr	r3, [pc, #12]	; (800a7d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	200010e0 	.word	0x200010e0

0800a7d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	4603      	mov	r3, r0
 800a7dc:	6039      	str	r1, [r7, #0]
 800a7de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7e0:	79fb      	ldrb	r3, [r7, #7]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d105      	bne.n	800a7f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4907      	ldr	r1, [pc, #28]	; (800a808 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ea:	4808      	ldr	r0, [pc, #32]	; (800a80c <USBD_FS_ProductStrDescriptor+0x38>)
 800a7ec:	f7fd f8c2 	bl	8007974 <USBD_GetString>
 800a7f0:	e004      	b.n	800a7fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	4904      	ldr	r1, [pc, #16]	; (800a808 <USBD_FS_ProductStrDescriptor+0x34>)
 800a7f6:	4805      	ldr	r0, [pc, #20]	; (800a80c <USBD_FS_ProductStrDescriptor+0x38>)
 800a7f8:	f7fd f8bc 	bl	8007974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7fc:	4b02      	ldr	r3, [pc, #8]	; (800a808 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20009f44 	.word	0x20009f44
 800a80c:	0800b454 	.word	0x0800b454

0800a810 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a81c:	683a      	ldr	r2, [r7, #0]
 800a81e:	4904      	ldr	r1, [pc, #16]	; (800a830 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a820:	4804      	ldr	r0, [pc, #16]	; (800a834 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a822:	f7fd f8a7 	bl	8007974 <USBD_GetString>
  return USBD_StrDesc;
 800a826:	4b02      	ldr	r3, [pc, #8]	; (800a830 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3708      	adds	r7, #8
 800a82c:	46bd      	mov	sp, r7
 800a82e:	bd80      	pop	{r7, pc}
 800a830:	20009f44 	.word	0x20009f44
 800a834:	0800b46c 	.word	0x0800b46c

0800a838 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	4603      	mov	r3, r0
 800a840:	6039      	str	r1, [r7, #0]
 800a842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	221a      	movs	r2, #26
 800a848:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a84a:	f000 f843 	bl	800a8d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a84e:	4b02      	ldr	r3, [pc, #8]	; (800a858 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a850:	4618      	mov	r0, r3
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	200010e4 	.word	0x200010e4

0800a85c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	4603      	mov	r3, r0
 800a864:	6039      	str	r1, [r7, #0]
 800a866:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d105      	bne.n	800a87a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	4907      	ldr	r1, [pc, #28]	; (800a890 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a872:	4808      	ldr	r0, [pc, #32]	; (800a894 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a874:	f7fd f87e 	bl	8007974 <USBD_GetString>
 800a878:	e004      	b.n	800a884 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a87a:	683a      	ldr	r2, [r7, #0]
 800a87c:	4904      	ldr	r1, [pc, #16]	; (800a890 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a87e:	4805      	ldr	r0, [pc, #20]	; (800a894 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a880:	f7fd f878 	bl	8007974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a884:	4b02      	ldr	r3, [pc, #8]	; (800a890 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a886:	4618      	mov	r0, r3
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop
 800a890:	20009f44 	.word	0x20009f44
 800a894:	0800b480 	.word	0x0800b480

0800a898 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6039      	str	r1, [r7, #0]
 800a8a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8a4:	79fb      	ldrb	r3, [r7, #7]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d105      	bne.n	800a8b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	4907      	ldr	r1, [pc, #28]	; (800a8cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ae:	4808      	ldr	r0, [pc, #32]	; (800a8d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8b0:	f7fd f860 	bl	8007974 <USBD_GetString>
 800a8b4:	e004      	b.n	800a8c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8b6:	683a      	ldr	r2, [r7, #0]
 800a8b8:	4904      	ldr	r1, [pc, #16]	; (800a8cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ba:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8bc:	f7fd f85a 	bl	8007974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8c0:	4b02      	ldr	r3, [pc, #8]	; (800a8cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3708      	adds	r7, #8
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20009f44 	.word	0x20009f44
 800a8d0:	0800b48c 	.word	0x0800b48c

0800a8d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b084      	sub	sp, #16
 800a8d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8da:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <Get_SerialNum+0x44>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8e0:	4b0e      	ldr	r3, [pc, #56]	; (800a91c <Get_SerialNum+0x48>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8e6:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <Get_SerialNum+0x4c>)
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d009      	beq.n	800a90e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8fa:	2208      	movs	r2, #8
 800a8fc:	4909      	ldr	r1, [pc, #36]	; (800a924 <Get_SerialNum+0x50>)
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 f814 	bl	800a92c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a904:	2204      	movs	r2, #4
 800a906:	4908      	ldr	r1, [pc, #32]	; (800a928 <Get_SerialNum+0x54>)
 800a908:	68b8      	ldr	r0, [r7, #8]
 800a90a:	f000 f80f 	bl	800a92c <IntToUnicode>
  }
}
 800a90e:	bf00      	nop
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	1fff7a10 	.word	0x1fff7a10
 800a91c:	1fff7a14 	.word	0x1fff7a14
 800a920:	1fff7a18 	.word	0x1fff7a18
 800a924:	200010e6 	.word	0x200010e6
 800a928:	200010f6 	.word	0x200010f6

0800a92c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b087      	sub	sp, #28
 800a930:	af00      	add	r7, sp, #0
 800a932:	60f8      	str	r0, [r7, #12]
 800a934:	60b9      	str	r1, [r7, #8]
 800a936:	4613      	mov	r3, r2
 800a938:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a93e:	2300      	movs	r3, #0
 800a940:	75fb      	strb	r3, [r7, #23]
 800a942:	e027      	b.n	800a994 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	0f1b      	lsrs	r3, r3, #28
 800a948:	2b09      	cmp	r3, #9
 800a94a:	d80b      	bhi.n	800a964 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	0f1b      	lsrs	r3, r3, #28
 800a950:	b2da      	uxtb	r2, r3
 800a952:	7dfb      	ldrb	r3, [r7, #23]
 800a954:	005b      	lsls	r3, r3, #1
 800a956:	4619      	mov	r1, r3
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	440b      	add	r3, r1
 800a95c:	3230      	adds	r2, #48	; 0x30
 800a95e:	b2d2      	uxtb	r2, r2
 800a960:	701a      	strb	r2, [r3, #0]
 800a962:	e00a      	b.n	800a97a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	0f1b      	lsrs	r3, r3, #28
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	7dfb      	ldrb	r3, [r7, #23]
 800a96c:	005b      	lsls	r3, r3, #1
 800a96e:	4619      	mov	r1, r3
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	440b      	add	r3, r1
 800a974:	3237      	adds	r2, #55	; 0x37
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a980:	7dfb      	ldrb	r3, [r7, #23]
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	3301      	adds	r3, #1
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	4413      	add	r3, r2
 800a98a:	2200      	movs	r2, #0
 800a98c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	3301      	adds	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
 800a994:	7dfa      	ldrb	r2, [r7, #23]
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d3d3      	bcc.n	800a944 <IntToUnicode+0x18>
  }
}
 800a99c:	bf00      	nop
 800a99e:	bf00      	nop
 800a9a0:	371c      	adds	r7, #28
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
	...

0800a9ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b08a      	sub	sp, #40	; 0x28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9b4:	f107 0314 	add.w	r3, r7, #20
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]
 800a9bc:	605a      	str	r2, [r3, #4]
 800a9be:	609a      	str	r2, [r3, #8]
 800a9c0:	60da      	str	r2, [r3, #12]
 800a9c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9cc:	d147      	bne.n	800aa5e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	613b      	str	r3, [r7, #16]
 800a9d2:	4b25      	ldr	r3, [pc, #148]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800a9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d6:	4a24      	ldr	r2, [pc, #144]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800a9d8:	f043 0301 	orr.w	r3, r3, #1
 800a9dc:	6313      	str	r3, [r2, #48]	; 0x30
 800a9de:	4b22      	ldr	r3, [pc, #136]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800a9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	613b      	str	r3, [r7, #16]
 800a9e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a9ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9f8:	f107 0314 	add.w	r3, r7, #20
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	481b      	ldr	r0, [pc, #108]	; (800aa6c <HAL_PCD_MspInit+0xc0>)
 800aa00:	f7f6 fcfe 	bl	8001400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aa04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800aa08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa0a:	2302      	movs	r3, #2
 800aa0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa12:	2303      	movs	r3, #3
 800aa14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa16:	230a      	movs	r3, #10
 800aa18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa1a:	f107 0314 	add.w	r3, r7, #20
 800aa1e:	4619      	mov	r1, r3
 800aa20:	4812      	ldr	r0, [pc, #72]	; (800aa6c <HAL_PCD_MspInit+0xc0>)
 800aa22:	f7f6 fced 	bl	8001400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aa26:	4b10      	ldr	r3, [pc, #64]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800aa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2a:	4a0f      	ldr	r2, [pc, #60]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800aa2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa30:	6353      	str	r3, [r2, #52]	; 0x34
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800aa38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa3a:	4a0b      	ldr	r2, [pc, #44]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800aa3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aa40:	6453      	str	r3, [r2, #68]	; 0x44
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <HAL_PCD_MspInit+0xbc>)
 800aa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800aa4e:	2200      	movs	r2, #0
 800aa50:	2105      	movs	r1, #5
 800aa52:	2043      	movs	r0, #67	; 0x43
 800aa54:	f7f6 f92d 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aa58:	2043      	movs	r0, #67	; 0x43
 800aa5a:	f7f6 f946 	bl	8000cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aa5e:	bf00      	nop
 800aa60:	3728      	adds	r7, #40	; 0x28
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
 800aa66:	bf00      	nop
 800aa68:	40023800 	.word	0x40023800
 800aa6c:	40020000 	.word	0x40020000

0800aa70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aa84:	4619      	mov	r1, r3
 800aa86:	4610      	mov	r0, r2
 800aa88:	f7fb fe15 	bl	80066b6 <USBD_LL_SetupStage>
}
 800aa8c:	bf00      	nop
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}

0800aa94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b082      	sub	sp, #8
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aaa6:	78fa      	ldrb	r2, [r7, #3]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	00db      	lsls	r3, r3, #3
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	440b      	add	r3, r1
 800aab4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	78fb      	ldrb	r3, [r7, #3]
 800aabc:	4619      	mov	r1, r3
 800aabe:	f7fb fe4f 	bl	8006760 <USBD_LL_DataOutStage>
}
 800aac2:	bf00      	nop
 800aac4:	3708      	adds	r7, #8
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b082      	sub	sp, #8
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	460b      	mov	r3, r1
 800aad4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aadc:	78fa      	ldrb	r2, [r7, #3]
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	4613      	mov	r3, r2
 800aae2:	00db      	lsls	r3, r3, #3
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	440b      	add	r3, r1
 800aaea:	334c      	adds	r3, #76	; 0x4c
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	78fb      	ldrb	r3, [r7, #3]
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	f7fb fee8 	bl	80068c6 <USBD_LL_DataInStage>
}
 800aaf6:	bf00      	nop
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fc f81c 	bl	8006b4a <USBD_LL_SOF>
}
 800ab12:	bf00      	nop
 800ab14:	3708      	adds	r7, #8
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}

0800ab1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1a:	b580      	push	{r7, lr}
 800ab1c:	b084      	sub	sp, #16
 800ab1e:	af00      	add	r7, sp, #0
 800ab20:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab22:	2301      	movs	r3, #1
 800ab24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d102      	bne.n	800ab34 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	73fb      	strb	r3, [r7, #15]
 800ab32:	e008      	b.n	800ab46 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	2b02      	cmp	r3, #2
 800ab3a:	d102      	bne.n	800ab42 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	73fb      	strb	r3, [r7, #15]
 800ab40:	e001      	b.n	800ab46 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ab42:	f7f5 fea9 	bl	8000898 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab4c:	7bfa      	ldrb	r2, [r7, #15]
 800ab4e:	4611      	mov	r1, r2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7fb ffbc 	bl	8006ace <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fb ff64 	bl	8006a2a <USBD_LL_Reset>
}
 800ab62:	bf00      	nop
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
	...

0800ab6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f7fb ffb7 	bl	8006aee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	6812      	ldr	r2, [r2, #0]
 800ab8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab92:	f043 0301 	orr.w	r3, r3, #1
 800ab96:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a1b      	ldr	r3, [r3, #32]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aba0:	4b04      	ldr	r3, [pc, #16]	; (800abb4 <HAL_PCD_SuspendCallback+0x48>)
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	4a03      	ldr	r2, [pc, #12]	; (800abb4 <HAL_PCD_SuspendCallback+0x48>)
 800aba6:	f043 0306 	orr.w	r3, r3, #6
 800abaa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800abac:	bf00      	nop
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	e000ed00 	.word	0xe000ed00

0800abb8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b082      	sub	sp, #8
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fb ffa7 	bl	8006b1a <USBD_LL_Resume>
}
 800abcc:	bf00      	nop
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800abe6:	78fa      	ldrb	r2, [r7, #3]
 800abe8:	4611      	mov	r1, r2
 800abea:	4618      	mov	r0, r3
 800abec:	f7fb ffff 	bl	8006bee <USBD_LL_IsoOUTIncomplete>
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	460b      	mov	r3, r1
 800ac02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac0a:	78fa      	ldrb	r2, [r7, #3]
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fb ffbb 	bl	8006b8a <USBD_LL_IsoINIncomplete>
}
 800ac14:	bf00      	nop
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b082      	sub	sp, #8
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fc f811 	bl	8006c52 <USBD_LL_DevConnected>
}
 800ac30:	bf00      	nop
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ac46:	4618      	mov	r0, r3
 800ac48:	f7fc f80e 	bl	8006c68 <USBD_LL_DevDisconnected>
}
 800ac4c:	bf00      	nop
 800ac4e:	3708      	adds	r7, #8
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d13c      	bne.n	800acde <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ac64:	4a20      	ldr	r2, [pc, #128]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	4a1e      	ldr	r2, [pc, #120]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac70:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ac74:	4b1c      	ldr	r3, [pc, #112]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ac7a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ac7c:	4b1a      	ldr	r3, [pc, #104]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac7e:	2204      	movs	r2, #4
 800ac80:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ac82:	4b19      	ldr	r3, [pc, #100]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac84:	2202      	movs	r2, #2
 800ac86:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ac88:	4b17      	ldr	r3, [pc, #92]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ac8e:	4b16      	ldr	r3, [pc, #88]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac90:	2202      	movs	r2, #2
 800ac92:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac94:	4b14      	ldr	r3, [pc, #80]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ac9a:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <USBD_LL_Init+0x94>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aca0:	4b11      	ldr	r3, [pc, #68]	; (800ace8 <USBD_LL_Init+0x94>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aca6:	4b10      	ldr	r3, [pc, #64]	; (800ace8 <USBD_LL_Init+0x94>)
 800aca8:	2201      	movs	r2, #1
 800acaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800acac:	4b0e      	ldr	r3, [pc, #56]	; (800ace8 <USBD_LL_Init+0x94>)
 800acae:	2200      	movs	r2, #0
 800acb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800acb2:	480d      	ldr	r0, [pc, #52]	; (800ace8 <USBD_LL_Init+0x94>)
 800acb4:	f7f7 fafa 	bl	80022ac <HAL_PCD_Init>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800acbe:	f7f5 fdeb 	bl	8000898 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800acc2:	2180      	movs	r1, #128	; 0x80
 800acc4:	4808      	ldr	r0, [pc, #32]	; (800ace8 <USBD_LL_Init+0x94>)
 800acc6:	f7f8 fd52 	bl	800376e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800acca:	2240      	movs	r2, #64	; 0x40
 800accc:	2100      	movs	r1, #0
 800acce:	4806      	ldr	r0, [pc, #24]	; (800ace8 <USBD_LL_Init+0x94>)
 800acd0:	f7f8 fd06 	bl	80036e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800acd4:	2280      	movs	r2, #128	; 0x80
 800acd6:	2101      	movs	r1, #1
 800acd8:	4803      	ldr	r0, [pc, #12]	; (800ace8 <USBD_LL_Init+0x94>)
 800acda:	f7f8 fd01 	bl	80036e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	2000a144 	.word	0x2000a144

0800acec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf8:	2300      	movs	r3, #0
 800acfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7f7 fbef 	bl	80024e6 <HAL_PCD_Start>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad0c:	7bfb      	ldrb	r3, [r7, #15]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f000 f942 	bl	800af98 <USBD_Get_USB_Status>
 800ad14:	4603      	mov	r3, r0
 800ad16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad18:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3710      	adds	r7, #16
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ad22:	b580      	push	{r7, lr}
 800ad24:	b084      	sub	sp, #16
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4603      	mov	r3, r0
 800ad32:	70fb      	strb	r3, [r7, #3]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70bb      	strb	r3, [r7, #2]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad4a:	78bb      	ldrb	r3, [r7, #2]
 800ad4c:	883a      	ldrh	r2, [r7, #0]
 800ad4e:	78f9      	ldrb	r1, [r7, #3]
 800ad50:	f7f8 f8c0 	bl	8002ed4 <HAL_PCD_EP_Open>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad58:	7bfb      	ldrb	r3, [r7, #15]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f000 f91c 	bl	800af98 <USBD_Get_USB_Status>
 800ad60:	4603      	mov	r3, r0
 800ad62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b084      	sub	sp, #16
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
 800ad76:	460b      	mov	r3, r1
 800ad78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ad88:	78fa      	ldrb	r2, [r7, #3]
 800ad8a:	4611      	mov	r1, r2
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f7f8 f909 	bl	8002fa4 <HAL_PCD_EP_Close>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 f8fd 	bl	800af98 <USBD_Get_USB_Status>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7f8 f9e1 	bl	8003192 <HAL_PCD_EP_SetStall>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f8de 	bl	800af98 <USBD_Get_USB_Status>
 800addc:	4603      	mov	r3, r0
 800adde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b084      	sub	sp, #16
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	460b      	mov	r3, r1
 800adf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adfa:	2300      	movs	r3, #0
 800adfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae04:	78fa      	ldrb	r2, [r7, #3]
 800ae06:	4611      	mov	r1, r2
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7f8 fa26 	bl	800325a <HAL_PCD_EP_ClrStall>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae12:	7bfb      	ldrb	r3, [r7, #15]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f000 f8bf 	bl	800af98 <USBD_Get_USB_Status>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	3710      	adds	r7, #16
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b085      	sub	sp, #20
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ae3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	da0b      	bge.n	800ae5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ae44:	78fb      	ldrb	r3, [r7, #3]
 800ae46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae4a:	68f9      	ldr	r1, [r7, #12]
 800ae4c:	4613      	mov	r3, r2
 800ae4e:	00db      	lsls	r3, r3, #3
 800ae50:	4413      	add	r3, r2
 800ae52:	009b      	lsls	r3, r3, #2
 800ae54:	440b      	add	r3, r1
 800ae56:	333e      	adds	r3, #62	; 0x3e
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	e00b      	b.n	800ae74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ae5c:	78fb      	ldrb	r3, [r7, #3]
 800ae5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	4613      	mov	r3, r2
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	4413      	add	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	440b      	add	r3, r1
 800ae6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ae72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b084      	sub	sp, #16
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ae9a:	78fa      	ldrb	r2, [r7, #3]
 800ae9c:	4611      	mov	r1, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f7 fff3 	bl	8002e8a <HAL_PCD_SetAddress>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 f874 	bl	800af98 <USBD_Get_USB_Status>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3710      	adds	r7, #16
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b086      	sub	sp, #24
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	60f8      	str	r0, [r7, #12]
 800aec6:	607a      	str	r2, [r7, #4]
 800aec8:	603b      	str	r3, [r7, #0]
 800aeca:	460b      	mov	r3, r1
 800aecc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aedc:	7af9      	ldrb	r1, [r7, #11]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	f7f8 f90c 	bl	80030fe <HAL_PCD_EP_Transmit>
 800aee6:	4603      	mov	r3, r0
 800aee8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeea:	7dfb      	ldrb	r3, [r7, #23]
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 f853 	bl	800af98 <USBD_Get_USB_Status>
 800aef2:	4603      	mov	r3, r0
 800aef4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aef6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3718      	adds	r7, #24
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b086      	sub	sp, #24
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	607a      	str	r2, [r7, #4]
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	460b      	mov	r3, r1
 800af0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800af1e:	7af9      	ldrb	r1, [r7, #11]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	f7f8 f888 	bl	8003038 <HAL_PCD_EP_Receive>
 800af28:	4603      	mov	r3, r0
 800af2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af2c:	7dfb      	ldrb	r3, [r7, #23]
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 f832 	bl	800af98 <USBD_Get_USB_Status>
 800af34:	4603      	mov	r3, r0
 800af36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af38:	7dbb      	ldrb	r3, [r7, #22]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3718      	adds	r7, #24
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800af54:	78fa      	ldrb	r2, [r7, #3]
 800af56:	4611      	mov	r1, r2
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f8 f8b8 	bl	80030ce <HAL_PCD_EP_GetRxCount>
 800af5e:	4603      	mov	r3, r0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800af70:	4b03      	ldr	r3, [pc, #12]	; (800af80 <USBD_static_malloc+0x18>)
}
 800af72:	4618      	mov	r0, r3
 800af74:	370c      	adds	r7, #12
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	2000a650 	.word	0x2000a650

0800af84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]

}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	4603      	mov	r3, r0
 800afa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d817      	bhi.n	800afdc <USBD_Get_USB_Status+0x44>
 800afac:	a201      	add	r2, pc, #4	; (adr r2, 800afb4 <USBD_Get_USB_Status+0x1c>)
 800afae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb2:	bf00      	nop
 800afb4:	0800afc5 	.word	0x0800afc5
 800afb8:	0800afcb 	.word	0x0800afcb
 800afbc:	0800afd1 	.word	0x0800afd1
 800afc0:	0800afd7 	.word	0x0800afd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800afc4:	2300      	movs	r3, #0
 800afc6:	73fb      	strb	r3, [r7, #15]
    break;
 800afc8:	e00b      	b.n	800afe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800afca:	2303      	movs	r3, #3
 800afcc:	73fb      	strb	r3, [r7, #15]
    break;
 800afce:	e008      	b.n	800afe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800afd0:	2301      	movs	r3, #1
 800afd2:	73fb      	strb	r3, [r7, #15]
    break;
 800afd4:	e005      	b.n	800afe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800afd6:	2303      	movs	r3, #3
 800afd8:	73fb      	strb	r3, [r7, #15]
    break;
 800afda:	e002      	b.n	800afe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800afdc:	2303      	movs	r3, #3
 800afde:	73fb      	strb	r3, [r7, #15]
    break;
 800afe0:	bf00      	nop
  }
  return usb_status;
 800afe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <arm_fir_decimate_init_f32>:
 800aff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aff2:	9f07      	ldr	r7, [sp, #28]
 800aff4:	fbb7 f4f2 	udiv	r4, r7, r2
 800aff8:	fb02 7414 	mls	r4, r2, r4, r7
 800affc:	b98c      	cbnz	r4, 800b022 <arm_fir_decimate_init_f32+0x32>
 800affe:	4616      	mov	r6, r2
 800b000:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800b004:	3a01      	subs	r2, #1
 800b006:	443a      	add	r2, r7
 800b008:	4605      	mov	r5, r0
 800b00a:	8041      	strh	r1, [r0, #2]
 800b00c:	6043      	str	r3, [r0, #4]
 800b00e:	0092      	lsls	r2, r2, #2
 800b010:	4621      	mov	r1, r4
 800b012:	9806      	ldr	r0, [sp, #24]
 800b014:	f000 f9f6 	bl	800b404 <memset>
 800b018:	9b06      	ldr	r3, [sp, #24]
 800b01a:	60ab      	str	r3, [r5, #8]
 800b01c:	702e      	strb	r6, [r5, #0]
 800b01e:	4620      	mov	r0, r4
 800b020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b022:	f06f 0001 	mvn.w	r0, #1
 800b026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b028 <arm_fir_decimate_f32>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	ed2d 8b08 	vpush	{d8-d11}
 800b030:	4683      	mov	fp, r0
 800b032:	b08d      	sub	sp, #52	; 0x34
 800b034:	8840      	ldrh	r0, [r0, #2]
 800b036:	9009      	str	r0, [sp, #36]	; 0x24
 800b038:	4605      	mov	r5, r0
 800b03a:	f89b 0000 	ldrb.w	r0, [fp]
 800b03e:	fbb3 f3f0 	udiv	r3, r3, r0
 800b042:	089c      	lsrs	r4, r3, #2
 800b044:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 800b048:	f8db 6008 	ldr.w	r6, [fp, #8]
 800b04c:	930b      	str	r3, [sp, #44]	; 0x2c
 800b04e:	f105 4980 	add.w	r9, r5, #1073741824	; 0x40000000
 800b052:	f109 39ff 	add.w	r9, r9, #4294967295
 800b056:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b05a:	940a      	str	r4, [sp, #40]	; 0x28
 800b05c:	9208      	str	r2, [sp, #32]
 800b05e:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	2c00      	cmp	r4, #0
 800b066:	f000 80fa 	beq.w	800b25e <arm_fir_decimate_f32+0x236>
 800b06a:	4627      	mov	r7, r4
 800b06c:	462c      	mov	r4, r5
 800b06e:	08ad      	lsrs	r5, r5, #2
 800b070:	9505      	str	r5, [sp, #20]
 800b072:	012d      	lsls	r5, r5, #4
 800b074:	442b      	add	r3, r5
 800b076:	4696      	mov	lr, r2
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	f004 0303 	and.w	r3, r4, #3
 800b07e:	f8cd b010 	str.w	fp, [sp, #16]
 800b082:	4602      	mov	r2, r0
 800b084:	9306      	str	r3, [sp, #24]
 800b086:	f10e 0a10 	add.w	sl, lr, #16
 800b08a:	9703      	str	r7, [sp, #12]
 800b08c:	f8cd 9004 	str.w	r9, [sp, #4]
 800b090:	46ab      	mov	fp, r5
 800b092:	464c      	mov	r4, r9
 800b094:	0092      	lsls	r2, r2, #2
 800b096:	4613      	mov	r3, r2
 800b098:	4608      	mov	r0, r1
 800b09a:	f850 5b04 	ldr.w	r5, [r0], #4
 800b09e:	f844 5b04 	str.w	r5, [r4], #4
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	d1f9      	bne.n	800b09a <arm_fir_decimate_f32+0x72>
 800b0a6:	9b04      	ldr	r3, [sp, #16]
 800b0a8:	eddf 5abc 	vldr	s11, [pc, #752]	; 800b39c <arm_fir_decimate_f32+0x374>
 800b0ac:	f893 8000 	ldrb.w	r8, [r3]
 800b0b0:	9b01      	ldr	r3, [sp, #4]
 800b0b2:	9f05      	ldr	r7, [sp, #20]
 800b0b4:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800b0b8:	0092      	lsls	r2, r2, #2
 800b0ba:	eb06 0e08 	add.w	lr, r6, r8
 800b0be:	eb0e 0c08 	add.w	ip, lr, r8
 800b0c2:	4413      	add	r3, r2
 800b0c4:	9301      	str	r3, [sp, #4]
 800b0c6:	4411      	add	r1, r2
 800b0c8:	eb0c 0908 	add.w	r9, ip, r8
 800b0cc:	eeb0 3a65 	vmov.f32	s6, s11
 800b0d0:	eef0 2a65 	vmov.f32	s5, s11
 800b0d4:	eeb0 2a65 	vmov.f32	s4, s11
 800b0d8:	2f00      	cmp	r7, #0
 800b0da:	f000 815b 	beq.w	800b394 <arm_fir_decimate_f32+0x36c>
 800b0de:	9b02      	ldr	r3, [sp, #8]
 800b0e0:	f106 0410 	add.w	r4, r6, #16
 800b0e4:	f103 0510 	add.w	r5, r3, #16
 800b0e8:	f10e 0010 	add.w	r0, lr, #16
 800b0ec:	f10c 0210 	add.w	r2, ip, #16
 800b0f0:	f109 0310 	add.w	r3, r9, #16
 800b0f4:	ed15 6a04 	vldr	s12, [r5, #-16]
 800b0f8:	ed53 3a04 	vldr	s7, [r3, #-16]
 800b0fc:	ed54 ba04 	vldr	s23, [r4, #-16]
 800b100:	ed10 aa04 	vldr	s20, [r0, #-16]
 800b104:	ed12 0a04 	vldr	s0, [r2, #-16]
 800b108:	ed55 6a03 	vldr	s13, [r5, #-12]
 800b10c:	ed52 0a03 	vldr	s1, [r2, #-12]
 800b110:	ed13 4a03 	vldr	s8, [r3, #-12]
 800b114:	ed14 ba03 	vldr	s22, [r4, #-12]
 800b118:	ed50 9a03 	vldr	s19, [r0, #-12]
 800b11c:	ed15 7a02 	vldr	s14, [r5, #-8]
 800b120:	ed53 4a02 	vldr	s9, [r3, #-8]
 800b124:	ed54 aa02 	vldr	s21, [r4, #-8]
 800b128:	ed50 8a02 	vldr	s17, [r0, #-8]
 800b12c:	ed12 1a02 	vldr	s2, [r2, #-8]
 800b130:	ed55 7a01 	vldr	s15, [r5, #-4]
 800b134:	ed14 9a01 	vldr	s18, [r4, #-4]
 800b138:	ed10 8a01 	vldr	s16, [r0, #-4]
 800b13c:	ed52 1a01 	vldr	s3, [r2, #-4]
 800b140:	ed13 5a01 	vldr	s10, [r3, #-4]
 800b144:	ee66 ba2b 	vmul.f32	s23, s12, s23
 800b148:	ee26 aa0a 	vmul.f32	s20, s12, s20
 800b14c:	ee26 0a00 	vmul.f32	s0, s12, s0
 800b150:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b154:	ee3b 2a82 	vadd.f32	s4, s23, s4
 800b158:	ee66 3aa0 	vmul.f32	s7, s13, s1
 800b15c:	ee76 5a25 	vadd.f32	s11, s12, s11
 800b160:	ee26 ba8b 	vmul.f32	s22, s13, s22
 800b164:	ee7a 2a22 	vadd.f32	s5, s20, s5
 800b168:	ee66 9aa9 	vmul.f32	s19, s13, s19
 800b16c:	ee30 3a03 	vadd.f32	s6, s0, s6
 800b170:	ee66 6a84 	vmul.f32	s13, s13, s8
 800b174:	ee33 6a83 	vadd.f32	s12, s7, s6
 800b178:	ee3b 4a02 	vadd.f32	s8, s22, s4
 800b17c:	ee27 3a01 	vmul.f32	s6, s14, s2
 800b180:	ee27 2a2a 	vmul.f32	s4, s14, s21
 800b184:	ee79 0aa2 	vadd.f32	s1, s19, s5
 800b188:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800b18c:	ee67 2a28 	vmul.f32	s5, s14, s17
 800b190:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b194:	ee72 3a04 	vadd.f32	s7, s4, s8
 800b198:	ee73 4a06 	vadd.f32	s9, s6, s12
 800b19c:	ee27 2a89 	vmul.f32	s4, s15, s18
 800b1a0:	ee32 4aa0 	vadd.f32	s8, s5, s1
 800b1a4:	ee27 3aa1 	vmul.f32	s6, s15, s3
 800b1a8:	ee67 2a88 	vmul.f32	s5, s15, s16
 800b1ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b1b0:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b1b4:	3f01      	subs	r7, #1
 800b1b6:	f105 0510 	add.w	r5, r5, #16
 800b1ba:	ee32 2a23 	vadd.f32	s4, s4, s7
 800b1be:	f104 0410 	add.w	r4, r4, #16
 800b1c2:	ee72 2a84 	vadd.f32	s5, s5, s8
 800b1c6:	f100 0010 	add.w	r0, r0, #16
 800b1ca:	ee33 3a24 	vadd.f32	s6, s6, s9
 800b1ce:	f102 0210 	add.w	r2, r2, #16
 800b1d2:	ee77 5a87 	vadd.f32	s11, s15, s14
 800b1d6:	f103 0310 	add.w	r3, r3, #16
 800b1da:	d18b      	bne.n	800b0f4 <arm_fir_decimate_f32+0xcc>
 800b1dc:	9a07      	ldr	r2, [sp, #28]
 800b1de:	445e      	add	r6, fp
 800b1e0:	44de      	add	lr, fp
 800b1e2:	44dc      	add	ip, fp
 800b1e4:	eb09 000b 	add.w	r0, r9, fp
 800b1e8:	9b06      	ldr	r3, [sp, #24]
 800b1ea:	b1db      	cbz	r3, 800b224 <arm_fir_decimate_f32+0x1fc>
 800b1ec:	ecf2 7a01 	vldmia	r2!, {s15}
 800b1f0:	ecb6 5a01 	vldmia	r6!, {s10}
 800b1f4:	ecbe 6a01 	vldmia	lr!, {s12}
 800b1f8:	ecfc 6a01 	vldmia	ip!, {s13}
 800b1fc:	ecb0 7a01 	vldmia	r0!, {s14}
 800b200:	ee27 5a85 	vmul.f32	s10, s15, s10
 800b204:	ee27 6a86 	vmul.f32	s12, s15, s12
 800b208:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b20c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b210:	3b01      	subs	r3, #1
 800b212:	ee32 2a05 	vadd.f32	s4, s4, s10
 800b216:	ee72 2a86 	vadd.f32	s5, s5, s12
 800b21a:	ee33 3a26 	vadd.f32	s6, s6, s13
 800b21e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800b222:	d1e3      	bne.n	800b1ec <arm_fir_decimate_f32+0x1c4>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	ed0a 2a04 	vstr	s4, [sl, #-16]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	ed4a 2a03 	vstr	s5, [sl, #-12]
 800b230:	ed0a 3a02 	vstr	s6, [sl, #-8]
 800b234:	ed4a 5a01 	vstr	s11, [sl, #-4]
 800b238:	eb09 0608 	add.w	r6, r9, r8
 800b23c:	f10a 0a10 	add.w	sl, sl, #16
 800b240:	9303      	str	r3, [sp, #12]
 800b242:	d003      	beq.n	800b24c <arm_fir_decimate_f32+0x224>
 800b244:	9b04      	ldr	r3, [sp, #16]
 800b246:	9c01      	ldr	r4, [sp, #4]
 800b248:	781a      	ldrb	r2, [r3, #0]
 800b24a:	e723      	b.n	800b094 <arm_fir_decimate_f32+0x6c>
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b250:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b254:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b258:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800b25c:	9308      	str	r3, [sp, #32]
 800b25e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d061      	beq.n	800b328 <arm_fir_decimate_f32+0x300>
 800b264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b266:	9802      	ldr	r0, [sp, #8]
 800b268:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b26c:	0895      	lsrs	r5, r2, #2
 800b26e:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800b272:	eb00 0c0e 	add.w	ip, r0, lr
 800b276:	f002 0703 	and.w	r7, r2, #3
 800b27a:	4698      	mov	r8, r3
 800b27c:	f89b 4000 	ldrb.w	r4, [fp]
 800b280:	4648      	mov	r0, r9
 800b282:	4623      	mov	r3, r4
 800b284:	460a      	mov	r2, r1
 800b286:	ecf2 7a01 	vldmia	r2!, {s15}
 800b28a:	3b01      	subs	r3, #1
 800b28c:	ece0 7a01 	vstmia	r0!, {s15}
 800b290:	d1f9      	bne.n	800b286 <arm_fir_decimate_f32+0x25e>
 800b292:	00a4      	lsls	r4, r4, #2
 800b294:	44a1      	add	r9, r4
 800b296:	4421      	add	r1, r4
 800b298:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b39c <arm_fir_decimate_f32+0x374>
 800b29c:	2d00      	cmp	r5, #0
 800b29e:	d076      	beq.n	800b38e <arm_fir_decimate_f32+0x366>
 800b2a0:	9b02      	ldr	r3, [sp, #8]
 800b2a2:	4628      	mov	r0, r5
 800b2a4:	f103 0210 	add.w	r2, r3, #16
 800b2a8:	f106 0310 	add.w	r3, r6, #16
 800b2ac:	ed53 6a04 	vldr	s13, [r3, #-16]
 800b2b0:	ed12 4a04 	vldr	s8, [r2, #-16]
 800b2b4:	ed52 3a03 	vldr	s7, [r2, #-12]
 800b2b8:	ed13 5a03 	vldr	s10, [r3, #-12]
 800b2bc:	ed52 4a02 	vldr	s9, [r2, #-8]
 800b2c0:	ed13 6a02 	vldr	s12, [r3, #-8]
 800b2c4:	ed52 5a01 	vldr	s11, [r2, #-4]
 800b2c8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b2cc:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b2d0:	ee23 5a85 	vmul.f32	s10, s7, s10
 800b2d4:	ee74 6a27 	vadd.f32	s13, s8, s15
 800b2d8:	ee24 6a86 	vmul.f32	s12, s9, s12
 800b2dc:	ee75 6a26 	vadd.f32	s13, s10, s13
 800b2e0:	ee25 7a87 	vmul.f32	s14, s11, s14
 800b2e4:	ee76 7a26 	vadd.f32	s15, s12, s13
 800b2e8:	3801      	subs	r0, #1
 800b2ea:	f102 0210 	add.w	r2, r2, #16
 800b2ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2f2:	f103 0310 	add.w	r3, r3, #16
 800b2f6:	d1d9      	bne.n	800b2ac <arm_fir_decimate_f32+0x284>
 800b2f8:	eb06 020e 	add.w	r2, r6, lr
 800b2fc:	4660      	mov	r0, ip
 800b2fe:	b157      	cbz	r7, 800b316 <arm_fir_decimate_f32+0x2ee>
 800b300:	463b      	mov	r3, r7
 800b302:	ecf0 6a01 	vldmia	r0!, {s13}
 800b306:	ecb2 7a01 	vldmia	r2!, {s14}
 800b30a:	ee26 7a87 	vmul.f32	s14, s13, s14
 800b30e:	3b01      	subs	r3, #1
 800b310:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b314:	d1f5      	bne.n	800b302 <arm_fir_decimate_f32+0x2da>
 800b316:	f89b 3000 	ldrb.w	r3, [fp]
 800b31a:	ecea 7a01 	vstmia	sl!, {s15}
 800b31e:	f1b8 0801 	subs.w	r8, r8, #1
 800b322:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800b326:	d1a9      	bne.n	800b27c <arm_fir_decimate_f32+0x254>
 800b328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b32a:	f8db 4008 	ldr.w	r4, [fp, #8]
 800b32e:	1e59      	subs	r1, r3, #1
 800b330:	088f      	lsrs	r7, r1, #2
 800b332:	d01d      	beq.n	800b370 <arm_fir_decimate_f32+0x348>
 800b334:	f104 0210 	add.w	r2, r4, #16
 800b338:	f106 0310 	add.w	r3, r6, #16
 800b33c:	4638      	mov	r0, r7
 800b33e:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800b342:	f842 5c10 	str.w	r5, [r2, #-16]
 800b346:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800b34a:	f842 5c0c 	str.w	r5, [r2, #-12]
 800b34e:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800b352:	f842 5c08 	str.w	r5, [r2, #-8]
 800b356:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800b35a:	f842 5c04 	str.w	r5, [r2, #-4]
 800b35e:	3801      	subs	r0, #1
 800b360:	f103 0310 	add.w	r3, r3, #16
 800b364:	f102 0210 	add.w	r2, r2, #16
 800b368:	d1e9      	bne.n	800b33e <arm_fir_decimate_f32+0x316>
 800b36a:	013b      	lsls	r3, r7, #4
 800b36c:	441c      	add	r4, r3
 800b36e:	441e      	add	r6, r3
 800b370:	f011 0303 	ands.w	r3, r1, #3
 800b374:	d006      	beq.n	800b384 <arm_fir_decimate_f32+0x35c>
 800b376:	4622      	mov	r2, r4
 800b378:	f856 1b04 	ldr.w	r1, [r6], #4
 800b37c:	f842 1b04 	str.w	r1, [r2], #4
 800b380:	3b01      	subs	r3, #1
 800b382:	d1f9      	bne.n	800b378 <arm_fir_decimate_f32+0x350>
 800b384:	b00d      	add	sp, #52	; 0x34
 800b386:	ecbd 8b08 	vpop	{d8-d11}
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	9802      	ldr	r0, [sp, #8]
 800b390:	4632      	mov	r2, r6
 800b392:	e7b4      	b.n	800b2fe <arm_fir_decimate_f32+0x2d6>
 800b394:	4648      	mov	r0, r9
 800b396:	9a02      	ldr	r2, [sp, #8]
 800b398:	e726      	b.n	800b1e8 <arm_fir_decimate_f32+0x1c0>
 800b39a:	bf00      	nop
 800b39c:	00000000 	.word	0x00000000

0800b3a0 <__libc_init_array>:
 800b3a0:	b570      	push	{r4, r5, r6, lr}
 800b3a2:	4d0d      	ldr	r5, [pc, #52]	; (800b3d8 <__libc_init_array+0x38>)
 800b3a4:	4c0d      	ldr	r4, [pc, #52]	; (800b3dc <__libc_init_array+0x3c>)
 800b3a6:	1b64      	subs	r4, r4, r5
 800b3a8:	10a4      	asrs	r4, r4, #2
 800b3aa:	2600      	movs	r6, #0
 800b3ac:	42a6      	cmp	r6, r4
 800b3ae:	d109      	bne.n	800b3c4 <__libc_init_array+0x24>
 800b3b0:	4d0b      	ldr	r5, [pc, #44]	; (800b3e0 <__libc_init_array+0x40>)
 800b3b2:	4c0c      	ldr	r4, [pc, #48]	; (800b3e4 <__libc_init_array+0x44>)
 800b3b4:	f000 f82e 	bl	800b414 <_init>
 800b3b8:	1b64      	subs	r4, r4, r5
 800b3ba:	10a4      	asrs	r4, r4, #2
 800b3bc:	2600      	movs	r6, #0
 800b3be:	42a6      	cmp	r6, r4
 800b3c0:	d105      	bne.n	800b3ce <__libc_init_array+0x2e>
 800b3c2:	bd70      	pop	{r4, r5, r6, pc}
 800b3c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3c8:	4798      	blx	r3
 800b3ca:	3601      	adds	r6, #1
 800b3cc:	e7ee      	b.n	800b3ac <__libc_init_array+0xc>
 800b3ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3d2:	4798      	blx	r3
 800b3d4:	3601      	adds	r6, #1
 800b3d6:	e7f2      	b.n	800b3be <__libc_init_array+0x1e>
 800b3d8:	0800b4bc 	.word	0x0800b4bc
 800b3dc:	0800b4bc 	.word	0x0800b4bc
 800b3e0:	0800b4bc 	.word	0x0800b4bc
 800b3e4:	0800b4c0 	.word	0x0800b4c0

0800b3e8 <memcpy>:
 800b3e8:	440a      	add	r2, r1
 800b3ea:	4291      	cmp	r1, r2
 800b3ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800b3f0:	d100      	bne.n	800b3f4 <memcpy+0xc>
 800b3f2:	4770      	bx	lr
 800b3f4:	b510      	push	{r4, lr}
 800b3f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b3fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3fe:	4291      	cmp	r1, r2
 800b400:	d1f9      	bne.n	800b3f6 <memcpy+0xe>
 800b402:	bd10      	pop	{r4, pc}

0800b404 <memset>:
 800b404:	4402      	add	r2, r0
 800b406:	4603      	mov	r3, r0
 800b408:	4293      	cmp	r3, r2
 800b40a:	d100      	bne.n	800b40e <memset+0xa>
 800b40c:	4770      	bx	lr
 800b40e:	f803 1b01 	strb.w	r1, [r3], #1
 800b412:	e7f9      	b.n	800b408 <memset+0x4>

0800b414 <_init>:
 800b414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b416:	bf00      	nop
 800b418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b41a:	bc08      	pop	{r3}
 800b41c:	469e      	mov	lr, r3
 800b41e:	4770      	bx	lr

0800b420 <_fini>:
 800b420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b422:	bf00      	nop
 800b424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b426:	bc08      	pop	{r3}
 800b428:	469e      	mov	lr, r3
 800b42a:	4770      	bx	lr
