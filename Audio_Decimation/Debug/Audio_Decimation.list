
Audio_Decimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000088a4  0800c274  0800c274  0001c274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b18  08014b18  00031150  2**0
                  CONTENTS
  4 .ARM          00000008  08014b18  08014b18  00024b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b20  08014b20  00031150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b20  08014b20  00024b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b24  08014b24  00024b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001150  20000000  08014b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00031150  2**0
                  CONTENTS
 10 .bss          0000ad04  20001150  20001150  00031150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000be54  2000be54  00031150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00031150  2**0
                  CONTENTS, READONLY
 13 .comment      000000b1  00000000  00000000  00031180  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d425  00000000  00000000  00031231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005562  00000000  00000000  0004e656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001740  00000000  00000000  00053bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010ab  00000000  00000000  000552f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002546e  00000000  00000000  000563a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001f355  00000000  00000000  0007b811  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1cef  00000000  00000000  0009ab66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e2c  00000000  00000000  0016c858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  00172684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00003ef4  00000000  00000000  001726d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000140  00000000  00000000  001765c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20001150 	.word	0x20001150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c25c 	.word	0x0800c25c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20001154 	.word	0x20001154
 80001cc:	0800c25c 	.word	0x0800c25c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DMA1_Stream3_IRQHandler>:
static  DMA_HandleTypeDef hdma_spi_rx ;

static  I2S_HandleTypeDef hi2s ;

void DMA1_Stream3_IRQHandler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(  &hdma_spi_rx );
 80004d0:	4802      	ldr	r0, [pc, #8]	; (80004dc <DMA1_Stream3_IRQHandler+0x10>)
 80004d2:	f000 fdb7 	bl	8001044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80004d6:	bf00      	nop
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	2000116c 	.word	0x2000116c

080004e0 <u8Microphone_Init>:


uint8_t u8Microphone_Init ( void  )
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b092      	sub	sp, #72	; 0x48
 80004e4:	af00      	add	r7, sp, #0


	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
 80004ee:	605a      	str	r2, [r3, #4]
 80004f0:	609a      	str	r2, [r3, #8]
 80004f2:	60da      	str	r2, [r3, #12]
 80004f4:	611a      	str	r2, [r3, #16]
	  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]

	  /** Initializes the peripherals clock
		  */
		    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000504:	2301      	movs	r3, #1
 8000506:	627b      	str	r3, [r7, #36]	; 0x24
		    PeriphClkInitStruct.PLLI2S.PLLI2SN = 369;
 8000508:	f240 1371 	movw	r3, #369	; 0x171
 800050c:	62bb      	str	r3, [r7, #40]	; 0x28
		    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 800050e:	2306      	movs	r3, #6
 8000510:	62fb      	str	r3, [r7, #44]	; 0x2c
		    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fe76 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <u8Microphone_Init+0x46>
		    {
		      return 1U ;
 8000522:	2301      	movs	r3, #1
 8000524:	e103      	b.n	800072e <u8Microphone_Init+0x24e>
		    }
	  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	623b      	str	r3, [r7, #32]
 800052a:	4b83      	ldr	r3, [pc, #524]	; (8000738 <u8Microphone_Init+0x258>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a82      	ldr	r2, [pc, #520]	; (8000738 <u8Microphone_Init+0x258>)
 8000530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b80      	ldr	r3, [pc, #512]	; (8000738 <u8Microphone_Init+0x258>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800053e:	623b      	str	r3, [r7, #32]
 8000540:	6a3b      	ldr	r3, [r7, #32]

	  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	2105      	movs	r1, #5
 8000546:	200e      	movs	r0, #14
 8000548:	f000 fc3f 	bl	8000dca <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800054c:	200e      	movs	r0, #14
 800054e:	f000 fc58 	bl	8000e02 <HAL_NVIC_EnableIRQ>



	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	4b78      	ldr	r3, [pc, #480]	; (8000738 <u8Microphone_Init+0x258>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a77      	ldr	r2, [pc, #476]	; (8000738 <u8Microphone_Init+0x258>)
 800055c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b75      	ldr	r3, [pc, #468]	; (8000738 <u8Microphone_Init+0x258>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	69fb      	ldr	r3, [r7, #28]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	61bb      	str	r3, [r7, #24]
 8000572:	4b71      	ldr	r3, [pc, #452]	; (8000738 <u8Microphone_Init+0x258>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a70      	ldr	r2, [pc, #448]	; (8000738 <u8Microphone_Init+0x258>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b6e      	ldr	r3, [pc, #440]	; (8000738 <u8Microphone_Init+0x258>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	61bb      	str	r3, [r7, #24]
 8000588:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]
 800058e:	4b6a      	ldr	r3, [pc, #424]	; (8000738 <u8Microphone_Init+0x258>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a69      	ldr	r2, [pc, #420]	; (8000738 <u8Microphone_Init+0x258>)
 8000594:	f043 0302 	orr.w	r3, r3, #2
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b67      	ldr	r3, [pc, #412]	; (8000738 <u8Microphone_Init+0x258>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f003 0302 	and.w	r3, r3, #2
 80005a2:	617b      	str	r3, [r7, #20]
 80005a4:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
 80005aa:	4b63      	ldr	r3, [pc, #396]	; (8000738 <u8Microphone_Init+0x258>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a62      	ldr	r2, [pc, #392]	; (8000738 <u8Microphone_Init+0x258>)
 80005b0:	f043 0301 	orr.w	r3, r3, #1
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b60      	ldr	r3, [pc, #384]	; (8000738 <u8Microphone_Init+0x258>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0301 	and.w	r3, r3, #1
 80005be:	613b      	str	r3, [r7, #16]
 80005c0:	693b      	ldr	r3, [r7, #16]
	    /* Peripheral clock enable */
	    __HAL_RCC_SPI2_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	4b5c      	ldr	r3, [pc, #368]	; (8000738 <u8Microphone_Init+0x258>)
 80005c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ca:	4a5b      	ldr	r2, [pc, #364]	; (8000738 <u8Microphone_Init+0x258>)
 80005cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d0:	6413      	str	r3, [r2, #64]	; 0x40
 80005d2:	4b59      	ldr	r3, [pc, #356]	; (8000738 <u8Microphone_Init+0x258>)
 80005d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]

	    hi2s.Instance = SPI2;
 80005de:	4b57      	ldr	r3, [pc, #348]	; (800073c <u8Microphone_Init+0x25c>)
 80005e0:	4a57      	ldr	r2, [pc, #348]	; (8000740 <u8Microphone_Init+0x260>)
 80005e2:	601a      	str	r2, [r3, #0]
	    hi2s.Init.Mode = I2S_MODE_MASTER_RX;
 80005e4:	4b55      	ldr	r3, [pc, #340]	; (800073c <u8Microphone_Init+0x25c>)
 80005e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80005ea:	605a      	str	r2, [r3, #4]
	    hi2s.Init.Standard = I2S_STANDARD_PHILIPS;
 80005ec:	4b53      	ldr	r3, [pc, #332]	; (800073c <u8Microphone_Init+0x25c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
	    hi2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005f2:	4b52      	ldr	r3, [pc, #328]	; (800073c <u8Microphone_Init+0x25c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
	    hi2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80005f8:	4b50      	ldr	r3, [pc, #320]	; (800073c <u8Microphone_Init+0x25c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
	    hi2s.Init.AudioFreq = I2S_AUDIOFREQ_32K;
 80005fe:	4b4f      	ldr	r3, [pc, #316]	; (800073c <u8Microphone_Init+0x25c>)
 8000600:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8000604:	615a      	str	r2, [r3, #20]
	    hi2s.Init.CPOL = I2S_CPOL_LOW;
 8000606:	4b4d      	ldr	r3, [pc, #308]	; (800073c <u8Microphone_Init+0x25c>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
	    hi2s.Init.ClockSource = I2S_CLOCK_PLL;
 800060c:	4b4b      	ldr	r3, [pc, #300]	; (800073c <u8Microphone_Init+0x25c>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
	    hi2s.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000612:	4b4a      	ldr	r3, [pc, #296]	; (800073c <u8Microphone_Init+0x25c>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
	    if (HAL_I2S_Init(&hi2s) != HAL_OK)
 8000618:	4848      	ldr	r0, [pc, #288]	; (800073c <u8Microphone_Init+0x25c>)
 800061a:	f001 f94d 	bl	80018b8 <HAL_I2S_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <u8Microphone_Init+0x148>
	    {
	     return 3U ;
 8000624:	2303      	movs	r3, #3
 8000626:	e082      	b.n	800072e <u8Microphone_Init+0x24e>
	    }


	  if( hi2s.Instance  == SPI2  )
 8000628:	4b44      	ldr	r3, [pc, #272]	; (800073c <u8Microphone_Init+0x25c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a44      	ldr	r2, [pc, #272]	; (8000740 <u8Microphone_Init+0x260>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d176      	bne.n	8000720 <u8Microphone_Init+0x240>
	  {




	    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b40      	ldr	r3, [pc, #256]	; (8000738 <u8Microphone_Init+0x258>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a3f      	ldr	r2, [pc, #252]	; (8000738 <u8Microphone_Init+0x258>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b3d      	ldr	r3, [pc, #244]	; (8000738 <u8Microphone_Init+0x258>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b39      	ldr	r3, [pc, #228]	; (8000738 <u8Microphone_Init+0x258>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a38      	ldr	r2, [pc, #224]	; (8000738 <u8Microphone_Init+0x258>)
 8000658:	f043 0302 	orr.w	r3, r3, #2
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b36      	ldr	r3, [pc, #216]	; (8000738 <u8Microphone_Init+0x258>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
	    PC2     ------> I2S2_ext_SD
	    PC3     ------> I2S2_SD
	    PB10     ------> I2S2_CK
	    PB12     ------> I2S2_WS
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800066a:	2304      	movs	r3, #4
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800067a:	2306      	movs	r3, #6
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800067e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000682:	4619      	mov	r1, r3
 8000684:	482f      	ldr	r0, [pc, #188]	; (8000744 <u8Microphone_Init+0x264>)
 8000686:	f000 ff47 	bl	8001518 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800068a:	2308      	movs	r3, #8
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	2302      	movs	r3, #2
 8000690:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800069a:	2305      	movs	r3, #5
 800069c:	647b      	str	r3, [r7, #68]	; 0x44
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006a2:	4619      	mov	r1, r3
 80006a4:	4827      	ldr	r0, [pc, #156]	; (8000744 <u8Microphone_Init+0x264>)
 80006a6:	f000 ff37 	bl	8001518 <HAL_GPIO_Init>

	    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80006aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b0:	2302      	movs	r3, #2
 80006b2:	63bb      	str	r3, [r7, #56]	; 0x38
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	2300      	movs	r3, #0
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
	    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006bc:	2305      	movs	r3, #5
 80006be:	647b      	str	r3, [r7, #68]	; 0x44
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80006c4:	4619      	mov	r1, r3
 80006c6:	4820      	ldr	r0, [pc, #128]	; (8000748 <u8Microphone_Init+0x268>)
 80006c8:	f000 ff26 	bl	8001518 <HAL_GPIO_Init>

	    /* I2S DMA Init */
	    /* SPI_RX Init */
	    hdma_spi_rx.Instance = DMA1_Stream3;
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <u8Microphone_Init+0x26c>)
 80006ce:	4a20      	ldr	r2, [pc, #128]	; (8000750 <u8Microphone_Init+0x270>)
 80006d0:	601a      	str	r2, [r3, #0]
	    hdma_spi_rx.Init.Channel = DMA_CHANNEL_0;
 80006d2:	4b1e      	ldr	r3, [pc, #120]	; (800074c <u8Microphone_Init+0x26c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
	    hdma_spi_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006d8:	4b1c      	ldr	r3, [pc, #112]	; (800074c <u8Microphone_Init+0x26c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
	    hdma_spi_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006de:	4b1b      	ldr	r3, [pc, #108]	; (800074c <u8Microphone_Init+0x26c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
	    hdma_spi_rx.Init.MemInc = DMA_MINC_ENABLE;
 80006e4:	4b19      	ldr	r3, [pc, #100]	; (800074c <u8Microphone_Init+0x26c>)
 80006e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ea:	611a      	str	r2, [r3, #16]
	    hdma_spi_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <u8Microphone_Init+0x26c>)
 80006ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006f2:	615a      	str	r2, [r3, #20]
	    hdma_spi_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f4:	4b15      	ldr	r3, [pc, #84]	; (800074c <u8Microphone_Init+0x26c>)
 80006f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fa:	619a      	str	r2, [r3, #24]
	    hdma_spi_rx.Init.Mode = DMA_CIRCULAR;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <u8Microphone_Init+0x26c>)
 80006fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000702:	61da      	str	r2, [r3, #28]
	    hdma_spi_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <u8Microphone_Init+0x26c>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
	    hdma_spi_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <u8Microphone_Init+0x26c>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	; 0x24

	    if (HAL_DMA_Init(&hdma_spi_rx) != HAL_OK)
 8000710:	480e      	ldr	r0, [pc, #56]	; (800074c <u8Microphone_Init+0x26c>)
 8000712:	f000 fb91 	bl	8000e38 <HAL_DMA_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <u8Microphone_Init+0x240>
	    {
	      return  2U ;
 800071c:	2302      	movs	r3, #2
 800071e:	e006      	b.n	800072e <u8Microphone_Init+0x24e>
	    }
	  }

	    __HAL_LINKDMA( &hi2s , hdmarx , hdma_spi_rx );
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <u8Microphone_Init+0x25c>)
 8000722:	4a0a      	ldr	r2, [pc, #40]	; (800074c <u8Microphone_Init+0x26c>)
 8000724:	63da      	str	r2, [r3, #60]	; 0x3c
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <u8Microphone_Init+0x26c>)
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <u8Microphone_Init+0x25c>)
 800072a:	639a      	str	r2, [r3, #56]	; 0x38



	    return 0U ;
 800072c:	2300      	movs	r3, #0

}
 800072e:	4618      	mov	r0, r3
 8000730:	3748      	adds	r7, #72	; 0x48
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	200011cc 	.word	0x200011cc
 8000740:	40003800 	.word	0x40003800
 8000744:	40020800 	.word	0x40020800
 8000748:	40020400 	.word	0x40020400
 800074c:	2000116c 	.word	0x2000116c
 8000750:	40026058 	.word	0x40026058

08000754 <u8Microphone_Start>:
uint8_t u8Microphone_Start ( uint16_t * u16buffer  , uint16_t  datalen  )
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	807b      	strh	r3, [r7, #2]
	if  ( HAL_OK !=  HAL_I2S_Receive_DMA(&hi2s , u16buffer  , datalen ) )
 8000760:	887b      	ldrh	r3, [r7, #2]
 8000762:	461a      	mov	r2, r3
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	4806      	ldr	r0, [pc, #24]	; (8000780 <u8Microphone_Start+0x2c>)
 8000768:	f001 f9f0 	bl	8001b4c <HAL_I2S_Receive_DMA>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <u8Microphone_Start+0x22>
	{
		return 1U ;
 8000772:	2301      	movs	r3, #1
 8000774:	e000      	b.n	8000778 <u8Microphone_Start+0x24>
	}
	return  0U ;
 8000776:	2300      	movs	r3, #0
}
 8000778:	4618      	mov	r0, r3
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200011cc 	.word	0x200011cc

08000784 <uBuffercmp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t  uBuffercmp (uint8_t *buffer1 , uint8_t *buffer2, uint16_t  length )
{
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	4613      	mov	r3, r2
 8000790:	80fb      	strh	r3, [r7, #6]
    for (size_t i = 0; i < length; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	e00e      	b.n	80007b6 <uBuffercmp+0x32>
    {
        if (buffer1[i] != buffer2[i])
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	4413      	add	r3, r2
 800079e:	781a      	ldrb	r2, [r3, #0]
 80007a0:	68b9      	ldr	r1, [r7, #8]
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	440b      	add	r3, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d001      	beq.n	80007b0 <uBuffercmp+0x2c>
        {
            return 1U;
 80007ac:	2301      	movs	r3, #1
 80007ae:	e007      	b.n	80007c0 <uBuffercmp+0x3c>
    for (size_t i = 0; i < length; i++)
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	3301      	adds	r3, #1
 80007b4:	617b      	str	r3, [r7, #20]
 80007b6:	88fb      	ldrh	r3, [r7, #6]
 80007b8:	697a      	ldr	r2, [r7, #20]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d3ec      	bcc.n	8000798 <uBuffercmp+0x14>
        }
    }
    return 0U;
 80007be:	2300      	movs	r3, #0
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	371c      	adds	r7, #28
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 80007d2:	f000 f989 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f881 	bl	80008dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  DEBUG_UTILS_INIT();
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <main+0xec>)
 80007ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f0:	4a31      	ldr	r2, [pc, #196]	; (80008b8 <main+0xec>)
 80007f2:	f043 0308 	orr.w	r3, r3, #8
 80007f6:	6313      	str	r3, [r2, #48]	; 0x30
 80007f8:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <main+0xec>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	f003 0308 	and.w	r3, r3, #8
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 800080a:	482c      	ldr	r0, [pc, #176]	; (80008bc <main+0xf0>)
 800080c:	f001 f820 	bl	8001850 <HAL_GPIO_WritePin>
 8000810:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	2301      	movs	r3, #1
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4825      	ldr	r0, [pc, #148]	; (80008bc <main+0xf0>)
 8000828:	f000 fe76 	bl	8001518 <HAL_GPIO_Init>
  /* USER CODE END SysInit */

  MX_USB_DEVICE_Init();
 800082c:	f00a f826 	bl	800a87c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Wait for CMD */

  uint8_t u8ModeSelected = 0U ;
 8000830:	2300      	movs	r3, #0
 8000832:	77fb      	strb	r3, [r7, #31]
  DevicceMode_en Mode = AUDIO_IDLE ;
 8000834:	2300      	movs	r3, #0
 8000836:	77bb      	strb	r3, [r7, #30]
  do
  {
	  if ( 0U == uBuffercmp(u8USBrecieveBuffer , "PB_MODE"  , 7U ) )
 8000838:	2207      	movs	r2, #7
 800083a:	4921      	ldr	r1, [pc, #132]	; (80008c0 <main+0xf4>)
 800083c:	4821      	ldr	r0, [pc, #132]	; (80008c4 <main+0xf8>)
 800083e:	f7ff ffa1 	bl	8000784 <uBuffercmp>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d104      	bne.n	8000852 <main+0x86>
	  {
		  	  u8ModeSelected = 1U ;
 8000848:	2301      	movs	r3, #1
 800084a:	77fb      	strb	r3, [r7, #31]
		  	  Mode =AUDIO_PLAYBACK ;
 800084c:	2301      	movs	r3, #1
 800084e:	77bb      	strb	r3, [r7, #30]
 8000850:	e00b      	b.n	800086a <main+0x9e>
	  }
	  else if (0U == uBuffercmp(u8USBrecieveBuffer , "EQ_MODE"  , 7U ) )
 8000852:	2207      	movs	r2, #7
 8000854:	491c      	ldr	r1, [pc, #112]	; (80008c8 <main+0xfc>)
 8000856:	481b      	ldr	r0, [pc, #108]	; (80008c4 <main+0xf8>)
 8000858:	f7ff ff94 	bl	8000784 <uBuffercmp>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d103      	bne.n	800086a <main+0x9e>
	  {
		      u8ModeSelected = 1U ;
 8000862:	2301      	movs	r3, #1
 8000864:	77fb      	strb	r3, [r7, #31]
		      Mode =AUDIO_EQUALIZER ;
 8000866:	2302      	movs	r3, #2
 8000868:	77bb      	strb	r3, [r7, #30]
	  }else
	  {
		  /*Nothing TO do */
	  }

  }while ( u8ModeSelected == 0U );
 800086a:	7ffb      	ldrb	r3, [r7, #31]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0e3      	beq.n	8000838 <main+0x6c>

  if ( u8ModeSelected == 1U  )
 8000870:	7ffb      	ldrb	r3, [r7, #31]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d11f      	bne.n	80008b6 <main+0xea>
  {
  BaseType_t    xReturned  =pdFALSE;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]

		         xReturned = xTaskCreate(
 800087a:	7fbb      	ldrb	r3, [r7, #30]
 800087c:	461a      	mov	r2, r3
 800087e:	2300      	movs	r3, #0
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	2302      	movs	r3, #2
 8000884:	9300      	str	r3, [sp, #0]
 8000886:	4613      	mov	r3, r2
 8000888:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800088c:	490f      	ldr	r1, [pc, #60]	; (80008cc <main+0x100>)
 800088e:	4810      	ldr	r0, [pc, #64]	; (80008d0 <main+0x104>)
 8000890:	f008 f87b 	bl	800898a <xTaskCreate>
 8000894:	61b8      	str	r0, [r7, #24]
  if (  xReturned != pdPASS )
  {
	  /*Reset */
  }

  xReturned = xTaskCreate(
 8000896:	7fbb      	ldrb	r3, [r7, #30]
 8000898:	461a      	mov	r2, r3
 800089a:	2300      	movs	r3, #0
 800089c:	9301      	str	r3, [sp, #4]
 800089e:	2301      	movs	r3, #1
 80008a0:	9300      	str	r3, [sp, #0]
 80008a2:	4613      	mov	r3, r2
 80008a4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80008a8:	490a      	ldr	r1, [pc, #40]	; (80008d4 <main+0x108>)
 80008aa:	480b      	ldr	r0, [pc, #44]	; (80008d8 <main+0x10c>)
 80008ac:	f008 f86d 	bl	800898a <xTaskCreate>
 80008b0:	61b8      	str	r0, [r7, #24]
  	  /*Reset */
    }


  /* start system */
  vTaskStartScheduler();
 80008b2:	f008 f9e3 	bl	8008c7c <vTaskStartScheduler>

  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0xea>
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	0800c274 	.word	0x0800c274
 80008c4:	20001214 	.word	0x20001214
 80008c8:	0800c27c 	.word	0x0800c27c
 80008cc:	0800c284 	.word	0x0800c284
 80008d0:	0800a615 	.word	0x0800a615
 80008d4:	0800c294 	.word	0x0800c294
 80008d8:	0800a7ad 	.word	0x0800a7ad

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b094      	sub	sp, #80	; 0x50
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	2230      	movs	r2, #48	; 0x30
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00b fc54 	bl	800c198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	2300      	movs	r3, #0
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <SystemClock_Config+0xcc>)
 8000906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000908:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <SystemClock_Config+0xcc>)
 800090a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800090e:	6413      	str	r3, [r2, #64]	; 0x40
 8000910:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <SystemClock_Config+0xcc>)
 8000912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	4b22      	ldr	r3, [pc, #136]	; (80009ac <SystemClock_Config+0xd0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a21      	ldr	r2, [pc, #132]	; (80009ac <SystemClock_Config+0xd0>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6013      	str	r3, [r2, #0]
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <SystemClock_Config+0xd0>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000938:	2301      	movs	r3, #1
 800093a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000942:	2302      	movs	r3, #2
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000946:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800094c:	2308      	movs	r3, #8
 800094e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000950:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000954:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000956:	2302      	movs	r3, #2
 8000958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800095a:	2307      	movs	r3, #7
 800095c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 0320 	add.w	r3, r7, #32
 8000962:	4618      	mov	r0, r3
 8000964:	f002 ffe0 	bl	8003928 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800096e:	f000 f81f 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800097e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000988:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800098a:	f107 030c 	add.w	r3, r7, #12
 800098e:	2105      	movs	r1, #5
 8000990:	4618      	mov	r0, r3
 8000992:	f003 fa41 	bl	8003e18 <HAL_RCC_ClockConfig>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800099c:	f000 f808 	bl	80009b0 <Error_Handler>
  }
}
 80009a0:	bf00      	nop
 80009a2:	3750      	adds	r7, #80	; 0x50
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <Error_Handler>:


void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <HAL_MspInit+0x54>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <HAL_MspInit+0x54>)
 80009cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d0:	6453      	str	r3, [r2, #68]	; 0x44
 80009d2:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_MspInit+0x54>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e6:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_MspInit+0x54>)
 80009e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ec:	6413      	str	r3, [r2, #64]	; 0x40
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	210f      	movs	r1, #15
 80009fe:	f06f 0001 	mvn.w	r0, #1
 8000a02:	f000 f9e2 	bl	8000dca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f8a2 	bl	8000b8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a48:	f008 fd60 	bl	800950c <xTaskGetSchedulerState>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d001      	beq.n	8000a56 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a52:	f009 fb49 	bl	800a0e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <OTG_FS_IRQHandler+0x10>)
 8000a62:	f001 fe33 	bl	80026cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000b5f0 	.word	0x2000b5f0

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f00b fb77 	bl	800c1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fe81 	bl	80007cc <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20001150 	.word	0x20001150
  ldr r2, =_sidata
 8000ad8:	08014b28 	.word	0x08014b28
  ldr r2, =_sbss
 8000adc:	20001150 	.word	0x20001150
  ldr r4, =_ebss
 8000ae0:	2000be54 	.word	0x2000be54

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f94f 	bl	8000db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff ff4e 	bl	80009bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f967 	bl	8000e1e <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f92f 	bl	8000dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20001254 	.word	0x20001254

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20001254 	.word	0x20001254

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	; (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	; (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	; 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	; 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d80:	d301      	bcc.n	8000d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00f      	b.n	8000da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <SysTick_Config+0x40>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d8e:	210f      	movs	r1, #15
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f7ff ff8e 	bl	8000cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <SysTick_Config+0x40>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d9e:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <SysTick_Config+0x40>)
 8000da0:	2207      	movs	r2, #7
 8000da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	e000e010 	.word	0xe000e010

08000db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f7ff ff29 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b086      	sub	sp, #24
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	60b9      	str	r1, [r7, #8]
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ddc:	f7ff ff3e 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	68b9      	ldr	r1, [r7, #8]
 8000de6:	6978      	ldr	r0, [r7, #20]
 8000de8:	f7ff ff8e 	bl	8000d08 <NVIC_EncodePriority>
 8000dec:	4602      	mov	r2, r0
 8000dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df2:	4611      	mov	r1, r2
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff5d 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000dfa:	bf00      	nop
 8000dfc:	3718      	adds	r7, #24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff31 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffa2 	bl	8000d70 <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e44:	f7ff feb6 	bl	8000bb4 <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e099      	b.n	8000f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2202      	movs	r2, #2
 8000e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f022 0201 	bic.w	r2, r2, #1
 8000e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e74:	e00f      	b.n	8000e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e76:	f7ff fe9d 	bl	8000bb4 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b05      	cmp	r3, #5
 8000e82:	d908      	bls.n	8000e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2220      	movs	r2, #32
 8000e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e078      	b.n	8000f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e8      	bne.n	8000e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	4b38      	ldr	r3, [pc, #224]	; (8000f90 <HAL_DMA_Init+0x158>)
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6a1b      	ldr	r3, [r3, #32]
 8000ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d107      	bne.n	8000f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f023 0307 	bic.w	r3, r3, #7
 8000f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d117      	bne.n	8000f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d00e      	beq.n	8000f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f000 fa6f 	bl	8001420 <DMA_CheckFifoParam>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d008      	beq.n	8000f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2240      	movs	r2, #64	; 0x40
 8000f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8000f56:	2301      	movs	r3, #1
 8000f58:	e016      	b.n	8000f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f000 fa26 	bl	80013b4 <DMA_CalcBaseAndBitshift>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f70:	223f      	movs	r2, #63	; 0x3f
 8000f72:	409a      	lsls	r2, r3
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	f010803f 	.word	0xf010803f

08000f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	60f8      	str	r0, [r7, #12]
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d101      	bne.n	8000fba <HAL_DMA_Start_IT+0x26>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e040      	b.n	800103c <HAL_DMA_Start_IT+0xa8>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d12f      	bne.n	800102e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f000 f9b8 	bl	8001358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fec:	223f      	movs	r2, #63	; 0x3f
 8000fee:	409a      	lsls	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f042 0216 	orr.w	r2, r2, #22
 8001002:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f042 0208 	orr.w	r2, r2, #8
 800101a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f042 0201 	orr.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e005      	b.n	800103a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001036:	2302      	movs	r3, #2
 8001038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800103a:	7dfb      	ldrb	r3, [r7, #23]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001050:	4b8e      	ldr	r3, [pc, #568]	; (800128c <HAL_DMA_IRQHandler+0x248>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a8e      	ldr	r2, [pc, #568]	; (8001290 <HAL_DMA_IRQHandler+0x24c>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	0a9b      	lsrs	r3, r3, #10
 800105c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106e:	2208      	movs	r2, #8
 8001070:	409a      	lsls	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4013      	ands	r3, r2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d01a      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0304 	and.w	r3, r3, #4
 8001084:	2b00      	cmp	r3, #0
 8001086:	d013      	beq.n	80010b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f022 0204 	bic.w	r2, r2, #4
 8001096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800109c:	2208      	movs	r2, #8
 800109e:	409a      	lsls	r2, r3
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a8:	f043 0201 	orr.w	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010b4:	2201      	movs	r2, #1
 80010b6:	409a      	lsls	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d012      	beq.n	80010e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00b      	beq.n	80010e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d2:	2201      	movs	r2, #1
 80010d4:	409a      	lsls	r2, r3
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010de:	f043 0202 	orr.w	r2, r3, #2
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010ea:	2204      	movs	r2, #4
 80010ec:	409a      	lsls	r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d012      	beq.n	800111c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d00b      	beq.n	800111c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001108:	2204      	movs	r2, #4
 800110a:	409a      	lsls	r2, r3
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	f043 0204 	orr.w	r2, r3, #4
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001120:	2210      	movs	r2, #16
 8001122:	409a      	lsls	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4013      	ands	r3, r2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d043      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d03c      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113e:	2210      	movs	r2, #16
 8001140:	409a      	lsls	r2, r3
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d018      	beq.n	8001186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d108      	bne.n	8001174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	2b00      	cmp	r3, #0
 8001168:	d024      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	4798      	blx	r3
 8001172:	e01f      	b.n	80011b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001178:	2b00      	cmp	r3, #0
 800117a:	d01b      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	4798      	blx	r3
 8001184:	e016      	b.n	80011b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001190:	2b00      	cmp	r3, #0
 8001192:	d107      	bne.n	80011a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f022 0208 	bic.w	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	2220      	movs	r2, #32
 80011ba:	409a      	lsls	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 808f 	beq.w	80012e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0310 	and.w	r3, r3, #16
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f000 8087 	beq.w	80012e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011da:	2220      	movs	r2, #32
 80011dc:	409a      	lsls	r2, r3
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b05      	cmp	r3, #5
 80011ec:	d136      	bne.n	800125c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0216 	bic.w	r2, r2, #22
 80011fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	695a      	ldr	r2, [r3, #20]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800120c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	2b00      	cmp	r3, #0
 8001214:	d103      	bne.n	800121e <HAL_DMA_IRQHandler+0x1da>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121a:	2b00      	cmp	r3, #0
 800121c:	d007      	beq.n	800122e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0208 	bic.w	r2, r2, #8
 800122c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001232:	223f      	movs	r2, #63	; 0x3f
 8001234:	409a      	lsls	r2, r3
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2201      	movs	r2, #1
 800123e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800124e:	2b00      	cmp	r3, #0
 8001250:	d07e      	beq.n	8001350 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4798      	blx	r3
        }
        return;
 800125a:	e079      	b.n	8001350 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d01d      	beq.n	80012a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10d      	bne.n	8001294 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	2b00      	cmp	r3, #0
 800127e:	d031      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	4798      	blx	r3
 8001288:	e02c      	b.n	80012e4 <HAL_DMA_IRQHandler+0x2a0>
 800128a:	bf00      	nop
 800128c:	20000000 	.word	0x20000000
 8001290:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001298:	2b00      	cmp	r3, #0
 800129a:	d023      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	4798      	blx	r3
 80012a4:	e01e      	b.n	80012e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10f      	bne.n	80012d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0210 	bic.w	r2, r2, #16
 80012c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d032      	beq.n	8001352 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d022      	beq.n	800133e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2205      	movs	r2, #5
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	3301      	adds	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	429a      	cmp	r2, r3
 800131a:	d307      	bcc.n	800132c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1f2      	bne.n	8001310 <HAL_DMA_IRQHandler+0x2cc>
 800132a:	e000      	b.n	800132e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800132c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4798      	blx	r3
 800134e:	e000      	b.n	8001352 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001350:	bf00      	nop
    }
  }
}
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b40      	cmp	r3, #64	; 0x40
 8001384:	d108      	bne.n	8001398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001396:	e007      	b.n	80013a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	3b10      	subs	r3, #16
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <DMA_CalcBaseAndBitshift+0x64>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	091b      	lsrs	r3, r3, #4
 80013cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <DMA_CalcBaseAndBitshift+0x68>)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4413      	add	r3, r2
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b03      	cmp	r3, #3
 80013e0:	d909      	bls.n	80013f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	1d1a      	adds	r2, r3, #4
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	659a      	str	r2, [r3, #88]	; 0x58
 80013f4:	e007      	b.n	8001406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800140a:	4618      	mov	r0, r3
 800140c:	3714      	adds	r7, #20
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	aaaaaaab 	.word	0xaaaaaaab
 800141c:	0800c310 	.word	0x0800c310

08001420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d11f      	bne.n	800147a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d856      	bhi.n	80014ee <DMA_CheckFifoParam+0xce>
 8001440:	a201      	add	r2, pc, #4	; (adr r2, 8001448 <DMA_CheckFifoParam+0x28>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	08001459 	.word	0x08001459
 800144c:	0800146b 	.word	0x0800146b
 8001450:	08001459 	.word	0x08001459
 8001454:	080014ef 	.word	0x080014ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d046      	beq.n	80014f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001468:	e043      	b.n	80014f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001472:	d140      	bne.n	80014f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001478:	e03d      	b.n	80014f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001482:	d121      	bne.n	80014c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d837      	bhi.n	80014fa <DMA_CheckFifoParam+0xda>
 800148a:	a201      	add	r2, pc, #4	; (adr r2, 8001490 <DMA_CheckFifoParam+0x70>)
 800148c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001490:	080014a1 	.word	0x080014a1
 8001494:	080014a7 	.word	0x080014a7
 8001498:	080014a1 	.word	0x080014a1
 800149c:	080014b9 	.word	0x080014b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
      break;
 80014a4:	e030      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d025      	beq.n	80014fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b6:	e022      	b.n	80014fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014c0:	d11f      	bne.n	8001502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014c6:	e01c      	b.n	8001502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d903      	bls.n	80014d6 <DMA_CheckFifoParam+0xb6>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d003      	beq.n	80014dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014d4:	e018      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	73fb      	strb	r3, [r7, #15]
      break;
 80014da:	e015      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00e      	beq.n	8001506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
      break;
 80014ec:	e00b      	b.n	8001506 <DMA_CheckFifoParam+0xe6>
      break;
 80014ee:	bf00      	nop
 80014f0:	e00a      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      break;
 80014f2:	bf00      	nop
 80014f4:	e008      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      break;
 80014f6:	bf00      	nop
 80014f8:	e006      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      break;
 80014fa:	bf00      	nop
 80014fc:	e004      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      break;
 80014fe:	bf00      	nop
 8001500:	e002      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      break;   
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <DMA_CheckFifoParam+0xe8>
      break;
 8001506:	bf00      	nop
    }
  } 
  
  return status; 
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop

08001518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	; 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e16b      	b.n	800180c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 815a 	bne.w	8001806 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	2b02      	cmp	r3, #2
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d017      	beq.n	8001608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d123      	bne.n	800165c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80b4 	beq.w	8001806 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b60      	ldr	r3, [pc, #384]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a5f      	ldr	r2, [pc, #380]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b5d      	ldr	r3, [pc, #372]	; (8001824 <HAL_GPIO_Init+0x30c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ba:	4a5b      	ldr	r2, [pc, #364]	; (8001828 <HAL_GPIO_Init+0x310>)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	089b      	lsrs	r3, r3, #2
 80016c0:	3302      	adds	r3, #2
 80016c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4013      	ands	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_GPIO_Init+0x314>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d02b      	beq.n	800173e <HAL_GPIO_Init+0x226>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a51      	ldr	r2, [pc, #324]	; (8001830 <HAL_GPIO_Init+0x318>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d025      	beq.n	800173a <HAL_GPIO_Init+0x222>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <HAL_GPIO_Init+0x31c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d01f      	beq.n	8001736 <HAL_GPIO_Init+0x21e>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4f      	ldr	r2, [pc, #316]	; (8001838 <HAL_GPIO_Init+0x320>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d019      	beq.n	8001732 <HAL_GPIO_Init+0x21a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_GPIO_Init+0x324>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d013      	beq.n	800172e <HAL_GPIO_Init+0x216>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4d      	ldr	r2, [pc, #308]	; (8001840 <HAL_GPIO_Init+0x328>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d00d      	beq.n	800172a <HAL_GPIO_Init+0x212>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4c      	ldr	r2, [pc, #304]	; (8001844 <HAL_GPIO_Init+0x32c>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d007      	beq.n	8001726 <HAL_GPIO_Init+0x20e>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4a4b      	ldr	r2, [pc, #300]	; (8001848 <HAL_GPIO_Init+0x330>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_GPIO_Init+0x20a>
 800171e:	2307      	movs	r3, #7
 8001720:	e00e      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001722:	2308      	movs	r3, #8
 8001724:	e00c      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001726:	2306      	movs	r3, #6
 8001728:	e00a      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800172a:	2305      	movs	r3, #5
 800172c:	e008      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800172e:	2304      	movs	r3, #4
 8001730:	e006      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001732:	2303      	movs	r3, #3
 8001734:	e004      	b.n	8001740 <HAL_GPIO_Init+0x228>
 8001736:	2302      	movs	r3, #2
 8001738:	e002      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_GPIO_Init+0x228>
 800173e:	2300      	movs	r3, #0
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	f002 0203 	and.w	r2, r2, #3
 8001746:	0092      	lsls	r2, r2, #2
 8001748:	4093      	lsls	r3, r2
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001750:	4935      	ldr	r1, [pc, #212]	; (8001828 <HAL_GPIO_Init+0x310>)
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	3302      	adds	r3, #2
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800175e:	4b3b      	ldr	r3, [pc, #236]	; (800184c <HAL_GPIO_Init+0x334>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001782:	4a32      	ldr	r2, [pc, #200]	; (800184c <HAL_GPIO_Init+0x334>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <HAL_GPIO_Init+0x334>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <HAL_GPIO_Init+0x334>)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_GPIO_Init+0x334>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017d6:	4a1d      	ldr	r2, [pc, #116]	; (800184c <HAL_GPIO_Init+0x334>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_GPIO_Init+0x334>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001800:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_GPIO_Init+0x334>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3301      	adds	r3, #1
 800180a:	61fb      	str	r3, [r7, #28]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	2b0f      	cmp	r3, #15
 8001810:	f67f ae90 	bls.w	8001534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40013800 	.word	0x40013800
 800182c:	40020000 	.word	0x40020000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020800 	.word	0x40020800
 8001838:	40020c00 	.word	0x40020c00
 800183c:	40021000 	.word	0x40021000
 8001840:	40021400 	.word	0x40021400
 8001844:	40021800 	.word	0x40021800
 8001848:	40021c00 	.word	0x40021c00
 800184c:	40013c00 	.word	0x40013c00

08001850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
 800185c:	4613      	mov	r3, r2
 800185e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001860:	787b      	ldrb	r3, [r7, #1]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001866:	887a      	ldrh	r2, [r7, #2]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	041a      	lsls	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001894:	887a      	ldrh	r2, [r7, #2]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	041a      	lsls	r2, r3, #16
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43d9      	mvns	r1, r3
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	400b      	ands	r3, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	619a      	str	r2, [r3, #24]
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e128      	b.n	8001b1c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a90      	ldr	r2, [pc, #576]	; (8001b24 <HAL_I2S_Init+0x26c>)
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f927 	bl	8001b38 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2202      	movs	r2, #2
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001900:	f023 030f 	bic.w	r3, r3, #15
 8001904:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2202      	movs	r2, #2
 800190c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d060      	beq.n	80019d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d102      	bne.n	8001924 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800191e:	2310      	movs	r3, #16
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e001      	b.n	8001928 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001924:	2320      	movs	r3, #32
 8001926:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b20      	cmp	r3, #32
 800192e:	d802      	bhi.n	8001936 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001936:	2001      	movs	r0, #1
 8001938:	f002 fd48 	bl	80043cc <HAL_RCCEx_GetPeriphCLKFreq>
 800193c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001946:	d125      	bne.n	8001994 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d010      	beq.n	8001972 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	fbb2 f2f3 	udiv	r2, r2, r3
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	fbb2 f3f3 	udiv	r3, r2, r3
 800196c:	3305      	adds	r3, #5
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	e01f      	b.n	80019b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	00db      	lsls	r3, r3, #3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	fbb2 f2f3 	udiv	r2, r2, r3
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	3305      	adds	r3, #5
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	e00e      	b.n	80019b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	fbb2 f2f3 	udiv	r2, r2, r3
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	461a      	mov	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ae:	3305      	adds	r3, #5
 80019b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	4a5c      	ldr	r2, [pc, #368]	; (8001b28 <HAL_I2S_Init+0x270>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	08db      	lsrs	r3, r3, #3
 80019bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	085b      	lsrs	r3, r3, #1
 80019ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	021b      	lsls	r3, r3, #8
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	e003      	b.n	80019e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019d8:	2302      	movs	r3, #2
 80019da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d902      	bls.n	80019ec <HAL_I2S_Init+0x134>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2bff      	cmp	r3, #255	; 0xff
 80019ea:	d907      	bls.n	80019fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f043 0210 	orr.w	r2, r3, #16
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e08f      	b.n	8001b1c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	ea42 0103 	orr.w	r1, r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69fa      	ldr	r2, [r7, #28]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a1a:	f023 030f 	bic.w	r3, r3, #15
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6851      	ldr	r1, [r2, #4]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6892      	ldr	r2, [r2, #8]
 8001a26:	4311      	orrs	r1, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68d2      	ldr	r2, [r2, #12]
 8001a2c:	4311      	orrs	r1, r2
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	6992      	ldr	r2, [r2, #24]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a3e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d161      	bne.n	8001b0c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a38      	ldr	r2, [pc, #224]	; (8001b2c <HAL_I2S_Init+0x274>)
 8001a4c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a37      	ldr	r2, [pc, #220]	; (8001b30 <HAL_I2S_Init+0x278>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_I2S_Init+0x1a4>
 8001a58:	4b36      	ldr	r3, [pc, #216]	; (8001b34 <HAL_I2S_Init+0x27c>)
 8001a5a:	e001      	b.n	8001a60 <HAL_I2S_Init+0x1a8>
 8001a5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	4932      	ldr	r1, [pc, #200]	; (8001b30 <HAL_I2S_Init+0x278>)
 8001a68:	428a      	cmp	r2, r1
 8001a6a:	d101      	bne.n	8001a70 <HAL_I2S_Init+0x1b8>
 8001a6c:	4a31      	ldr	r2, [pc, #196]	; (8001b34 <HAL_I2S_Init+0x27c>)
 8001a6e:	e001      	b.n	8001a74 <HAL_I2S_Init+0x1bc>
 8001a70:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a74:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a78:	f023 030f 	bic.w	r3, r3, #15
 8001a7c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a2b      	ldr	r2, [pc, #172]	; (8001b30 <HAL_I2S_Init+0x278>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_I2S_Init+0x1d4>
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_I2S_Init+0x27c>)
 8001a8a:	e001      	b.n	8001a90 <HAL_I2S_Init+0x1d8>
 8001a8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001a90:	2202      	movs	r2, #2
 8001a92:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a25      	ldr	r2, [pc, #148]	; (8001b30 <HAL_I2S_Init+0x278>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_I2S_Init+0x1ea>
 8001a9e:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <HAL_I2S_Init+0x27c>)
 8001aa0:	e001      	b.n	8001aa6 <HAL_I2S_Init+0x1ee>
 8001aa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab2:	d003      	beq.n	8001abc <HAL_I2S_Init+0x204>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d103      	bne.n	8001ac4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	e001      	b.n	8001ac8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a0d      	ldr	r2, [pc, #52]	; (8001b30 <HAL_I2S_Init+0x278>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d101      	bne.n	8001b04 <HAL_I2S_Init+0x24c>
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_I2S_Init+0x27c>)
 8001b02:	e001      	b.n	8001b08 <HAL_I2S_Init+0x250>
 8001b04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001b08:	897a      	ldrh	r2, [r7, #10]
 8001b0a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	08001e65 	.word	0x08001e65
 8001b28:	cccccccd 	.word	0xcccccccd
 8001b2c:	08001f79 	.word	0x08001f79
 8001b30:	40003800 	.word	0x40003800
 8001b34:	40003400 	.word	0x40003400

08001b38 <HAL_I2S_MspInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_MspInit(I2S_HandleTypeDef *hi2s)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_MspInit could be implemented in the user file
   */
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_I2S_Receive_DMA+0x1a>
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0a1      	b.n	8001cae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_I2S_Receive_DMA+0x2e>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e099      	b.n	8001cae <HAL_I2S_Receive_DMA+0x162>
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d005      	beq.n	8001b9a <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
 8001b98:	e089      	b.n	8001cae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2204      	movs	r2, #4
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d002      	beq.n	8001bc6 <HAL_I2S_Receive_DMA+0x7a>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d10a      	bne.n	8001bdc <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	865a      	strh	r2, [r3, #50]	; 0x32
 8001bda:	e005      	b.n	8001be8 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	88fa      	ldrh	r2, [r7, #6]
 8001be6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	4a32      	ldr	r2, [pc, #200]	; (8001cb8 <HAL_I2S_Receive_DMA+0x16c>)
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	4a31      	ldr	r2, [pc, #196]	; (8001cbc <HAL_I2S_Receive_DMA+0x170>)
 8001bf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <HAL_I2S_Receive_DMA+0x174>)
 8001bfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c0e:	d10a      	bne.n	8001c26 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	330c      	adds	r3, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c36:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001c3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8001c3e:	f7ff f9a9 	bl	8000f94 <HAL_DMA_Start_IT>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00f      	beq.n	8001c68 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f043 0208 	orr.w	r2, r3, #8
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e022      	b.n	8001cae <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d107      	bne.n	8001c86 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c84:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d107      	bne.n	8001ca4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08001d43 	.word	0x08001d43
 8001cbc:	08001d01 	.word	0x08001d01
 8001cc0:	08001d5f 	.word	0x08001d5f

08001cc4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10e      	bne.n	8001d34 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0201 	bic.w	r2, r2, #1
 8001d24:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	f008 fc51 	bl	800a5dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff ffc1 	bl	8001cd8 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001d56:	bf00      	nop
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0203 	bic.w	r2, r2, #3
 8001d7a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	2200      	movs	r2, #0
 8001d86:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	f043 0208 	orr.w	r2, r3, #8
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff ffa5 	bl	8001cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	881a      	ldrh	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	1c9a      	adds	r2, r3, #2
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10e      	bne.n	8001dfe <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001dee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff63 	bl	8001cc4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e18:	b292      	uxth	r2, r2
 8001e1a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	1c9a      	adds	r2, r3, #2
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10e      	bne.n	8001e5c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e4c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f008 fbc0 	bl	800a5dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d13a      	bne.n	8001ef6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d109      	bne.n	8001e9e <I2S_IRQHandler+0x3a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	2b40      	cmp	r3, #64	; 0x40
 8001e96:	d102      	bne.n	8001e9e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ffb4 	bl	8001e06 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b40      	cmp	r3, #64	; 0x40
 8001ea6:	d126      	bne.n	8001ef6 <I2S_IRQHandler+0x92>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b20      	cmp	r3, #32
 8001eb4:	d11f      	bne.n	8001ef6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ec4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f043 0202 	orr.w	r2, r3, #2
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7ff fefb 	bl	8001cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d136      	bne.n	8001f70 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d109      	bne.n	8001f20 <I2S_IRQHandler+0xbc>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f16:	2b80      	cmp	r3, #128	; 0x80
 8001f18:	d102      	bne.n	8001f20 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff ff45 	bl	8001daa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d122      	bne.n	8001f70 <I2S_IRQHandler+0x10c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d11b      	bne.n	8001f70 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001f46:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f043 0204 	orr.w	r2, r3, #4
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff febe 	bl	8001cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a92      	ldr	r2, [pc, #584]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f92:	4b92      	ldr	r3, [pc, #584]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f94:	e001      	b.n	8001f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a8b      	ldr	r2, [pc, #556]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d101      	bne.n	8001fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001fb0:	4b8a      	ldr	r3, [pc, #552]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fb2:	e001      	b.n	8001fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001fb4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc4:	d004      	beq.n	8001fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 8099 	bne.w	8002102 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d002      	beq.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f925 	bl	8002234 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f9c8 	bl	8002394 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200a:	2b40      	cmp	r3, #64	; 0x40
 800200c:	d13a      	bne.n	8002084 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f003 0320 	and.w	r3, r3, #32
 8002014:	2b00      	cmp	r3, #0
 8002016:	d035      	beq.n	8002084 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002022:	4b6e      	ldr	r3, [pc, #440]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002024:	e001      	b.n	800202a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002026:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4969      	ldr	r1, [pc, #420]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002032:	428b      	cmp	r3, r1
 8002034:	d101      	bne.n	800203a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002036:	4b69      	ldr	r3, [pc, #420]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002038:	e001      	b.n	800203e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800203a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800203e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002042:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002052:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002054:	2300      	movs	r3, #0
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f043 0202 	orr.w	r2, r3, #2
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff fe34 	bl	8001cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b08      	cmp	r3, #8
 800208c:	f040 80c3 	bne.w	8002216 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80bd 	beq.w	8002216 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a49      	ldr	r2, [pc, #292]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020b8:	e001      	b.n	80020be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80020ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4944      	ldr	r1, [pc, #272]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020c6:	428b      	cmp	r3, r1
 80020c8:	d101      	bne.n	80020ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80020ca:	4b44      	ldr	r3, [pc, #272]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020cc:	e001      	b.n	80020d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80020ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80020d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fdf6 	bl	8001cec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002100:	e089      	b.n	8002216 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b02      	cmp	r3, #2
 800210a:	d107      	bne.n	800211c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f8be 	bl	8002298 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d107      	bne.n	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d002      	beq.n	8002136 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f8fd 	bl	8002330 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213c:	2b40      	cmp	r3, #64	; 0x40
 800213e:	d12f      	bne.n	80021a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d02a      	beq.n	80021a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002158:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002164:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002166:	e001      	b.n	800216c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002168:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4919      	ldr	r1, [pc, #100]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002174:	428b      	cmp	r3, r1
 8002176:	d101      	bne.n	800217c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800217a:	e001      	b.n	8002180 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800217c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002184:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f043 0202 	orr.w	r2, r3, #2
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fda6 	bl	8001cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d136      	bne.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d031      	beq.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80021be:	4b07      	ldr	r3, [pc, #28]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021c0:	e001      	b.n	80021c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80021c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021c6:	685a      	ldr	r2, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4902      	ldr	r1, [pc, #8]	; (80021d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021ce:	428b      	cmp	r3, r1
 80021d0:	d106      	bne.n	80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80021d2:	4b02      	ldr	r3, [pc, #8]	; (80021dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021d4:	e006      	b.n	80021e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80021d6:	bf00      	nop
 80021d8:	40003800 	.word	0x40003800
 80021dc:	40003400 	.word	0x40003400
 80021e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80021e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f043 0204 	orr.w	r2, r3, #4
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff fd6c 	bl	8001cec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002214:	e000      	b.n	8002218 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002216:	bf00      	nop
}
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c99      	adds	r1, r3, #2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6251      	str	r1, [r2, #36]	; 0x24
 8002246:	881a      	ldrh	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002252:	b29b      	uxth	r3, r3
 8002254:	3b01      	subs	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d113      	bne.n	800228e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002274:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d106      	bne.n	800228e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f7ff ffc9 	bl	8002220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800228e:	bf00      	nop
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	1c99      	adds	r1, r3, #2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6251      	str	r1, [r2, #36]	; 0x24
 80022aa:	8819      	ldrh	r1, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <I2SEx_TxISR_I2SExt+0x90>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <I2SEx_TxISR_I2SExt+0x22>
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <I2SEx_TxISR_I2SExt+0x94>)
 80022b8:	e001      	b.n	80022be <I2SEx_TxISR_I2SExt+0x26>
 80022ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022be:	460a      	mov	r2, r1
 80022c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d121      	bne.n	800231e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a12      	ldr	r2, [pc, #72]	; (8002328 <I2SEx_TxISR_I2SExt+0x90>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d101      	bne.n	80022e8 <I2SEx_TxISR_I2SExt+0x50>
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <I2SEx_TxISR_I2SExt+0x94>)
 80022e6:	e001      	b.n	80022ec <I2SEx_TxISR_I2SExt+0x54>
 80022e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	490d      	ldr	r1, [pc, #52]	; (8002328 <I2SEx_TxISR_I2SExt+0x90>)
 80022f4:	428b      	cmp	r3, r1
 80022f6:	d101      	bne.n	80022fc <I2SEx_TxISR_I2SExt+0x64>
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <I2SEx_TxISR_I2SExt+0x94>)
 80022fa:	e001      	b.n	8002300 <I2SEx_TxISR_I2SExt+0x68>
 80022fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002300:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002304:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d106      	bne.n	800231e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff81 	bl	8002220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40003800 	.word	0x40003800
 800232c:	40003400 	.word	0x40003400

08002330 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68d8      	ldr	r0, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002342:	1c99      	adds	r1, r3, #2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002348:	b282      	uxth	r2, r0
 800234a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002350:	b29b      	uxth	r3, r3
 8002352:	3b01      	subs	r3, #1
 8002354:	b29a      	uxth	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d113      	bne.n	800238c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002372:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002378:	b29b      	uxth	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff4a 	bl	8002220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800238c:	bf00      	nop
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a20      	ldr	r2, [pc, #128]	; (8002424 <I2SEx_RxISR_I2SExt+0x90>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d101      	bne.n	80023aa <I2SEx_RxISR_I2SExt+0x16>
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <I2SEx_RxISR_I2SExt+0x94>)
 80023a8:	e001      	b.n	80023ae <I2SEx_RxISR_I2SExt+0x1a>
 80023aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ae:	68d8      	ldr	r0, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	1c99      	adds	r1, r3, #2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80023ba:	b282      	uxth	r2, r0
 80023bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d121      	bne.n	800241a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <I2SEx_RxISR_I2SExt+0x90>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <I2SEx_RxISR_I2SExt+0x50>
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <I2SEx_RxISR_I2SExt+0x94>)
 80023e2:	e001      	b.n	80023e8 <I2SEx_RxISR_I2SExt+0x54>
 80023e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	490d      	ldr	r1, [pc, #52]	; (8002424 <I2SEx_RxISR_I2SExt+0x90>)
 80023f0:	428b      	cmp	r3, r1
 80023f2:	d101      	bne.n	80023f8 <I2SEx_RxISR_I2SExt+0x64>
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <I2SEx_RxISR_I2SExt+0x94>)
 80023f6:	e001      	b.n	80023fc <I2SEx_RxISR_I2SExt+0x68>
 80023f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002400:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff03 	bl	8002220 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800241a:	bf00      	nop
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40003800 	.word	0x40003800
 8002428:	40003400 	.word	0x40003400

0800242c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800242c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800242e:	b08f      	sub	sp, #60	; 0x3c
 8002430:	af0a      	add	r7, sp, #40	; 0x28
 8002432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e10f      	b.n	800265e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d106      	bne.n	800245e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f008 fc23 	bl	800aca4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2203      	movs	r2, #3
 8002462:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800246a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f002 f918 	bl	80046b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	687e      	ldr	r6, [r7, #4]
 800248a:	466d      	mov	r5, sp
 800248c:	f106 0410 	add.w	r4, r6, #16
 8002490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002498:	e894 0003 	ldmia.w	r4, {r0, r1}
 800249c:	e885 0003 	stmia.w	r5, {r0, r1}
 80024a0:	1d33      	adds	r3, r6, #4
 80024a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024a4:	6838      	ldr	r0, [r7, #0]
 80024a6:	f001 ffef 	bl	8004488 <USB_CoreInit>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d005      	beq.n	80024bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0d0      	b.n	800265e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 f906 	bl	80046d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e04a      	b.n	8002564 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	333d      	adds	r3, #61	; 0x3d
 80024de:	2201      	movs	r2, #1
 80024e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	333c      	adds	r3, #60	; 0x3c
 80024f2:	7bfa      	ldrb	r2, [r7, #15]
 80024f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	b298      	uxth	r0, r3
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3344      	adds	r3, #68	; 0x44
 800250a:	4602      	mov	r2, r0
 800250c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800250e:	7bfa      	ldrb	r2, [r7, #15]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3340      	adds	r3, #64	; 0x40
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002522:	7bfa      	ldrb	r2, [r7, #15]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4413      	add	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	3348      	adds	r3, #72	; 0x48
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	334c      	adds	r3, #76	; 0x4c
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3354      	adds	r3, #84	; 0x54
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	3301      	adds	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	429a      	cmp	r2, r3
 800256c:	d3af      	bcc.n	80024ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e044      	b.n	80025fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002586:	2200      	movs	r2, #0
 8002588:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800258a:	7bfa      	ldrb	r2, [r7, #15]
 800258c:	6879      	ldr	r1, [r7, #4]
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800259c:	7bfa      	ldrb	r2, [r7, #15]
 800259e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80025cc:	7bfa      	ldrb	r2, [r7, #15]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025e2:	7bfa      	ldrb	r2, [r7, #15]
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	3301      	adds	r3, #1
 80025fc:	73fb      	strb	r3, [r7, #15]
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	429a      	cmp	r2, r3
 8002606:	d3b5      	bcc.n	8002574 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	687e      	ldr	r6, [r7, #4]
 8002610:	466d      	mov	r5, sp
 8002612:	f106 0410 	add.w	r4, r6, #16
 8002616:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002618:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800261c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800261e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002622:	e885 0003 	stmia.w	r5, {r0, r1}
 8002626:	1d33      	adds	r3, r6, #4
 8002628:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262a:	6838      	ldr	r0, [r7, #0]
 800262c:	f002 f89e 	bl	800476c <USB_DevInit>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e00d      	b.n	800265e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f9ed 	bl	8005a36 <USB_DevDisconnect>

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002666 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_PCD_Start+0x1c>
 800267e:	2302      	movs	r3, #2
 8002680:	e020      	b.n	80026c4 <HAL_PCD_Start+0x5e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	2b01      	cmp	r3, #1
 8002690:	d109      	bne.n	80026a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f001 fff0 	bl	8004690 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f003 f99d 	bl	80059f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b08d      	sub	sp, #52	; 0x34
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fa5b 	bl	8005b9e <USB_GetMode>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f040 848a 	bne.w	8003004 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f003 f9bf 	bl	8005a78 <USB_ReadInterrupts>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8480 	beq.w	8003002 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f003 f9ac 	bl	8005a78 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d107      	bne.n	800273a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f002 0202 	and.w	r2, r2, #2
 8002738:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f99a 	bl	8005a78 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b10      	cmp	r3, #16
 800274c:	d161      	bne.n	8002812 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699a      	ldr	r2, [r3, #24]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0210 	bic.w	r2, r2, #16
 800275c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	f003 020f 	and.w	r2, r3, #15
 800276a:	4613      	mov	r3, r2
 800276c:	00db      	lsls	r3, r3, #3
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	4413      	add	r3, r2
 800277a:	3304      	adds	r3, #4
 800277c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	0c5b      	lsrs	r3, r3, #17
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	2b02      	cmp	r3, #2
 8002788:	d124      	bne.n	80027d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d035      	beq.n	8002802 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80027a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	6a38      	ldr	r0, [r7, #32]
 80027aa:	f002 ffd1 	bl	8005750 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	091b      	lsrs	r3, r3, #4
 80027b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027ba:	441a      	add	r2, r3
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	091b      	lsrs	r3, r3, #4
 80027c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027cc:	441a      	add	r2, r3
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	621a      	str	r2, [r3, #32]
 80027d2:	e016      	b.n	8002802 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	0c5b      	lsrs	r3, r3, #17
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	2b06      	cmp	r3, #6
 80027de:	d110      	bne.n	8002802 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027e6:	2208      	movs	r2, #8
 80027e8:	4619      	mov	r1, r3
 80027ea:	6a38      	ldr	r0, [r7, #32]
 80027ec:	f002 ffb0 	bl	8005750 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80027fc:	441a      	add	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0210 	orr.w	r2, r2, #16
 8002810:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f003 f92e 	bl	8005a78 <USB_ReadInterrupts>
 800281c:	4603      	mov	r3, r0
 800281e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002822:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002826:	f040 80a7 	bne.w	8002978 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f003 f933 	bl	8005a9e <USB_ReadDevAllOutEpInterrupt>
 8002838:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800283a:	e099      	b.n	8002970 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 808e 	beq.w	8002964 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f003 f957 	bl	8005b06 <USB_ReadDevOutEPInterrupt>
 8002858:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00c      	beq.n	800287e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	2301      	movs	r3, #1
 8002874:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 fec3 	bl	8003604 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00c      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002894:	461a      	mov	r2, r3
 8002896:	2308      	movs	r3, #8
 8002898:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800289a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 ff99 	bl	80037d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b8:	461a      	mov	r2, r3
 80028ba:	2310      	movs	r3, #16
 80028bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d030      	beq.n	800292a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b80      	cmp	r3, #128	; 0x80
 80028d2:	d109      	bne.n	80028e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	69fa      	ldr	r2, [r7, #28]
 80028de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80028e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ea:	4613      	mov	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	4413      	add	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	4413      	add	r3, r2
 80028fa:	3304      	adds	r3, #4
 80028fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	78db      	ldrb	r3, [r3, #3]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d108      	bne.n	8002918 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	2200      	movs	r2, #0
 800290a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	b2db      	uxtb	r3, r3
 8002910:	4619      	mov	r1, r3
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f008 fada 	bl	800aecc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	4413      	add	r3, r2
 8002920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002924:	461a      	mov	r2, r3
 8002926:	2302      	movs	r3, #2
 8002928:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	015a      	lsls	r2, r3, #5
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002940:	461a      	mov	r2, r3
 8002942:	2320      	movs	r3, #32
 8002944:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	4413      	add	r3, r2
 8002958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800295c:	461a      	mov	r2, r3
 800295e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002962:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	3301      	adds	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	085b      	lsrs	r3, r3, #1
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002972:	2b00      	cmp	r3, #0
 8002974:	f47f af62 	bne.w	800283c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4618      	mov	r0, r3
 800297e:	f003 f87b 	bl	8005a78 <USB_ReadInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002988:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800298c:	f040 80db 	bne.w	8002b46 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 f89c 	bl	8005ad2 <USB_ReadDevAllInEpInterrupt>
 800299a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800299c:	2300      	movs	r3, #0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80029a0:	e0cd      	b.n	8002b3e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80c2 	beq.w	8002b32 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 f8c2 	bl	8005b42 <USB_ReadDevInEPInterrupt>
 80029be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d057      	beq.n	8002a7a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	2201      	movs	r2, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69f9      	ldr	r1, [r7, #28]
 80029e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029ea:	4013      	ands	r3, r2
 80029ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fa:	461a      	mov	r2, r3
 80029fc:	2301      	movs	r3, #1
 80029fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d132      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	334c      	adds	r3, #76	; 0x4c
 8002a18:	6819      	ldr	r1, [r3, #0]
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4403      	add	r3, r0
 8002a28:	3348      	adds	r3, #72	; 0x48
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4419      	add	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	4613      	mov	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4403      	add	r3, r0
 8002a3c:	334c      	adds	r3, #76	; 0x4c
 8002a3e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d113      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x3a2>
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3354      	adds	r3, #84	; 0x54
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d108      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a66:	461a      	mov	r2, r3
 8002a68:	2101      	movs	r1, #1
 8002a6a:	f003 f8c9 	bl	8005c00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f008 f9a4 	bl	800adc2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d008      	beq.n	8002a96 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a90:	461a      	mov	r2, r3
 8002a92:	2308      	movs	r3, #8
 8002a94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aac:	461a      	mov	r2, r3
 8002aae:	2310      	movs	r3, #16
 8002ab0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2340      	movs	r3, #64	; 0x40
 8002acc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d023      	beq.n	8002b20 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ad8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ada:	6a38      	ldr	r0, [r7, #32]
 8002adc:	f001 ffaa 	bl	8004a34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	3338      	adds	r3, #56	; 0x38
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	4413      	add	r3, r2
 8002af0:	3304      	adds	r3, #4
 8002af2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d108      	bne.n	8002b0e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2200      	movs	r2, #0
 8002b00:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f008 f9f1 	bl	800aef0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 fcdb 	bl	80034e8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	3301      	adds	r3, #1
 8002b36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f af2e 	bne.w	80029a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f002 ff94 	bl	8005a78 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b5a:	d122      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d108      	bne.n	8002b8c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b82:	2100      	movs	r1, #0
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fec3 	bl	8003910 <HAL_PCDEx_LPM_Callback>
 8002b8a:	e002      	b.n	8002b92 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f008 f98f 	bl	800aeb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 ff66 	bl	8005a78 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb6:	d112      	bne.n	8002bde <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	f003 0301 	and.w	r3, r3, #1
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d102      	bne.n	8002bce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f008 f94b 	bl	800ae64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002bdc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 ff48 	bl	8005a78 <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf2:	f040 80b7 	bne.w	8002d64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	69fa      	ldr	r2, [r7, #28]
 8002c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c04:	f023 0301 	bic.w	r3, r3, #1
 8002c08:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2110      	movs	r1, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 ff0f 	bl	8004a34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1a:	e046      	b.n	8002caa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c28:	461a      	mov	r2, r3
 8002c2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c2e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c40:	0151      	lsls	r1, r2, #5
 8002c42:	69fa      	ldr	r2, [r7, #28]
 8002c44:	440a      	add	r2, r1
 8002c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c4e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002c62:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c74:	0151      	lsls	r1, r2, #5
 8002c76:	69fa      	ldr	r2, [r7, #28]
 8002c78:	440a      	add	r2, r1
 8002c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002c82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	015a      	lsls	r2, r3, #5
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c94:	0151      	lsls	r1, r2, #5
 8002c96:	69fa      	ldr	r2, [r7, #28]
 8002c98:	440a      	add	r2, r1
 8002c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002c9e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002ca2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d3b3      	bcc.n	8002c1c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cba:	69db      	ldr	r3, [r3, #28]
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cc2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002cc6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce0:	f043 030b 	orr.w	r3, r3, #11
 8002ce4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf0:	69fa      	ldr	r2, [r7, #28]
 8002cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cf6:	f043 030b 	orr.w	r3, r3, #11
 8002cfa:	6453      	str	r3, [r2, #68]	; 0x44
 8002cfc:	e015      	b.n	8002d2a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d10:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002d14:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d24:	f043 030b 	orr.w	r3, r3, #11
 8002d28:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69fa      	ldr	r2, [r7, #28]
 8002d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d38:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002d3c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f002 ff56 	bl	8005c00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fe85 	bl	8005a78 <USB_ReadInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d124      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f002 ff1b 	bl	8005bba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fed0 	bl	8004b2e <USB_GetDevSpeed>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	461a      	mov	r2, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681c      	ldr	r4, [r3, #0]
 8002d9a:	f001 fa29 	bl	80041f0 <HAL_RCC_GetHCLKFreq>
 8002d9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	4620      	mov	r0, r4
 8002daa:	f001 fbcf 	bl	800454c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f008 f82f 	bl	800ae12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002dc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 fe55 	bl	8005a78 <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d10a      	bne.n	8002dee <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f008 f80c 	bl	800adf6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f002 0208 	and.w	r2, r2, #8
 8002dec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f002 fe40 	bl	8005a78 <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b80      	cmp	r3, #128	; 0x80
 8002e00:	d122      	bne.n	8002e48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e0e:	2301      	movs	r3, #1
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
 8002e12:	e014      	b.n	8002e3e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4619      	mov	r1, r3
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fb27 	bl	8003486 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3e5      	bcc.n	8002e14 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f002 fe13 	bl	8005a78 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e5c:	d13b      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5e:	2301      	movs	r3, #1
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
 8002e62:	e02b      	b.n	8002ebc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3340      	adds	r3, #64	; 0x40
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d115      	bne.n	8002eb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002e8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	da12      	bge.n	8002eb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e94:	4613      	mov	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	333f      	adds	r3, #63	; 0x3f
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f000 fae8 	bl	8003486 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb8:	3301      	adds	r3, #1
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d3ce      	bcc.n	8002e64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fdcc 	bl	8005a78 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002eea:	d155      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef0:	e045      	b.n	8002f7e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef4:	015a      	lsls	r2, r3, #5
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d12e      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f1a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	da2b      	bge.n	8002f78 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002f2c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d121      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f38:	4613      	mov	r3, r2
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10a      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f74:	6053      	str	r3, [r2, #4]
            break;
 8002f76:	e007      	b.n	8002f88 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d3b4      	bcc.n	8002ef2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002f96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f002 fd6b 	bl	8005a78 <USB_ReadInterrupts>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d10a      	bne.n	8002fc4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f007 ffb0 	bl	800af14 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fd55 	bl	8005a78 <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d115      	bne.n	8003004 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f007 ffa0 	bl	800af30 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6859      	ldr	r1, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e000      	b.n	8003004 <HAL_PCD_IRQHandler+0x938>
      return;
 8003002:	bf00      	nop
    }
  }
}
 8003004:	3734      	adds	r7, #52	; 0x34
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}

0800300a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b082      	sub	sp, #8
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_PCD_SetAddress+0x1a>
 8003020:	2302      	movs	r3, #2
 8003022:	e013      	b.n	800304c <HAL_PCD_SetAddress+0x42>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f002 fcb3 	bl	80059a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4603      	mov	r3, r0
 8003064:	70fb      	strb	r3, [r7, #3]
 8003066:	460b      	mov	r3, r1
 8003068:	803b      	strh	r3, [r7, #0]
 800306a:	4613      	mov	r3, r2
 800306c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0f      	bge.n	800309a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	3338      	adds	r3, #56	; 0x38
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	e00f      	b.n	80030ba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	3304      	adds	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030c6:	883a      	ldrh	r2, [r7, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	78ba      	ldrb	r2, [r7, #2]
 80030d0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d004      	beq.n	80030e4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030e4:	78bb      	ldrb	r3, [r7, #2]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d102      	bne.n	80030f0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_PCD_EP_Open+0xaa>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e00e      	b.n	800311c <HAL_PCD_EP_Open+0xc8>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	4618      	mov	r0, r3
 800310e:	f001 fd33 	bl	8004b78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800311a:	7afb      	ldrb	r3, [r7, #11]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	da0f      	bge.n	8003158 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 020f 	and.w	r2, r3, #15
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	3338      	adds	r3, #56	; 0x38
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	3304      	adds	r3, #4
 800314e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	705a      	strb	r2, [r3, #1]
 8003156:	e00f      	b.n	8003178 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4413      	add	r3, r2
 800316e:	3304      	adds	r3, #4
 8003170:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	b2da      	uxtb	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_PCD_EP_Close+0x6e>
 800318e:	2302      	movs	r3, #2
 8003190:	e00e      	b.n	80031b0 <HAL_PCD_EP_Close+0x8c>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68f9      	ldr	r1, [r7, #12]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fd71 	bl	8004c88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	460b      	mov	r3, r1
 80031c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031c8:	7afb      	ldrb	r3, [r7, #11]
 80031ca:	f003 020f 	and.w	r2, r3, #15
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4413      	add	r3, r2
 80031de:	3304      	adds	r3, #4
 80031e0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2200      	movs	r2, #0
 80031f2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2200      	movs	r2, #0
 80031f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031fa:	7afb      	ldrb	r3, [r7, #11]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	b2da      	uxtb	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d102      	bne.n	8003214 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003214:	7afb      	ldrb	r3, [r7, #11]
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	2b00      	cmp	r3, #0
 800321c:	d109      	bne.n	8003232 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	6979      	ldr	r1, [r7, #20]
 800322c:	f002 f850 	bl	80052d0 <USB_EP0StartXfer>
 8003230:	e008      	b.n	8003244 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	b2db      	uxtb	r3, r3
 800323c:	461a      	mov	r2, r3
 800323e:	6979      	ldr	r1, [r7, #20]
 8003240:	f001 fdfe 	bl	8004e40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	460b      	mov	r3, r1
 8003258:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	f003 020f 	and.w	r2, r3, #15
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003270:	681b      	ldr	r3, [r3, #0]
}
 8003272:	4618      	mov	r0, r3
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b086      	sub	sp, #24
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	607a      	str	r2, [r7, #4]
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	460b      	mov	r3, r1
 800328c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328e:	7afb      	ldrb	r3, [r7, #11]
 8003290:	f003 020f 	and.w	r2, r3, #15
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	3338      	adds	r3, #56	; 0x38
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2201      	movs	r2, #1
 80032bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032be:	7afb      	ldrb	r3, [r7, #11]
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d102      	bne.n	80032d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032d8:	7afb      	ldrb	r3, [r7, #11]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6979      	ldr	r1, [r7, #20]
 80032f0:	f001 ffee 	bl	80052d0 <USB_EP0StartXfer>
 80032f4:	e008      	b.n	8003308 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6979      	ldr	r1, [r7, #20]
 8003304:	f001 fd9c 	bl	8004e40 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3718      	adds	r7, #24
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	f003 020f 	and.w	r2, r3, #15
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d901      	bls.n	8003330 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e050      	b.n	80033d2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003334:	2b00      	cmp	r3, #0
 8003336:	da0f      	bge.n	8003358 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 020f 	and.w	r2, r3, #15
 800333e:	4613      	mov	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	4413      	add	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	3338      	adds	r3, #56	; 0x38
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	3304      	adds	r3, #4
 800334e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	705a      	strb	r2, [r3, #1]
 8003356:	e00d      	b.n	8003374 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4413      	add	r3, r2
 800336a:	3304      	adds	r3, #4
 800336c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	f003 030f 	and.w	r3, r3, #15
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_PCD_EP_SetStall+0x82>
 8003390:	2302      	movs	r3, #2
 8003392:	e01e      	b.n	80033d2 <HAL_PCD_EP_SetStall+0xc0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68f9      	ldr	r1, [r7, #12]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f002 fa2c 	bl	8005800 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10a      	bne.n	80033c8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6818      	ldr	r0, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	b2d9      	uxtb	r1, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033c2:	461a      	mov	r2, r3
 80033c4:	f002 fc1c 	bl	8005c00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	460b      	mov	r3, r1
 80033e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	f003 020f 	and.w	r2, r3, #15
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d901      	bls.n	80033f8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e042      	b.n	800347e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	da0f      	bge.n	8003420 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 020f 	and.w	r2, r3, #15
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	3338      	adds	r3, #56	; 0x38
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	4413      	add	r3, r2
 8003414:	3304      	adds	r3, #4
 8003416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	705a      	strb	r2, [r3, #1]
 800341e:	e00f      	b.n	8003440 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 020f 	and.w	r2, r3, #15
 8003426:	4613      	mov	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	4413      	add	r3, r2
 8003436:	3304      	adds	r3, #4
 8003438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 030f 	and.w	r3, r3, #15
 800344c:	b2da      	uxtb	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_PCD_EP_ClrStall+0x86>
 800345c:	2302      	movs	r3, #2
 800345e:	e00e      	b.n	800347e <HAL_PCD_EP_ClrStall+0xa4>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	4618      	mov	r0, r3
 8003470:	f002 fa34 	bl	80058dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003492:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	da0c      	bge.n	80034b4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349a:	78fb      	ldrb	r3, [r7, #3]
 800349c:	f003 020f 	and.w	r2, r3, #15
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	3338      	adds	r3, #56	; 0x38
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	4413      	add	r3, r2
 80034ae:	3304      	adds	r3, #4
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e00c      	b.n	80034ce <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	3304      	adds	r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68f9      	ldr	r1, [r7, #12]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f002 f853 	bl	8005580 <USB_EPStopXfer>
 80034da:	4603      	mov	r3, r0
 80034dc:	72fb      	strb	r3, [r7, #11]

  return ret;
 80034de:	7afb      	ldrb	r3, [r7, #11]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	4613      	mov	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4413      	add	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	3338      	adds	r3, #56	; 0x38
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	3304      	adds	r3, #4
 800350e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	429a      	cmp	r2, r3
 800351a:	d901      	bls.n	8003520 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e06c      	b.n	80035fa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	69fa      	ldr	r2, [r7, #28]
 8003532:	429a      	cmp	r2, r3
 8003534:	d902      	bls.n	800353c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	3303      	adds	r3, #3
 8003540:	089b      	lsrs	r3, r3, #2
 8003542:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003544:	e02b      	b.n	800359e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	429a      	cmp	r2, r3
 800355a:	d902      	bls.n	8003562 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	3303      	adds	r3, #3
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6919      	ldr	r1, [r3, #16]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800357a:	b2db      	uxtb	r3, r3
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4603      	mov	r3, r0
 8003580:	6978      	ldr	r0, [r7, #20]
 8003582:	f002 f8a7 	bl	80056d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	691a      	ldr	r2, [r3, #16]
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	441a      	add	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d809      	bhi.n	80035c8 <PCD_WriteEmptyTxFifo+0xe0>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6a1a      	ldr	r2, [r3, #32]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035bc:	429a      	cmp	r2, r3
 80035be:	d203      	bcs.n	80035c8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1be      	bne.n	8003546 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	699a      	ldr	r2, [r3, #24]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d811      	bhi.n	80035f8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	2201      	movs	r2, #1
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	43db      	mvns	r3, r3
 80035ee:	6939      	ldr	r1, [r7, #16]
 80035f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035f4:	4013      	ands	r3, r2
 80035f6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3720      	adds	r7, #32
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	333c      	adds	r3, #60	; 0x3c
 800361c:	3304      	adds	r3, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d17b      	bne.n	8003732 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	4a61      	ldr	r2, [pc, #388]	; (80037cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	f240 80b9 	bls.w	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 80b3 	beq.w	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	4413      	add	r3, r2
 8003662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003666:	461a      	mov	r2, r3
 8003668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366c:	6093      	str	r3, [r2, #8]
 800366e:	e0a7      	b.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	f003 0320 	and.w	r3, r3, #32
 8003676:	2b00      	cmp	r3, #0
 8003678:	d009      	beq.n	800368e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003686:	461a      	mov	r2, r3
 8003688:	2320      	movs	r3, #32
 800368a:	6093      	str	r3, [r2, #8]
 800368c:	e098      	b.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 8093 	bne.w	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	4a4b      	ldr	r2, [pc, #300]	; (80037cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d90f      	bls.n	80036c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00a      	beq.n	80036c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036b8:	461a      	mov	r2, r3
 80036ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036be:	6093      	str	r3, [r2, #8]
 80036c0:	e07e      	b.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	4413      	add	r3, r2
 80036d4:	3304      	adds	r3, #4
 80036d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	0159      	lsls	r1, r3, #5
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	440b      	add	r3, r1
 80036e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036ee:	1ad2      	subs	r2, r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d114      	bne.n	8003724 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800370c:	461a      	mov	r2, r3
 800370e:	2101      	movs	r1, #1
 8003710:	f002 fa76 	bl	8005c00 <USB_EP0_OutStart>
 8003714:	e006      	b.n	8003724 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	4619      	mov	r1, r3
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f007 fb2e 	bl	800ad8c <HAL_PCD_DataOutStageCallback>
 8003730:	e046      	b.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	4a26      	ldr	r2, [pc, #152]	; (80037d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d124      	bne.n	8003784 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	461a      	mov	r2, r3
 8003752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003756:	6093      	str	r3, [r2, #8]
 8003758:	e032      	b.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0320 	and.w	r3, r3, #32
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	2320      	movs	r3, #32
 8003774:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4619      	mov	r1, r3
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f007 fb05 	bl	800ad8c <HAL_PCD_DataOutStageCallback>
 8003782:	e01d      	b.n	80037c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d114      	bne.n	80037b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037ac:	461a      	mov	r2, r3
 80037ae:	2100      	movs	r1, #0
 80037b0:	f002 fa26 	bl	8005c00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f007 fae6 	bl	800ad8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	4f54300a 	.word	0x4f54300a
 80037d0:	4f54310a 	.word	0x4f54310a

080037d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	333c      	adds	r3, #60	; 0x3c
 80037ec:	3304      	adds	r3, #4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	015a      	lsls	r2, r3, #5
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	4413      	add	r3, r2
 80037fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <PCD_EP_OutSetupPacket_int+0x88>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d90e      	bls.n	8003828 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003810:	2b00      	cmp	r3, #0
 8003812:	d009      	beq.n	8003828 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003826:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f007 fa9d 	bl	800ad68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a0a      	ldr	r2, [pc, #40]	; (800385c <PCD_EP_OutSetupPacket_int+0x88>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d90c      	bls.n	8003850 <PCD_EP_OutSetupPacket_int+0x7c>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d108      	bne.n	8003850 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6818      	ldr	r0, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003848:	461a      	mov	r2, r3
 800384a:	2101      	movs	r1, #1
 800384c:	f002 f9d8 	bl	8005c00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	4f54300a 	.word	0x4f54300a

08003860 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
 800386c:	4613      	mov	r3, r2
 800386e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d107      	bne.n	800388e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800387e:	883b      	ldrh	r3, [r7, #0]
 8003880:	0419      	lsls	r1, r3, #16
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	430a      	orrs	r2, r1
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
 800388c:	e028      	b.n	80038e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003894:	0c1b      	lsrs	r3, r3, #16
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	4413      	add	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800389c:	2300      	movs	r3, #0
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e00d      	b.n	80038be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	3340      	adds	r3, #64	; 0x40
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	0c1b      	lsrs	r3, r3, #16
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	4413      	add	r3, r2
 80038b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	3301      	adds	r3, #1
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d3ec      	bcc.n	80038a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80038c8:	883b      	ldrh	r3, [r7, #0]
 80038ca:	0418      	lsls	r0, r3, #16
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	4302      	orrs	r2, r0
 80038d8:	3340      	adds	r3, #64	; 0x40
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e267      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d075      	beq.n	8003a32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003946:	4b88      	ldr	r3, [pc, #544]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b04      	cmp	r3, #4
 8003950:	d00c      	beq.n	800396c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003952:	4b85      	ldr	r3, [pc, #532]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395a:	2b08      	cmp	r3, #8
 800395c:	d112      	bne.n	8003984 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800395e:	4b82      	ldr	r3, [pc, #520]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800396a:	d10b      	bne.n	8003984 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	4b7e      	ldr	r3, [pc, #504]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d05b      	beq.n	8003a30 <HAL_RCC_OscConfig+0x108>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d157      	bne.n	8003a30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e242      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398c:	d106      	bne.n	800399c <HAL_RCC_OscConfig+0x74>
 800398e:	4b76      	ldr	r3, [pc, #472]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a75      	ldr	r2, [pc, #468]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	e01d      	b.n	80039d8 <HAL_RCC_OscConfig+0xb0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a4:	d10c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x98>
 80039a6:	4b70      	ldr	r3, [pc, #448]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6f      	ldr	r2, [pc, #444]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	4b6d      	ldr	r3, [pc, #436]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a6c      	ldr	r2, [pc, #432]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e00b      	b.n	80039d8 <HAL_RCC_OscConfig+0xb0>
 80039c0:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a68      	ldr	r2, [pc, #416]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	4b66      	ldr	r3, [pc, #408]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a65      	ldr	r2, [pc, #404]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d013      	beq.n	8003a08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e0:	f7fd f8e8 	bl	8000bb4 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fd f8e4 	bl	8000bb4 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e207      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f0      	beq.n	80039e8 <HAL_RCC_OscConfig+0xc0>
 8003a06:	e014      	b.n	8003a32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fd f8d4 	bl	8000bb4 <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a10:	f7fd f8d0 	bl	8000bb4 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b64      	cmp	r3, #100	; 0x64
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e1f3      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	4b51      	ldr	r3, [pc, #324]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0xe8>
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d063      	beq.n	8003b06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 030c 	and.w	r3, r3, #12
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d11c      	bne.n	8003a90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a56:	4b44      	ldr	r3, [pc, #272]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a62:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_RCC_OscConfig+0x152>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d001      	beq.n	8003a7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e1c7      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4937      	ldr	r1, [pc, #220]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a8e:	e03a      	b.n	8003b06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d020      	beq.n	8003ada <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a98:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <HAL_RCC_OscConfig+0x244>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fd f889 	bl	8000bb4 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa6:	f7fd f885 	bl	8000bb4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e1a8      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	4b2b      	ldr	r3, [pc, #172]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac4:	4b28      	ldr	r3, [pc, #160]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	00db      	lsls	r3, r3, #3
 8003ad2:	4925      	ldr	r1, [pc, #148]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	600b      	str	r3, [r1, #0]
 8003ad8:	e015      	b.n	8003b06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_RCC_OscConfig+0x244>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd f868 	bl	8000bb4 <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ae6:	e008      	b.n	8003afa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ae8:	f7fd f864 	bl	8000bb4 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e187      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1f0      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d036      	beq.n	8003b80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b1a:	4b15      	ldr	r3, [pc, #84]	; (8003b70 <HAL_RCC_OscConfig+0x248>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fd f848 	bl	8000bb4 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b26:	e008      	b.n	8003b3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b28:	f7fd f844 	bl	8000bb4 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e167      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0f0      	beq.n	8003b28 <HAL_RCC_OscConfig+0x200>
 8003b46:	e01b      	b.n	8003b80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <HAL_RCC_OscConfig+0x248>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b4e:	f7fd f831 	bl	8000bb4 <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b54:	e00e      	b.n	8003b74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b56:	f7fd f82d 	bl	8000bb4 <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	2b02      	cmp	r3, #2
 8003b62:	d907      	bls.n	8003b74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	e150      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	42470000 	.word	0x42470000
 8003b70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b74:	4b88      	ldr	r3, [pc, #544]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ea      	bne.n	8003b56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8097 	beq.w	8003cbc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b92:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10f      	bne.n	8003bbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b7d      	ldr	r3, [pc, #500]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	4a7c      	ldr	r2, [pc, #496]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bac:	6413      	str	r3, [r2, #64]	; 0x40
 8003bae:	4b7a      	ldr	r3, [pc, #488]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbe:	4b77      	ldr	r3, [pc, #476]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d118      	bne.n	8003bfc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bca:	4b74      	ldr	r3, [pc, #464]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a73      	ldr	r2, [pc, #460]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd6:	f7fc ffed 	bl	8000bb4 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bde:	f7fc ffe9 	bl	8000bb4 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e10c      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b6a      	ldr	r3, [pc, #424]	; (8003d9c <HAL_RCC_OscConfig+0x474>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d106      	bne.n	8003c12 <HAL_RCC_OscConfig+0x2ea>
 8003c04:	4b64      	ldr	r3, [pc, #400]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a63      	ldr	r2, [pc, #396]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f043 0301 	orr.w	r3, r3, #1
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c10:	e01c      	b.n	8003c4c <HAL_RCC_OscConfig+0x324>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b05      	cmp	r3, #5
 8003c18:	d10c      	bne.n	8003c34 <HAL_RCC_OscConfig+0x30c>
 8003c1a:	4b5f      	ldr	r3, [pc, #380]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1e:	4a5e      	ldr	r2, [pc, #376]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c20:	f043 0304 	orr.w	r3, r3, #4
 8003c24:	6713      	str	r3, [r2, #112]	; 0x70
 8003c26:	4b5c      	ldr	r3, [pc, #368]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c2a:	4a5b      	ldr	r2, [pc, #364]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c2c:	f043 0301 	orr.w	r3, r3, #1
 8003c30:	6713      	str	r3, [r2, #112]	; 0x70
 8003c32:	e00b      	b.n	8003c4c <HAL_RCC_OscConfig+0x324>
 8003c34:	4b58      	ldr	r3, [pc, #352]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c38:	4a57      	ldr	r2, [pc, #348]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c40:	4b55      	ldr	r3, [pc, #340]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c44:	4a54      	ldr	r2, [pc, #336]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c46:	f023 0304 	bic.w	r3, r3, #4
 8003c4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d015      	beq.n	8003c80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c54:	f7fc ffae 	bl	8000bb4 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5a:	e00a      	b.n	8003c72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c5c:	f7fc ffaa 	bl	8000bb4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d901      	bls.n	8003c72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e0cb      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c72:	4b49      	ldr	r3, [pc, #292]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d0ee      	beq.n	8003c5c <HAL_RCC_OscConfig+0x334>
 8003c7e:	e014      	b.n	8003caa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c80:	f7fc ff98 	bl	8000bb4 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c86:	e00a      	b.n	8003c9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c88:	f7fc ff94 	bl	8000bb4 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0b5      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9e:	4b3e      	ldr	r3, [pc, #248]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1ee      	bne.n	8003c88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d105      	bne.n	8003cbc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb0:	4b39      	ldr	r3, [pc, #228]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80a1 	beq.w	8003e08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cc6:	4b34      	ldr	r3, [pc, #208]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d05c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d141      	bne.n	8003d5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cda:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce0:	f7fc ff68 	bl	8000bb4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fc ff64 	bl	8000bb4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e087      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1f0      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69da      	ldr	r2, [r3, #28]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	019b      	lsls	r3, r3, #6
 8003d16:	431a      	orrs	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	041b      	lsls	r3, r3, #16
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	491b      	ldr	r1, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d30:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d36:	f7fc ff3d 	bl	8000bb4 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d3e:	f7fc ff39 	bl	8000bb4 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e05c      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	4b11      	ldr	r3, [pc, #68]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x416>
 8003d5c:	e054      	b.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d5e:	4b10      	ldr	r3, [pc, #64]	; (8003da0 <HAL_RCC_OscConfig+0x478>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fc ff26 	bl	8000bb4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d6c:	f7fc ff22 	bl	8000bb4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e045      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <HAL_RCC_OscConfig+0x470>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x444>
 8003d8a:	e03d      	b.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d107      	bne.n	8003da4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e038      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
 8003d98:	40023800 	.word	0x40023800
 8003d9c:	40007000 	.word	0x40007000
 8003da0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003da4:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x4ec>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d028      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d121      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d11a      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d111      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	3b01      	subs	r3, #1
 8003dee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d107      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d001      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e000      	b.n	8003e0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40023800 	.word	0x40023800

08003e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0cc      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d90c      	bls.n	8003e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b65      	ldr	r3, [pc, #404]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0307 	and.w	r3, r3, #7
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0b8      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e6c:	4b59      	ldr	r3, [pc, #356]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a58      	ldr	r2, [pc, #352]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0308 	and.w	r3, r3, #8
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e84:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	4a52      	ldr	r2, [pc, #328]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e90:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	494d      	ldr	r1, [pc, #308]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d044      	beq.n	8003f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eb6:	4b47      	ldr	r3, [pc, #284]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d119      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e07f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d003      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d107      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ed6:	4b3f      	ldr	r3, [pc, #252]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e06f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ee6:	4b3b      	ldr	r3, [pc, #236]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e067      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4934      	ldr	r1, [pc, #208]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f08:	f7fc fe54 	bl	8000bb4 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fc fe50 	bl	8000bb4 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e04f      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b2b      	ldr	r3, [pc, #172]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d20c      	bcs.n	8003f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0307 	and.w	r3, r3, #7
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e032      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0304 	and.w	r3, r3, #4
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d008      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f6c:	4b19      	ldr	r3, [pc, #100]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	4916      	ldr	r1, [pc, #88]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d009      	beq.n	8003f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f8a:	4b12      	ldr	r3, [pc, #72]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	00db      	lsls	r3, r3, #3
 8003f98:	490e      	ldr	r1, [pc, #56]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f9e:	f000 f821 	bl	8003fe4 <HAL_RCC_GetSysClockFreq>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	; (8003fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	f003 030f 	and.w	r3, r3, #15
 8003fae:	490a      	ldr	r1, [pc, #40]	; (8003fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb0:	5ccb      	ldrb	r3, [r1, r3]
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	4a09      	ldr	r2, [pc, #36]	; (8003fdc <HAL_RCC_ClockConfig+0x1c4>)
 8003fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fba:	4b09      	ldr	r3, [pc, #36]	; (8003fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fc fdb4 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	40023c00 	.word	0x40023c00
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	0800c300 	.word	0x0800c300
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	20000004 	.word	0x20000004

08003fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fe8:	b094      	sub	sp, #80	; 0x50
 8003fea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ffc:	4b79      	ldr	r3, [pc, #484]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	2b08      	cmp	r3, #8
 8004006:	d00d      	beq.n	8004024 <HAL_RCC_GetSysClockFreq+0x40>
 8004008:	2b08      	cmp	r3, #8
 800400a:	f200 80e1 	bhi.w	80041d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_RCC_GetSysClockFreq+0x34>
 8004012:	2b04      	cmp	r3, #4
 8004014:	d003      	beq.n	800401e <HAL_RCC_GetSysClockFreq+0x3a>
 8004016:	e0db      	b.n	80041d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004018:	4b73      	ldr	r3, [pc, #460]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800401c:	e0db      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800401e:	4b73      	ldr	r3, [pc, #460]	; (80041ec <HAL_RCC_GetSysClockFreq+0x208>)
 8004020:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004022:	e0d8      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004024:	4b6f      	ldr	r3, [pc, #444]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800402c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800402e:	4b6d      	ldr	r3, [pc, #436]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d063      	beq.n	8004102 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800403a:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	099b      	lsrs	r3, r3, #6
 8004040:	2200      	movs	r2, #0
 8004042:	63bb      	str	r3, [r7, #56]	; 0x38
 8004044:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
 800404e:	2300      	movs	r3, #0
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
 8004052:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004056:	4622      	mov	r2, r4
 8004058:	462b      	mov	r3, r5
 800405a:	f04f 0000 	mov.w	r0, #0
 800405e:	f04f 0100 	mov.w	r1, #0
 8004062:	0159      	lsls	r1, r3, #5
 8004064:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004068:	0150      	lsls	r0, r2, #5
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4621      	mov	r1, r4
 8004070:	1a51      	subs	r1, r2, r1
 8004072:	6139      	str	r1, [r7, #16]
 8004074:	4629      	mov	r1, r5
 8004076:	eb63 0301 	sbc.w	r3, r3, r1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004088:	4659      	mov	r1, fp
 800408a:	018b      	lsls	r3, r1, #6
 800408c:	4651      	mov	r1, sl
 800408e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004092:	4651      	mov	r1, sl
 8004094:	018a      	lsls	r2, r1, #6
 8004096:	4651      	mov	r1, sl
 8004098:	ebb2 0801 	subs.w	r8, r2, r1
 800409c:	4659      	mov	r1, fp
 800409e:	eb63 0901 	sbc.w	r9, r3, r1
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040b6:	4690      	mov	r8, r2
 80040b8:	4699      	mov	r9, r3
 80040ba:	4623      	mov	r3, r4
 80040bc:	eb18 0303 	adds.w	r3, r8, r3
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	462b      	mov	r3, r5
 80040c4:	eb49 0303 	adc.w	r3, r9, r3
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040d6:	4629      	mov	r1, r5
 80040d8:	024b      	lsls	r3, r1, #9
 80040da:	4621      	mov	r1, r4
 80040dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040e0:	4621      	mov	r1, r4
 80040e2:	024a      	lsls	r2, r1, #9
 80040e4:	4610      	mov	r0, r2
 80040e6:	4619      	mov	r1, r3
 80040e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ea:	2200      	movs	r2, #0
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040f4:	f7fc f86c 	bl	80001d0 <__aeabi_uldivmod>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4613      	mov	r3, r2
 80040fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004100:	e058      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004102:	4b38      	ldr	r3, [pc, #224]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	099b      	lsrs	r3, r3, #6
 8004108:	2200      	movs	r2, #0
 800410a:	4618      	mov	r0, r3
 800410c:	4611      	mov	r1, r2
 800410e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004112:	623b      	str	r3, [r7, #32]
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
 8004118:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800411c:	4642      	mov	r2, r8
 800411e:	464b      	mov	r3, r9
 8004120:	f04f 0000 	mov.w	r0, #0
 8004124:	f04f 0100 	mov.w	r1, #0
 8004128:	0159      	lsls	r1, r3, #5
 800412a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800412e:	0150      	lsls	r0, r2, #5
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4641      	mov	r1, r8
 8004136:	ebb2 0a01 	subs.w	sl, r2, r1
 800413a:	4649      	mov	r1, r9
 800413c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800414c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004150:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004154:	ebb2 040a 	subs.w	r4, r2, sl
 8004158:	eb63 050b 	sbc.w	r5, r3, fp
 800415c:	f04f 0200 	mov.w	r2, #0
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	00eb      	lsls	r3, r5, #3
 8004166:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800416a:	00e2      	lsls	r2, r4, #3
 800416c:	4614      	mov	r4, r2
 800416e:	461d      	mov	r5, r3
 8004170:	4643      	mov	r3, r8
 8004172:	18e3      	adds	r3, r4, r3
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	464b      	mov	r3, r9
 8004178:	eb45 0303 	adc.w	r3, r5, r3
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	e9d7 4500 	ldrd	r4, r5, [r7]
 800418a:	4629      	mov	r1, r5
 800418c:	028b      	lsls	r3, r1, #10
 800418e:	4621      	mov	r1, r4
 8004190:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004194:	4621      	mov	r1, r4
 8004196:	028a      	lsls	r2, r1, #10
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419e:	2200      	movs	r2, #0
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	61fa      	str	r2, [r7, #28]
 80041a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041a8:	f7fc f812 	bl	80001d0 <__aeabi_uldivmod>
 80041ac:	4602      	mov	r2, r0
 80041ae:	460b      	mov	r3, r1
 80041b0:	4613      	mov	r3, r2
 80041b2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041ce:	e002      	b.n	80041d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041d0:	4b05      	ldr	r3, [pc, #20]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3750      	adds	r7, #80	; 0x50
 80041dc:	46bd      	mov	sp, r7
 80041de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
 80041e8:	00f42400 	.word	0x00f42400
 80041ec:	007a1200 	.word	0x007a1200

080041f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f4:	4b03      	ldr	r3, [pc, #12]	; (8004204 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f6:	681b      	ldr	r3, [r3, #0]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	20000000 	.word	0x20000000

08004208 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800422c:	2b00      	cmp	r3, #0
 800422e:	d035      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004230:	4b62      	ldr	r3, [pc, #392]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004236:	f7fc fcbd 	bl	8000bb4 <HAL_GetTick>
 800423a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800423e:	f7fc fcb9 	bl	8000bb4 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e0b0      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004250:	4b5b      	ldr	r3, [pc, #364]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	019a      	lsls	r2, r3, #6
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	071b      	lsls	r3, r3, #28
 8004268:	4955      	ldr	r1, [pc, #340]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004270:	4b52      	ldr	r3, [pc, #328]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004276:	f7fc fc9d 	bl	8000bb4 <HAL_GetTick>
 800427a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800427e:	f7fc fc99 	bl	8000bb4 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e090      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004290:	4b4b      	ldr	r3, [pc, #300]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8083 	beq.w	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4b44      	ldr	r3, [pc, #272]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	4a43      	ldr	r2, [pc, #268]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b8:	6413      	str	r3, [r2, #64]	; 0x40
 80042ba:	4b41      	ldr	r3, [pc, #260]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80042c6:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a3e      	ldr	r2, [pc, #248]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80042d2:	f7fc fc6f 	bl	8000bb4 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042da:	f7fc fc6b 	bl	8000bb4 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e062      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042ec:	4b35      	ldr	r3, [pc, #212]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042f8:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004300:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02f      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	429a      	cmp	r2, r3
 8004314:	d028      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004316:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004320:	4b29      	ldr	r3, [pc, #164]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004326:	4b28      	ldr	r3, [pc, #160]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800432c:	4a24      	ldr	r2, [pc, #144]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b01      	cmp	r3, #1
 800433c:	d114      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800433e:	f7fc fc39 	bl	8000bb4 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004344:	e00a      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004346:	f7fc fc35 	bl	8000bb4 <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	f241 3288 	movw	r2, #5000	; 0x1388
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e02a      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435c:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0ee      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004374:	d10d      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438a:	490d      	ldr	r1, [pc, #52]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]
 8004390:	e005      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004398:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800439c:	6093      	str	r3, [r2, #8]
 800439e:	4b08      	ldr	r3, [pc, #32]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043aa:	4905      	ldr	r1, [pc, #20]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3718      	adds	r7, #24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	42470068 	.word	0x42470068
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42470e40 	.word	0x42470e40

080043cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d13e      	bne.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043ea:	4b23      	ldr	r3, [pc, #140]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d12f      	bne.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004402:	617b      	str	r3, [r7, #20]
          break;
 8004404:	e02f      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004406:	4b1c      	ldr	r3, [pc, #112]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800440e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004412:	d108      	bne.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004414:	4b18      	ldr	r3, [pc, #96]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800441c:	4a18      	ldr	r2, [pc, #96]	; (8004480 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	613b      	str	r3, [r7, #16]
 8004424:	e007      	b.n	8004436 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004426:	4b14      	ldr	r3, [pc, #80]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800442e:	4a15      	ldr	r2, [pc, #84]	; (8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443c:	099b      	lsrs	r3, r3, #6
 800443e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	fb02 f303 	mul.w	r3, r2, r3
 8004448:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800444c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004450:	0f1b      	lsrs	r3, r3, #28
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
          break;
 800445e:	e002      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
          break;
 8004464:	bf00      	nop
        }
      }
      break;
 8004466:	bf00      	nop
    }
  }
  return frequency;
 8004468:	697b      	ldr	r3, [r7, #20]
}
 800446a:	4618      	mov	r0, r3
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40023800 	.word	0x40023800
 800447c:	00bb8000 	.word	0x00bb8000
 8004480:	007a1200 	.word	0x007a1200
 8004484:	00f42400 	.word	0x00f42400

08004488 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004488:	b084      	sub	sp, #16
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	f107 001c 	add.w	r0, r7, #28
 8004496:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	2b01      	cmp	r3, #1
 800449e:	d122      	bne.n	80044e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80044b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d105      	bne.n	80044da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f001 fbee 	bl	8005cbc <USB_CoreReset>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e01a      	b.n	800451c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 fbe2 	bl	8005cbc <USB_CoreReset>
 80044f8:	4603      	mov	r3, r0
 80044fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	639a      	str	r2, [r3, #56]	; 0x38
 800450e:	e005      	b.n	800451c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004514:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800451c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451e:	2b01      	cmp	r3, #1
 8004520:	d10b      	bne.n	800453a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f043 0206 	orr.w	r2, r3, #6
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f043 0220 	orr.w	r2, r3, #32
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800453a:	7bfb      	ldrb	r3, [r7, #15]
}
 800453c:	4618      	mov	r0, r3
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004546:	b004      	add	sp, #16
 8004548:	4770      	bx	lr
	...

0800454c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d165      	bne.n	800462c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	4a41      	ldr	r2, [pc, #260]	; (8004668 <USB_SetTurnaroundTime+0x11c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d906      	bls.n	8004576 <USB_SetTurnaroundTime+0x2a>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4a40      	ldr	r2, [pc, #256]	; (800466c <USB_SetTurnaroundTime+0x120>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d202      	bcs.n	8004576 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004570:	230f      	movs	r3, #15
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	e062      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4a3c      	ldr	r2, [pc, #240]	; (800466c <USB_SetTurnaroundTime+0x120>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d306      	bcc.n	800458c <USB_SetTurnaroundTime+0x40>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4a3b      	ldr	r2, [pc, #236]	; (8004670 <USB_SetTurnaroundTime+0x124>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d202      	bcs.n	800458c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004586:	230e      	movs	r3, #14
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e057      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4a38      	ldr	r2, [pc, #224]	; (8004670 <USB_SetTurnaroundTime+0x124>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d306      	bcc.n	80045a2 <USB_SetTurnaroundTime+0x56>
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	4a37      	ldr	r2, [pc, #220]	; (8004674 <USB_SetTurnaroundTime+0x128>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d202      	bcs.n	80045a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800459c:	230d      	movs	r3, #13
 800459e:	617b      	str	r3, [r7, #20]
 80045a0:	e04c      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4a33      	ldr	r2, [pc, #204]	; (8004674 <USB_SetTurnaroundTime+0x128>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d306      	bcc.n	80045b8 <USB_SetTurnaroundTime+0x6c>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	4a32      	ldr	r2, [pc, #200]	; (8004678 <USB_SetTurnaroundTime+0x12c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d802      	bhi.n	80045b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80045b2:	230c      	movs	r3, #12
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	e041      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a2f      	ldr	r2, [pc, #188]	; (8004678 <USB_SetTurnaroundTime+0x12c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d906      	bls.n	80045ce <USB_SetTurnaroundTime+0x82>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a2e      	ldr	r2, [pc, #184]	; (800467c <USB_SetTurnaroundTime+0x130>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d802      	bhi.n	80045ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80045c8:	230b      	movs	r3, #11
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e036      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	; (800467c <USB_SetTurnaroundTime+0x130>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d906      	bls.n	80045e4 <USB_SetTurnaroundTime+0x98>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a29      	ldr	r2, [pc, #164]	; (8004680 <USB_SetTurnaroundTime+0x134>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d802      	bhi.n	80045e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045de:	230a      	movs	r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e02b      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <USB_SetTurnaroundTime+0x134>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d906      	bls.n	80045fa <USB_SetTurnaroundTime+0xae>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a25      	ldr	r2, [pc, #148]	; (8004684 <USB_SetTurnaroundTime+0x138>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d202      	bcs.n	80045fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045f4:	2309      	movs	r3, #9
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e020      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a21      	ldr	r2, [pc, #132]	; (8004684 <USB_SetTurnaroundTime+0x138>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d306      	bcc.n	8004610 <USB_SetTurnaroundTime+0xc4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a20      	ldr	r2, [pc, #128]	; (8004688 <USB_SetTurnaroundTime+0x13c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800460a:	2308      	movs	r3, #8
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e015      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a1d      	ldr	r2, [pc, #116]	; (8004688 <USB_SetTurnaroundTime+0x13c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <USB_SetTurnaroundTime+0xda>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a1c      	ldr	r2, [pc, #112]	; (800468c <USB_SetTurnaroundTime+0x140>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d202      	bcs.n	8004626 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004620:	2307      	movs	r3, #7
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e00a      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004626:	2306      	movs	r3, #6
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e007      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004632:	2309      	movs	r3, #9
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e001      	b.n	800463c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004638:	2309      	movs	r3, #9
 800463a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	029b      	lsls	r3, r3, #10
 8004650:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004654:	431a      	orrs	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	371c      	adds	r7, #28
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	00d8acbf 	.word	0x00d8acbf
 800466c:	00e4e1c0 	.word	0x00e4e1c0
 8004670:	00f42400 	.word	0x00f42400
 8004674:	01067380 	.word	0x01067380
 8004678:	011a499f 	.word	0x011a499f
 800467c:	01312cff 	.word	0x01312cff
 8004680:	014ca43f 	.word	0x014ca43f
 8004684:	016e3600 	.word	0x016e3600
 8004688:	01a6ab1f 	.word	0x01a6ab1f
 800468c:	01e84800 	.word	0x01e84800

08004690 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr

080046b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b083      	sub	sp, #12
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 0201 	bic.w	r2, r3, #1
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046f0:	78fb      	ldrb	r3, [r7, #3]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d115      	bne.n	8004722 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004702:	2001      	movs	r0, #1
 8004704:	f7fc fa62 	bl	8000bcc <HAL_Delay>
      ms++;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3301      	adds	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f001 fa45 	bl	8005b9e <USB_GetMode>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d01e      	beq.n	8004758 <USB_SetCurrentMode+0x84>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b31      	cmp	r3, #49	; 0x31
 800471e:	d9f0      	bls.n	8004702 <USB_SetCurrentMode+0x2e>
 8004720:	e01a      	b.n	8004758 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d115      	bne.n	8004754 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004734:	2001      	movs	r0, #1
 8004736:	f7fc fa49 	bl	8000bcc <HAL_Delay>
      ms++;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	3301      	adds	r3, #1
 800473e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f001 fa2c 	bl	8005b9e <USB_GetMode>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d005      	beq.n	8004758 <USB_SetCurrentMode+0x84>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b31      	cmp	r3, #49	; 0x31
 8004750:	d9f0      	bls.n	8004734 <USB_SetCurrentMode+0x60>
 8004752:	e001      	b.n	8004758 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e005      	b.n	8004764 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b32      	cmp	r3, #50	; 0x32
 800475c:	d101      	bne.n	8004762 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800476c:	b084      	sub	sp, #16
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800477a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004786:	2300      	movs	r3, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	e009      	b.n	80047a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	3340      	adds	r3, #64	; 0x40
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	2200      	movs	r2, #0
 8004798:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	3301      	adds	r3, #1
 800479e:	613b      	str	r3, [r7, #16]
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b0e      	cmp	r3, #14
 80047a4:	d9f2      	bls.n	800478c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d11c      	bne.n	80047e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ba:	f043 0302 	orr.w	r3, r3, #2
 80047be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
 80047e4:	e00b      	b.n	80047fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004804:	461a      	mov	r2, r3
 8004806:	2300      	movs	r3, #0
 8004808:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004810:	4619      	mov	r1, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004818:	461a      	mov	r2, r3
 800481a:	680b      	ldr	r3, [r1, #0]
 800481c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	2b01      	cmp	r3, #1
 8004822:	d10c      	bne.n	800483e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	2b00      	cmp	r3, #0
 8004828:	d104      	bne.n	8004834 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800482a:	2100      	movs	r1, #0
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f965 	bl	8004afc <USB_SetDevSpeed>
 8004832:	e008      	b.n	8004846 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004834:	2101      	movs	r1, #1
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 f960 	bl	8004afc <USB_SetDevSpeed>
 800483c:	e003      	b.n	8004846 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800483e:	2103      	movs	r1, #3
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f95b 	bl	8004afc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004846:	2110      	movs	r1, #16
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f8f3 	bl	8004a34 <USB_FlushTxFifo>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f91f 	bl	8004a9c <USB_FlushRxFifo>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800486e:	461a      	mov	r2, r3
 8004870:	2300      	movs	r3, #0
 8004872:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	461a      	mov	r2, r3
 800487c:	2300      	movs	r3, #0
 800487e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	461a      	mov	r2, r3
 8004888:	2300      	movs	r3, #0
 800488a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800488c:	2300      	movs	r3, #0
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e043      	b.n	800491a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048a8:	d118      	bne.n	80048dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048bc:	461a      	mov	r2, r3
 80048be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e013      	b.n	80048ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	015a      	lsls	r2, r3, #5
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d2:	461a      	mov	r2, r3
 80048d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	e008      	b.n	80048ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048e8:	461a      	mov	r2, r3
 80048ea:	2300      	movs	r3, #0
 80048ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fa:	461a      	mov	r2, r3
 80048fc:	2300      	movs	r3, #0
 80048fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	461a      	mov	r2, r3
 800490e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004912:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	3301      	adds	r3, #1
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d3b7      	bcc.n	8004892 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e043      	b.n	80049b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800493a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800493e:	d118      	bne.n	8004972 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10a      	bne.n	800495c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004952:	461a      	mov	r2, r3
 8004954:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004958:	6013      	str	r3, [r2, #0]
 800495a:	e013      	b.n	8004984 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004968:	461a      	mov	r2, r3
 800496a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	e008      	b.n	8004984 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4413      	add	r3, r2
 800497a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497e:	461a      	mov	r2, r3
 8004980:	2300      	movs	r3, #0
 8004982:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004990:	461a      	mov	r2, r3
 8004992:	2300      	movs	r3, #0
 8004994:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	015a      	lsls	r2, r3, #5
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	4413      	add	r3, r2
 800499e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a2:	461a      	mov	r2, r3
 80049a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3301      	adds	r3, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d3b7      	bcc.n	8004928 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d105      	bne.n	80049ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f043 0210 	orr.w	r2, r3, #16
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	699a      	ldr	r2, [r3, #24]
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <USB_DevInit+0x2c4>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d005      	beq.n	8004a0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f043 0208 	orr.w	r2, r3, #8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a18:	f043 0304 	orr.w	r3, r3, #4
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a2c:	b004      	add	sp, #16
 8004a2e:	4770      	bx	lr
 8004a30:	803c3800 	.word	0x803c3800

08004a34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3301      	adds	r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <USB_FlushTxFifo+0x64>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e01b      	b.n	8004a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	daf2      	bge.n	8004a42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	019b      	lsls	r3, r3, #6
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	4a08      	ldr	r2, [pc, #32]	; (8004a98 <USB_FlushTxFifo+0x64>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e006      	b.n	8004a8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d0f0      	beq.n	8004a6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	00030d40 	.word	0x00030d40

08004a9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <USB_FlushRxFifo+0x5c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e018      	b.n	8004aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	daf2      	bge.n	8004aa8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2210      	movs	r2, #16
 8004aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a08      	ldr	r2, [pc, #32]	; (8004af8 <USB_FlushRxFifo+0x5c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d901      	bls.n	8004ade <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e006      	b.n	8004aec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	f003 0310 	and.w	r3, r3, #16
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d0f0      	beq.n	8004acc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	00030d40 	.word	0x00030d40

08004afc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b087      	sub	sp, #28
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f003 0306 	and.w	r3, r3, #6
 8004b46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]
 8004b52:	e00a      	b.n	8004b6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d002      	beq.n	8004b60 <USB_GetDevSpeed+0x32>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b06      	cmp	r3, #6
 8004b5e:	d102      	bne.n	8004b66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b60:	2302      	movs	r3, #2
 8004b62:	75fb      	strb	r3, [r7, #23]
 8004b64:	e001      	b.n	8004b6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b66:	230f      	movs	r3, #15
 8004b68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	785b      	ldrb	r3, [r3, #1]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d13a      	bne.n	8004c0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d155      	bne.n	8004c78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	791b      	ldrb	r3, [r3, #4]
 8004be6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004be8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	059b      	lsls	r3, r3, #22
 8004bee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	68ba      	ldr	r2, [r7, #8]
 8004bf4:	0151      	lsls	r1, r2, #5
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	440a      	add	r2, r1
 8004bfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	e036      	b.n	8004c78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c10:	69da      	ldr	r2, [r3, #28]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c20:	041b      	lsls	r3, r3, #16
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d11a      	bne.n	8004c78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	791b      	ldrb	r3, [r3, #4]
 8004c5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	4313      	orrs	r3, r2
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	0151      	lsls	r1, r2, #5
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	440a      	add	r2, r1
 8004c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	785b      	ldrb	r3, [r3, #1]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d161      	bne.n	8004d68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cba:	d11f      	bne.n	8004cfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	015a      	lsls	r2, r3, #5
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	0151      	lsls	r1, r2, #5
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	440a      	add	r2, r1
 8004cd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f003 030f 	and.w	r3, r3, #15
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	43db      	mvns	r3, r3
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f003 030f 	and.w	r3, r3, #15
 8004d30:	2101      	movs	r1, #1
 8004d32:	fa01 f303 	lsl.w	r3, r1, r3
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	68f9      	ldr	r1, [r7, #12]
 8004d3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d40:	4013      	ands	r3, r2
 8004d42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	0159      	lsls	r1, r3, #5
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	440b      	add	r3, r1
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	4619      	mov	r1, r3
 8004d60:	4b35      	ldr	r3, [pc, #212]	; (8004e38 <USB_DeactivateEndpoint+0x1b0>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]
 8004d66:	e060      	b.n	8004e2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	015a      	lsls	r2, r3, #5
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4413      	add	r3, r2
 8004d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d7e:	d11f      	bne.n	8004dc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	0151      	lsls	r1, r2, #5
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	440a      	add	r2, r1
 8004d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004de0:	4013      	ands	r3, r2
 8004de2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	69da      	ldr	r2, [r3, #28]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	43db      	mvns	r3, r3
 8004dfe:	68f9      	ldr	r1, [r7, #12]
 8004e00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e04:	4013      	ands	r3, r2
 8004e06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	0159      	lsls	r1, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	4619      	mov	r1, r3
 8004e24:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <USB_DeactivateEndpoint+0x1b4>)
 8004e26:	4013      	ands	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	ec337800 	.word	0xec337800
 8004e3c:	eff37800 	.word	0xeff37800

08004e40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	f040 815c 	bne.w	800511a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d132      	bne.n	8004ed0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	015a      	lsls	r2, r3, #5
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	4413      	add	r3, r2
 8004e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	0151      	lsls	r1, r2, #5
 8004ea0:	69fa      	ldr	r2, [r7, #28]
 8004ea2:	440a      	add	r2, r1
 8004ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	0151      	lsls	r1, r2, #5
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	440a      	add	r2, r1
 8004ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec8:	0cdb      	lsrs	r3, r3, #19
 8004eca:	04db      	lsls	r3, r3, #19
 8004ecc:	6113      	str	r3, [r2, #16]
 8004ece:	e074      	b.n	8004fba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	0151      	lsls	r1, r2, #5
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	440a      	add	r2, r1
 8004ee6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eea:	0cdb      	lsrs	r3, r3, #19
 8004eec:	04db      	lsls	r3, r3, #19
 8004eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f20:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6999      	ldr	r1, [r3, #24]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	440b      	add	r3, r1
 8004f2c:	1e59      	subs	r1, r3, #1
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f36:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f38:	4b9d      	ldr	r3, [pc, #628]	; (80051b0 <USB_EPStartXfer+0x370>)
 8004f3a:	400b      	ands	r3, r1
 8004f3c:	69b9      	ldr	r1, [r7, #24]
 8004f3e:	0148      	lsls	r0, r1, #5
 8004f40:	69f9      	ldr	r1, [r7, #28]
 8004f42:	4401      	add	r1, r0
 8004f44:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f62:	69b9      	ldr	r1, [r7, #24]
 8004f64:	0148      	lsls	r0, r1, #5
 8004f66:	69f9      	ldr	r1, [r7, #28]
 8004f68:	4401      	add	r1, r0
 8004f6a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	791b      	ldrb	r3, [r3, #4]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d11f      	bne.n	8004fba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	015a      	lsls	r2, r3, #5
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	0151      	lsls	r1, r2, #5
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	440a      	add	r2, r1
 8004f90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f94:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f98:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	0151      	lsls	r1, r2, #5
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	440a      	add	r2, r1
 8004fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fb8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d14b      	bne.n	8005058 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004fc8:	69bb      	ldr	r3, [r7, #24]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	791b      	ldrb	r3, [r3, #4]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d128      	bne.n	8005036 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d110      	bne.n	8005016 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	0151      	lsls	r1, r2, #5
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	440a      	add	r2, r1
 800500a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	e00f      	b.n	8005036 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005034:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e133      	b.n	80052c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005076:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d015      	beq.n	80050ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 811b 	beq.w	80052c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	2101      	movs	r1, #1
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	69f9      	ldr	r1, [r7, #28]
 80050a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050a6:	4313      	orrs	r3, r2
 80050a8:	634b      	str	r3, [r1, #52]	; 0x34
 80050aa:	e109      	b.n	80052c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d110      	bne.n	80050de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69ba      	ldr	r2, [r7, #24]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	e00f      	b.n	80050fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6919      	ldr	r1, [r3, #16]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	781a      	ldrb	r2, [r3, #0]
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	b298      	uxth	r0, r3
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	4603      	mov	r3, r0
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 fade 	bl	80056d4 <USB_WritePacket>
 8005118:	e0d2      	b.n	80052c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	69fa      	ldr	r2, [r7, #28]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005134:	0cdb      	lsrs	r3, r3, #19
 8005136:	04db      	lsls	r3, r3, #19
 8005138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	691b      	ldr	r3, [r3, #16]
 8005148:	69ba      	ldr	r2, [r7, #24]
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005154:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005158:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800515c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d126      	bne.n	80051b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	0148      	lsls	r0, r1, #5
 8005180:	69f9      	ldr	r1, [r7, #28]
 8005182:	4401      	add	r1, r0
 8005184:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005188:	4313      	orrs	r3, r2
 800518a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	4413      	add	r3, r2
 8005194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	0151      	lsls	r1, r2, #5
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	440a      	add	r2, r1
 80051a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051aa:	6113      	str	r3, [r2, #16]
 80051ac:	e03a      	b.n	8005224 <USB_EPStartXfer+0x3e4>
 80051ae:	bf00      	nop
 80051b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	699a      	ldr	r2, [r3, #24]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	1e5a      	subs	r2, r3, #1
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	8afa      	ldrh	r2, [r7, #22]
 80051d0:	fb03 f202 	mul.w	r2, r3, r2
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	8afb      	ldrh	r3, [r7, #22]
 80051e8:	04d9      	lsls	r1, r3, #19
 80051ea:	4b38      	ldr	r3, [pc, #224]	; (80052cc <USB_EPStartXfer+0x48c>)
 80051ec:	400b      	ands	r3, r1
 80051ee:	69b9      	ldr	r1, [r7, #24]
 80051f0:	0148      	lsls	r0, r1, #5
 80051f2:	69f9      	ldr	r1, [r7, #28]
 80051f4:	4401      	add	r1, r0
 80051f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051fa:	4313      	orrs	r3, r2
 80051fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	69db      	ldr	r3, [r3, #28]
 8005210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005214:	69b9      	ldr	r1, [r7, #24]
 8005216:	0148      	lsls	r0, r1, #5
 8005218:	69f9      	ldr	r1, [r7, #28]
 800521a:	4401      	add	r1, r0
 800521c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005220:	4313      	orrs	r3, r2
 8005222:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005224:	79fb      	ldrb	r3, [r7, #7]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d10d      	bne.n	8005246 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	6919      	ldr	r1, [r3, #16]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005242:	460a      	mov	r2, r1
 8005244:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	791b      	ldrb	r3, [r3, #4]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d128      	bne.n	80052a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d110      	bne.n	8005280 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	69fb      	ldr	r3, [r7, #28]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005278:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	e00f      	b.n	80052a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69ba      	ldr	r2, [r7, #24]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	69fa      	ldr	r2, [r7, #28]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80052be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	1ff80000 	.word	0x1ff80000

080052d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	f040 80ce 	bne.w	800548e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d132      	bne.n	8005360 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005314:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005318:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800531c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	015a      	lsls	r2, r3, #5
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	4413      	add	r3, r2
 8005326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	0151      	lsls	r1, r2, #5
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	440a      	add	r2, r1
 8005334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005338:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800533c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005358:	0cdb      	lsrs	r3, r3, #19
 800535a:	04db      	lsls	r3, r3, #19
 800535c:	6113      	str	r3, [r2, #16]
 800535e:	e04e      	b.n	80053fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	0cdb      	lsrs	r3, r3, #19
 800537c:	04db      	lsls	r3, r3, #19
 800537e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	0151      	lsls	r1, r2, #5
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	440a      	add	r2, r1
 8005396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800539e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d903      	bls.n	80053b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	691a      	ldr	r2, [r3, #16]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ee:	6939      	ldr	r1, [r7, #16]
 80053f0:	0148      	lsls	r0, r1, #5
 80053f2:	6979      	ldr	r1, [r7, #20]
 80053f4:	4401      	add	r1, r0
 80053f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053fa:	4313      	orrs	r3, r2
 80053fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d11e      	bne.n	8005442 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	695b      	ldr	r3, [r3, #20]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d009      	beq.n	8005420 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005418:	461a      	mov	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	e097      	b.n	8005572 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	4413      	add	r3, r2
 800544a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	440a      	add	r2, r1
 8005458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800545c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005460:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 8083 	beq.w	8005572 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 030f 	and.w	r3, r3, #15
 800547c:	2101      	movs	r1, #1
 800547e:	fa01 f303 	lsl.w	r3, r1, r3
 8005482:	6979      	ldr	r1, [r7, #20]
 8005484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005488:	4313      	orrs	r3, r2
 800548a:	634b      	str	r3, [r1, #52]	; 0x34
 800548c:	e071      	b.n	8005572 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	0151      	lsls	r1, r2, #5
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	440a      	add	r2, r1
 80054a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054a8:	0cdb      	lsrs	r3, r3, #19
 80054aa:	04db      	lsls	r3, r3, #19
 80054ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80054cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	68da      	ldr	r2, [r3, #12]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005508:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005520:	6939      	ldr	r1, [r7, #16]
 8005522:	0148      	lsls	r0, r1, #5
 8005524:	6979      	ldr	r1, [r7, #20]
 8005526:	4401      	add	r1, r0
 8005528:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800552c:	4313      	orrs	r3, r2
 800552e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d10d      	bne.n	8005552 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d009      	beq.n	8005552 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6919      	ldr	r1, [r3, #16]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	460a      	mov	r2, r1
 8005550:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	4413      	add	r3, r2
 800555a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	0151      	lsls	r1, r2, #5
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	440a      	add	r2, r1
 8005568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005570:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005580:	b480      	push	{r7}
 8005582:	b087      	sub	sp, #28
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d14a      	bne.n	8005634 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055b6:	f040 8086 	bne.w	80056c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	015a      	lsls	r2, r3, #5
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	4413      	add	r3, r2
 80055c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	7812      	ldrb	r2, [r2, #0]
 80055ce:	0151      	lsls	r1, r2, #5
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	440a      	add	r2, r1
 80055d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005600:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	3301      	adds	r3, #1
 8005606:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f242 7210 	movw	r2, #10000	; 0x2710
 800560e:	4293      	cmp	r3, r2
 8005610:	d902      	bls.n	8005618 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
          break;
 8005616:	e056      	b.n	80056c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800562c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005630:	d0e7      	beq.n	8005602 <USB_EPStopXfer+0x82>
 8005632:	e048      	b.n	80056c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800564c:	d13b      	bne.n	80056c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	683a      	ldr	r2, [r7, #0]
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	0151      	lsls	r1, r2, #5
 8005664:	693a      	ldr	r2, [r7, #16]
 8005666:	440a      	add	r2, r1
 8005668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800566c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005670:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	015a      	lsls	r2, r3, #5
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	4413      	add	r3, r2
 800567c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	7812      	ldrb	r2, [r2, #0]
 8005686:	0151      	lsls	r1, r2, #5
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	440a      	add	r2, r1
 800568c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005690:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005694:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3301      	adds	r3, #1
 800569a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f242 7210 	movw	r2, #10000	; 0x2710
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d902      	bls.n	80056ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	75fb      	strb	r3, [r7, #23]
          break;
 80056aa:	e00c      	b.n	80056c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056c4:	d0e7      	beq.n	8005696 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80056c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	371c      	adds	r7, #28
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b089      	sub	sp, #36	; 0x24
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	4611      	mov	r1, r2
 80056e0:	461a      	mov	r2, r3
 80056e2:	460b      	mov	r3, r1
 80056e4:	71fb      	strb	r3, [r7, #7]
 80056e6:	4613      	mov	r3, r2
 80056e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d123      	bne.n	8005742 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056fa:	88bb      	ldrh	r3, [r7, #4]
 80056fc:	3303      	adds	r3, #3
 80056fe:	089b      	lsrs	r3, r3, #2
 8005700:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005702:	2300      	movs	r3, #0
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e018      	b.n	800573a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	031a      	lsls	r2, r3, #12
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	4413      	add	r3, r2
 8005710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005714:	461a      	mov	r2, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	3301      	adds	r3, #1
 8005720:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	3301      	adds	r3, #1
 8005726:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	3301      	adds	r3, #1
 800572c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3301      	adds	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	3301      	adds	r3, #1
 8005738:	61bb      	str	r3, [r7, #24]
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	429a      	cmp	r2, r3
 8005740:	d3e2      	bcc.n	8005708 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3724      	adds	r7, #36	; 0x24
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005750:	b480      	push	{r7}
 8005752:	b08b      	sub	sp, #44	; 0x2c
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	b29b      	uxth	r3, r3
 800576c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005776:	2300      	movs	r3, #0
 8005778:	623b      	str	r3, [r7, #32]
 800577a:	e014      	b.n	80057a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005786:	601a      	str	r2, [r3, #0]
    pDest++;
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	3301      	adds	r3, #1
 800578c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	3301      	adds	r3, #1
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005796:	3301      	adds	r3, #1
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	3301      	adds	r3, #1
 800579e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	3301      	adds	r3, #1
 80057a4:	623b      	str	r3, [r7, #32]
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d3e6      	bcc.n	800577c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057ae:	8bfb      	ldrh	r3, [r7, #30]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01e      	beq.n	80057f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057b4:	2300      	movs	r3, #0
 80057b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057be:	461a      	mov	r2, r3
 80057c0:	f107 0310 	add.w	r3, r7, #16
 80057c4:	6812      	ldr	r2, [r2, #0]
 80057c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	701a      	strb	r2, [r3, #0]
      i++;
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	3301      	adds	r3, #1
 80057de:	623b      	str	r3, [r7, #32]
      pDest++;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	3301      	adds	r3, #1
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057e6:	8bfb      	ldrh	r3, [r7, #30]
 80057e8:	3b01      	subs	r3, #1
 80057ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057ec:	8bfb      	ldrh	r3, [r7, #30]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1ea      	bne.n	80057c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	372c      	adds	r7, #44	; 0x2c
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d12c      	bne.n	8005876 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	db12      	blt.n	8005854 <USB_EPSetStall+0x54>
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00f      	beq.n	8005854 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4413      	add	r3, r2
 800583c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	0151      	lsls	r1, r2, #5
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	440a      	add	r2, r1
 800584a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800584e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005852:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	015a      	lsls	r2, r3, #5
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	4413      	add	r3, r2
 800585c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	0151      	lsls	r1, r2, #5
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	440a      	add	r2, r1
 800586a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800586e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	e02b      	b.n	80058ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	db12      	blt.n	80058ae <USB_EPSetStall+0xae>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00f      	beq.n	80058ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	4413      	add	r3, r2
 8005896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d128      	bne.n	800594a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005916:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	791b      	ldrb	r3, [r3, #4]
 800591c:	2b03      	cmp	r3, #3
 800591e:	d003      	beq.n	8005928 <USB_EPClearStall+0x4c>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	791b      	ldrb	r3, [r3, #4]
 8005924:	2b02      	cmp	r3, #2
 8005926:	d138      	bne.n	800599a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	e027      	b.n	800599a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005968:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	791b      	ldrb	r3, [r3, #4]
 800596e:	2b03      	cmp	r3, #3
 8005970:	d003      	beq.n	800597a <USB_EPClearStall+0x9e>
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	791b      	ldrb	r3, [r3, #4]
 8005976:	2b02      	cmp	r3, #2
 8005978:	d10f      	bne.n	800599a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	015a      	lsls	r2, r3, #5
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4413      	add	r3, r2
 8005982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	0151      	lsls	r1, r2, #5
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	440a      	add	r2, r1
 8005990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	460b      	mov	r3, r1
 80059b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80059ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	78fb      	ldrb	r3, [r7, #3]
 80059d6:	011b      	lsls	r3, r3, #4
 80059d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059dc:	68f9      	ldr	r1, [r7, #12]
 80059de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059e2:	4313      	orrs	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a0e:	f023 0303 	bic.w	r3, r3, #3
 8005a12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a22:	f023 0302 	bic.w	r3, r3, #2
 8005a26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a36:	b480      	push	{r7}
 8005a38:	b085      	sub	sp, #20
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a50:	f023 0303 	bic.w	r3, r3, #3
 8005a54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a64:	f043 0302 	orr.w	r3, r3, #2
 8005a68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a90:	68fb      	ldr	r3, [r7, #12]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	4013      	ands	r3, r2
 8005ac0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	0c1b      	lsrs	r3, r3, #16
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aee:	69db      	ldr	r3, [r3, #28]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	b29b      	uxth	r3, r3
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b085      	sub	sp, #20
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2c:	695b      	ldr	r3, [r3, #20]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b34:	68bb      	ldr	r3, [r7, #8]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b72:	01db      	lsls	r3, r3, #7
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	015a      	lsls	r2, r3, #5
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	4413      	add	r3, r2
 8005b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b90:	68bb      	ldr	r3, [r7, #8]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0301 	and.w	r3, r3, #1
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b085      	sub	sp, #20
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005bd8:	f023 0307 	bic.w	r3, r3, #7
 8005bdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bf0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3714      	adds	r7, #20
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	333c      	adds	r3, #60	; 0x3c
 8005c16:	3304      	adds	r3, #4
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <USB_EP0_OutStart+0xb8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d90a      	bls.n	8005c3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c34:	d101      	bne.n	8005c3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e037      	b.n	8005caa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	461a      	mov	r2, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c68:	f043 0318 	orr.w	r3, r3, #24
 8005c6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c82:	7afb      	ldrb	r3, [r7, #11]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d10f      	bne.n	8005ca8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c8e:	461a      	mov	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ca2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	371c      	adds	r7, #28
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	4f54300a 	.word	0x4f54300a

08005cbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <USB_CoreReset+0x64>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d901      	bls.n	8005cda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e01b      	b.n	8005d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	daf2      	bge.n	8005cc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f043 0201 	orr.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <USB_CoreReset+0x64>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e006      	b.n	8005d12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d0f0      	beq.n	8005cf2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	00030d40 	.word	0x00030d40

08005d24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d34:	f005 fa94 	bl	800b260 <USBD_static_malloc>
 8005d38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d109      	bne.n	8005d54 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	32b0      	adds	r2, #176	; 0xb0
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d50:	2302      	movs	r3, #2
 8005d52:	e0d4      	b.n	8005efe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d54:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d58:	2100      	movs	r1, #0
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f006 fa1c 	bl	800c198 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	32b0      	adds	r2, #176	; 0xb0
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	32b0      	adds	r2, #176	; 0xb0
 8005d7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	7c1b      	ldrb	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d138      	bne.n	8005dfe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d8c:	4b5e      	ldr	r3, [pc, #376]	; (8005f08 <USBD_CDC_Init+0x1e4>)
 8005d8e:	7819      	ldrb	r1, [r3, #0]
 8005d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d94:	2202      	movs	r2, #2
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f005 f93f 	bl	800b01a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d9c:	4b5a      	ldr	r3, [pc, #360]	; (8005f08 <USBD_CDC_Init+0x1e4>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f003 020f 	and.w	r2, r3, #15
 8005da4:	6879      	ldr	r1, [r7, #4]
 8005da6:	4613      	mov	r3, r2
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	440b      	add	r3, r1
 8005db0:	3324      	adds	r3, #36	; 0x24
 8005db2:	2201      	movs	r2, #1
 8005db4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005db6:	4b55      	ldr	r3, [pc, #340]	; (8005f0c <USBD_CDC_Init+0x1e8>)
 8005db8:	7819      	ldrb	r1, [r3, #0]
 8005dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f005 f92a 	bl	800b01a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dc6:	4b51      	ldr	r3, [pc, #324]	; (8005f0c <USBD_CDC_Init+0x1e8>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	6879      	ldr	r1, [r7, #4]
 8005dd0:	4613      	mov	r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	440b      	add	r3, r1
 8005dda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dde:	2201      	movs	r2, #1
 8005de0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005de2:	4b4b      	ldr	r3, [pc, #300]	; (8005f10 <USBD_CDC_Init+0x1ec>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	f003 020f 	and.w	r2, r3, #15
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	3326      	adds	r3, #38	; 0x26
 8005df8:	2210      	movs	r2, #16
 8005dfa:	801a      	strh	r2, [r3, #0]
 8005dfc:	e035      	b.n	8005e6a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dfe:	4b42      	ldr	r3, [pc, #264]	; (8005f08 <USBD_CDC_Init+0x1e4>)
 8005e00:	7819      	ldrb	r1, [r3, #0]
 8005e02:	2340      	movs	r3, #64	; 0x40
 8005e04:	2202      	movs	r2, #2
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f005 f907 	bl	800b01a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e0c:	4b3e      	ldr	r3, [pc, #248]	; (8005f08 <USBD_CDC_Init+0x1e4>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3324      	adds	r3, #36	; 0x24
 8005e22:	2201      	movs	r2, #1
 8005e24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e26:	4b39      	ldr	r3, [pc, #228]	; (8005f0c <USBD_CDC_Init+0x1e8>)
 8005e28:	7819      	ldrb	r1, [r3, #0]
 8005e2a:	2340      	movs	r3, #64	; 0x40
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f005 f8f3 	bl	800b01a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e34:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <USBD_CDC_Init+0x1e8>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	f003 020f 	and.w	r2, r3, #15
 8005e3c:	6879      	ldr	r1, [r7, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	440b      	add	r3, r1
 8005e48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e50:	4b2f      	ldr	r3, [pc, #188]	; (8005f10 <USBD_CDC_Init+0x1ec>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	f003 020f 	and.w	r2, r3, #15
 8005e58:	6879      	ldr	r1, [r7, #4]
 8005e5a:	4613      	mov	r3, r2
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	440b      	add	r3, r1
 8005e64:	3326      	adds	r3, #38	; 0x26
 8005e66:	2210      	movs	r2, #16
 8005e68:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e6a:	4b29      	ldr	r3, [pc, #164]	; (8005f10 <USBD_CDC_Init+0x1ec>)
 8005e6c:	7819      	ldrb	r1, [r3, #0]
 8005e6e:	2308      	movs	r3, #8
 8005e70:	2203      	movs	r2, #3
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f005 f8d1 	bl	800b01a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e78:	4b25      	ldr	r3, [pc, #148]	; (8005f10 <USBD_CDC_Init+0x1ec>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f003 020f 	and.w	r2, r3, #15
 8005e80:	6879      	ldr	r1, [r7, #4]
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	440b      	add	r3, r1
 8005e8c:	3324      	adds	r3, #36	; 0x24
 8005e8e:	2201      	movs	r2, #1
 8005e90:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	33b0      	adds	r3, #176	; 0xb0
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e018      	b.n	8005efe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	7c1b      	ldrb	r3, [r3, #16]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10a      	bne.n	8005eea <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ed4:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <USBD_CDC_Init+0x1e8>)
 8005ed6:	7819      	ldrb	r1, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f005 f988 	bl	800b1f8 <USBD_LL_PrepareReceive>
 8005ee8:	e008      	b.n	8005efc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eea:	4b08      	ldr	r3, [pc, #32]	; (8005f0c <USBD_CDC_Init+0x1e8>)
 8005eec:	7819      	ldrb	r1, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ef4:	2340      	movs	r3, #64	; 0x40
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f005 f97e 	bl	800b1f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20000093 	.word	0x20000093
 8005f0c:	20000094 	.word	0x20000094
 8005f10:	20000095 	.word	0x20000095

08005f14 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f20:	4b3a      	ldr	r3, [pc, #232]	; (800600c <USBD_CDC_DeInit+0xf8>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	4619      	mov	r1, r3
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f005 f89d 	bl	800b066 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f2c:	4b37      	ldr	r3, [pc, #220]	; (800600c <USBD_CDC_DeInit+0xf8>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 020f 	and.w	r2, r3, #15
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	3324      	adds	r3, #36	; 0x24
 8005f42:	2200      	movs	r2, #0
 8005f44:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f46:	4b32      	ldr	r3, [pc, #200]	; (8006010 <USBD_CDC_DeInit+0xfc>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f005 f88a 	bl	800b066 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f52:	4b2f      	ldr	r3, [pc, #188]	; (8006010 <USBD_CDC_DeInit+0xfc>)
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	f003 020f 	and.w	r2, r3, #15
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f6e:	4b29      	ldr	r3, [pc, #164]	; (8006014 <USBD_CDC_DeInit+0x100>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f005 f876 	bl	800b066 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f7a:	4b26      	ldr	r3, [pc, #152]	; (8006014 <USBD_CDC_DeInit+0x100>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f003 020f 	and.w	r2, r3, #15
 8005f82:	6879      	ldr	r1, [r7, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	3324      	adds	r3, #36	; 0x24
 8005f90:	2200      	movs	r2, #0
 8005f92:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f94:	4b1f      	ldr	r3, [pc, #124]	; (8006014 <USBD_CDC_DeInit+0x100>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3326      	adds	r3, #38	; 0x26
 8005faa:	2200      	movs	r2, #0
 8005fac:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	32b0      	adds	r2, #176	; 0xb0
 8005fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01f      	beq.n	8006000 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	33b0      	adds	r3, #176	; 0xb0
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	32b0      	adds	r2, #176	; 0xb0
 8005fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f005 f94a 	bl	800b27c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	32b0      	adds	r2, #176	; 0xb0
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	3708      	adds	r7, #8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	20000093 	.word	0x20000093
 8006010:	20000094 	.word	0x20000094
 8006014:	20000095 	.word	0x20000095

08006018 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	32b0      	adds	r2, #176	; 0xb0
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006044:	2303      	movs	r3, #3
 8006046:	e0bf      	b.n	80061c8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006050:	2b00      	cmp	r3, #0
 8006052:	d050      	beq.n	80060f6 <USBD_CDC_Setup+0xde>
 8006054:	2b20      	cmp	r3, #32
 8006056:	f040 80af 	bne.w	80061b8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	88db      	ldrh	r3, [r3, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d03a      	beq.n	80060d8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	b25b      	sxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	da1b      	bge.n	80060a4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	33b0      	adds	r3, #176	; 0xb0
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006082:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	88d2      	ldrh	r2, [r2, #6]
 8006088:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	88db      	ldrh	r3, [r3, #6]
 800608e:	2b07      	cmp	r3, #7
 8006090:	bf28      	it	cs
 8006092:	2307      	movcs	r3, #7
 8006094:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	89fa      	ldrh	r2, [r7, #14]
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f001 fd89 	bl	8007bb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80060a2:	e090      	b.n	80061c6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	785a      	ldrb	r2, [r3, #1]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	88db      	ldrh	r3, [r3, #6]
 80060b2:	2b3f      	cmp	r3, #63	; 0x3f
 80060b4:	d803      	bhi.n	80060be <USBD_CDC_Setup+0xa6>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	88db      	ldrh	r3, [r3, #6]
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	e000      	b.n	80060c0 <USBD_CDC_Setup+0xa8>
 80060be:	2240      	movs	r2, #64	; 0x40
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80060c6:	6939      	ldr	r1, [r7, #16]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80060ce:	461a      	mov	r2, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f001 fd9b 	bl	8007c0c <USBD_CtlPrepareRx>
      break;
 80060d6:	e076      	b.n	80061c6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	33b0      	adds	r3, #176	; 0xb0
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	7850      	ldrb	r0, [r2, #1]
 80060ee:	2200      	movs	r2, #0
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	4798      	blx	r3
      break;
 80060f4:	e067      	b.n	80061c6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	785b      	ldrb	r3, [r3, #1]
 80060fa:	2b0b      	cmp	r3, #11
 80060fc:	d851      	bhi.n	80061a2 <USBD_CDC_Setup+0x18a>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <USBD_CDC_Setup+0xec>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006135 	.word	0x08006135
 8006108:	080061b1 	.word	0x080061b1
 800610c:	080061a3 	.word	0x080061a3
 8006110:	080061a3 	.word	0x080061a3
 8006114:	080061a3 	.word	0x080061a3
 8006118:	080061a3 	.word	0x080061a3
 800611c:	080061a3 	.word	0x080061a3
 8006120:	080061a3 	.word	0x080061a3
 8006124:	080061a3 	.word	0x080061a3
 8006128:	080061a3 	.word	0x080061a3
 800612c:	0800615f 	.word	0x0800615f
 8006130:	08006189 	.word	0x08006189
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b03      	cmp	r3, #3
 800613e:	d107      	bne.n	8006150 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006140:	f107 030a 	add.w	r3, r7, #10
 8006144:	2202      	movs	r2, #2
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fd33 	bl	8007bb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800614e:	e032      	b.n	80061b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fcbd 	bl	8007ad2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006158:	2303      	movs	r3, #3
 800615a:	75fb      	strb	r3, [r7, #23]
          break;
 800615c:	e02b      	b.n	80061b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b03      	cmp	r3, #3
 8006168:	d107      	bne.n	800617a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800616a:	f107 030d 	add.w	r3, r7, #13
 800616e:	2201      	movs	r2, #1
 8006170:	4619      	mov	r1, r3
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fd1e 	bl	8007bb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006178:	e01d      	b.n	80061b6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f001 fca8 	bl	8007ad2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006182:	2303      	movs	r3, #3
 8006184:	75fb      	strb	r3, [r7, #23]
          break;
 8006186:	e016      	b.n	80061b6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b03      	cmp	r3, #3
 8006192:	d00f      	beq.n	80061b4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f001 fc9b 	bl	8007ad2 <USBD_CtlError>
            ret = USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061a0:	e008      	b.n	80061b4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fc94 	bl	8007ad2 <USBD_CtlError>
          ret = USBD_FAIL;
 80061aa:	2303      	movs	r3, #3
 80061ac:	75fb      	strb	r3, [r7, #23]
          break;
 80061ae:	e002      	b.n	80061b6 <USBD_CDC_Setup+0x19e>
          break;
 80061b0:	bf00      	nop
 80061b2:	e008      	b.n	80061c6 <USBD_CDC_Setup+0x1ae>
          break;
 80061b4:	bf00      	nop
      }
      break;
 80061b6:	e006      	b.n	80061c6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80061b8:	6839      	ldr	r1, [r7, #0]
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f001 fc89 	bl	8007ad2 <USBD_CtlError>
      ret = USBD_FAIL;
 80061c0:	2303      	movs	r3, #3
 80061c2:	75fb      	strb	r3, [r7, #23]
      break;
 80061c4:	bf00      	nop
  }

  return (uint8_t)ret;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80061e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	32b0      	adds	r2, #176	; 0xb0
 80061ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80061f6:	2303      	movs	r3, #3
 80061f8:	e065      	b.n	80062c6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	32b0      	adds	r2, #176	; 0xb0
 8006204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006208:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	f003 020f 	and.w	r2, r3, #15
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	440b      	add	r3, r1
 800621c:	3318      	adds	r3, #24
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d02f      	beq.n	8006284 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006224:	78fb      	ldrb	r3, [r7, #3]
 8006226:	f003 020f 	and.w	r2, r3, #15
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	4613      	mov	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4413      	add	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	440b      	add	r3, r1
 8006236:	3318      	adds	r3, #24
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	f003 010f 	and.w	r1, r3, #15
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	460b      	mov	r3, r1
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	440b      	add	r3, r1
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4403      	add	r3, r0
 800624c:	3348      	adds	r3, #72	; 0x48
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	fbb2 f1f3 	udiv	r1, r2, r3
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800625a:	2b00      	cmp	r3, #0
 800625c:	d112      	bne.n	8006284 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800625e:	78fb      	ldrb	r3, [r7, #3]
 8006260:	f003 020f 	and.w	r2, r3, #15
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	440b      	add	r3, r1
 8006270:	3318      	adds	r3, #24
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006276:	78f9      	ldrb	r1, [r7, #3]
 8006278:	2300      	movs	r3, #0
 800627a:	2200      	movs	r2, #0
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f004 ff9a 	bl	800b1b6 <USBD_LL_Transmit>
 8006282:	e01f      	b.n	80062c4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	33b0      	adds	r3, #176	; 0xb0
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d010      	beq.n	80062c4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	33b0      	adds	r3, #176	; 0xb0
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80062c0:	78fa      	ldrb	r2, [r7, #3]
 80062c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
 80062d6:	460b      	mov	r3, r1
 80062d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	32b0      	adds	r2, #176	; 0xb0
 80062e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	32b0      	adds	r2, #176	; 0xb0
 80062f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d101      	bne.n	8006300 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e01a      	b.n	8006336 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f004 ff98 	bl	800b23a <USBD_LL_GetRxDataSize>
 800630a:	4602      	mov	r2, r0
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	33b0      	adds	r3, #176	; 0xb0
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006330:	4611      	mov	r1, r2
 8006332:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	32b0      	adds	r2, #176	; 0xb0
 8006350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006354:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800635c:	2303      	movs	r3, #3
 800635e:	e025      	b.n	80063ac <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	33b0      	adds	r3, #176	; 0xb0
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01a      	beq.n	80063aa <USBD_CDC_EP0_RxReady+0x6c>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800637a:	2bff      	cmp	r3, #255	; 0xff
 800637c:	d015      	beq.n	80063aa <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	33b0      	adds	r3, #176	; 0xb0
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4413      	add	r3, r2
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006396:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800639e:	b292      	uxth	r2, r2
 80063a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	22ff      	movs	r2, #255	; 0xff
 80063a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063bc:	2182      	movs	r1, #130	; 0x82
 80063be:	4818      	ldr	r0, [pc, #96]	; (8006420 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063c0:	f000 fd4f 	bl	8006e62 <USBD_GetEpDesc>
 80063c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063c6:	2101      	movs	r1, #1
 80063c8:	4815      	ldr	r0, [pc, #84]	; (8006420 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063ca:	f000 fd4a 	bl	8006e62 <USBD_GetEpDesc>
 80063ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063d0:	2181      	movs	r1, #129	; 0x81
 80063d2:	4813      	ldr	r0, [pc, #76]	; (8006420 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063d4:	f000 fd45 	bl	8006e62 <USBD_GetEpDesc>
 80063d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2210      	movs	r2, #16
 80063e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d006      	beq.n	80063fa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063f4:	711a      	strb	r2, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006408:	711a      	strb	r2, [r3, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2243      	movs	r2, #67	; 0x43
 8006412:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006414:	4b02      	ldr	r3, [pc, #8]	; (8006420 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20000050 	.word	0x20000050

08006424 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800642c:	2182      	movs	r1, #130	; 0x82
 800642e:	4818      	ldr	r0, [pc, #96]	; (8006490 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006430:	f000 fd17 	bl	8006e62 <USBD_GetEpDesc>
 8006434:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006436:	2101      	movs	r1, #1
 8006438:	4815      	ldr	r0, [pc, #84]	; (8006490 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800643a:	f000 fd12 	bl	8006e62 <USBD_GetEpDesc>
 800643e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006440:	2181      	movs	r1, #129	; 0x81
 8006442:	4813      	ldr	r0, [pc, #76]	; (8006490 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006444:	f000 fd0d 	bl	8006e62 <USBD_GetEpDesc>
 8006448:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2210      	movs	r2, #16
 8006454:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d006      	beq.n	800646a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	2200      	movs	r2, #0
 8006460:	711a      	strb	r2, [r3, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f042 0202 	orr.w	r2, r2, #2
 8006468:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d006      	beq.n	800647e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	711a      	strb	r2, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f042 0202 	orr.w	r2, r2, #2
 800647c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2243      	movs	r2, #67	; 0x43
 8006482:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006484:	4b02      	ldr	r3, [pc, #8]	; (8006490 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000050 	.word	0x20000050

08006494 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800649c:	2182      	movs	r1, #130	; 0x82
 800649e:	4818      	ldr	r0, [pc, #96]	; (8006500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064a0:	f000 fcdf 	bl	8006e62 <USBD_GetEpDesc>
 80064a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064a6:	2101      	movs	r1, #1
 80064a8:	4815      	ldr	r0, [pc, #84]	; (8006500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064aa:	f000 fcda 	bl	8006e62 <USBD_GetEpDesc>
 80064ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064b0:	2181      	movs	r1, #129	; 0x81
 80064b2:	4813      	ldr	r0, [pc, #76]	; (8006500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064b4:	f000 fcd5 	bl	8006e62 <USBD_GetEpDesc>
 80064b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2210      	movs	r2, #16
 80064c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d006      	beq.n	80064da <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d4:	711a      	strb	r2, [r3, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064e8:	711a      	strb	r2, [r3, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2243      	movs	r2, #67	; 0x43
 80064f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064f4:	4b02      	ldr	r3, [pc, #8]	; (8006500 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000050 	.word	0x20000050

08006504 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	220a      	movs	r2, #10
 8006510:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006512:	4b03      	ldr	r3, [pc, #12]	; (8006520 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006514:	4618      	mov	r0, r3
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	2000000c 	.word	0x2000000c

08006524 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d101      	bne.n	8006538 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006534:	2303      	movs	r3, #3
 8006536:	e009      	b.n	800654c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	33b0      	adds	r3, #176	; 0xb0
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	683a      	ldr	r2, [r7, #0]
 8006548:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	32b0      	adds	r2, #176	; 0xb0
 800656e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006572:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800657a:	2303      	movs	r3, #3
 800657c:	e008      	b.n	8006590 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	68ba      	ldr	r2, [r7, #8]
 8006582:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800658e:	2300      	movs	r3, #0
}
 8006590:	4618      	mov	r0, r3
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	32b0      	adds	r2, #176	; 0xb0
 80065b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	e004      	b.n	80065ca <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	683a      	ldr	r2, [r7, #0]
 80065c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr
	...

080065d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	32b0      	adds	r2, #176	; 0xb0
 80065ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ee:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	; 0xb0
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006606:	2303      	movs	r3, #3
 8006608:	e025      	b.n	8006656 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006610:	2b00      	cmp	r3, #0
 8006612:	d11f      	bne.n	8006654 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2201      	movs	r2, #1
 8006618:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800661c:	4b10      	ldr	r3, [pc, #64]	; (8006660 <USBD_CDC_TransmitPacket+0x88>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4403      	add	r3, r0
 8006636:	3318      	adds	r3, #24
 8006638:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <USBD_CDC_TransmitPacket+0x88>)
 800663c:	7819      	ldrb	r1, [r3, #0]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f004 fdb3 	bl	800b1b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006654:	7bfb      	ldrb	r3, [r7, #15]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	20000093 	.word	0x20000093

08006664 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	32b0      	adds	r2, #176	; 0xb0
 8006676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	32b0      	adds	r2, #176	; 0xb0
 8006686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800668e:	2303      	movs	r3, #3
 8006690:	e018      	b.n	80066c4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	7c1b      	ldrb	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800669a:	4b0c      	ldr	r3, [pc, #48]	; (80066cc <USBD_CDC_ReceivePacket+0x68>)
 800669c:	7819      	ldrb	r1, [r3, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f004 fda5 	bl	800b1f8 <USBD_LL_PrepareReceive>
 80066ae:	e008      	b.n	80066c2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <USBD_CDC_ReceivePacket+0x68>)
 80066b2:	7819      	ldrb	r1, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066ba:	2340      	movs	r3, #64	; 0x40
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f004 fd9b 	bl	800b1f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000094 	.word	0x20000094

080066d0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	4613      	mov	r3, r2
 80066dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e01f      	b.n	8006728 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	79fa      	ldrb	r2, [r7, #7]
 800671a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800671c:	68f8      	ldr	r0, [r7, #12]
 800671e:	f004 fc15 	bl	800af4c <USBD_LL_Init>
 8006722:	4603      	mov	r3, r0
 8006724:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006726:	7dfb      	ldrb	r3, [r7, #23]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800673a:	2300      	movs	r3, #0
 800673c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006744:	2303      	movs	r3, #3
 8006746:	e025      	b.n	8006794 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	32ae      	adds	r2, #174	; 0xae
 800675a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00f      	beq.n	8006784 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	32ae      	adds	r2, #174	; 0xae
 800676e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006774:	f107 020e 	add.w	r2, r7, #14
 8006778:	4610      	mov	r0, r2
 800677a:	4798      	blx	r3
 800677c:	4602      	mov	r2, r0
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f004 fc1d 	bl	800afe4 <USBD_LL_Start>
 80067aa:	4603      	mov	r3, r0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80067bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067d6:	2300      	movs	r3, #0
 80067d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d009      	beq.n	80067f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	78fa      	ldrb	r2, [r7, #3]
 80067ee:	4611      	mov	r1, r2
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
 80067f4:	4603      	mov	r3, r0
 80067f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	4611      	mov	r1, r2
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	4798      	blx	r3
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006828:	2303      	movs	r3, #3
 800682a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	4618      	mov	r0, r3
 800684a:	f001 f908 	bl	8007a5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800685c:	461a      	mov	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	2b02      	cmp	r3, #2
 8006870:	d01a      	beq.n	80068a8 <USBD_LL_SetupStage+0x72>
 8006872:	2b02      	cmp	r3, #2
 8006874:	d822      	bhi.n	80068bc <USBD_LL_SetupStage+0x86>
 8006876:	2b00      	cmp	r3, #0
 8006878:	d002      	beq.n	8006880 <USBD_LL_SetupStage+0x4a>
 800687a:	2b01      	cmp	r3, #1
 800687c:	d00a      	beq.n	8006894 <USBD_LL_SetupStage+0x5e>
 800687e:	e01d      	b.n	80068bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fb5f 	bl	8006f4c <USBD_StdDevReq>
 800688e:	4603      	mov	r3, r0
 8006890:	73fb      	strb	r3, [r7, #15]
      break;
 8006892:	e020      	b.n	80068d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800689a:	4619      	mov	r1, r3
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fbc7 	bl	8007030 <USBD_StdItfReq>
 80068a2:	4603      	mov	r3, r0
 80068a4:	73fb      	strb	r3, [r7, #15]
      break;
 80068a6:	e016      	b.n	80068d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fc29 	bl	8007108 <USBD_StdEPReq>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73fb      	strb	r3, [r7, #15]
      break;
 80068ba:	e00c      	b.n	80068d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f004 fbea 	bl	800b0a4 <USBD_LL_StallEP>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73fb      	strb	r3, [r7, #15]
      break;
 80068d4:	bf00      	nop
  }

  return ret;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	460b      	mov	r3, r1
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068f2:	7afb      	ldrb	r3, [r7, #11]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d16e      	bne.n	80069d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006906:	2b03      	cmp	r3, #3
 8006908:	f040 8098 	bne.w	8006a3c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	429a      	cmp	r2, r3
 8006916:	d913      	bls.n	8006940 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	1ad2      	subs	r2, r2, r3
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	4293      	cmp	r3, r2
 8006930:	bf28      	it	cs
 8006932:	4613      	movcs	r3, r2
 8006934:	461a      	mov	r2, r3
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f001 f984 	bl	8007c46 <USBD_CtlContinueRx>
 800693e:	e07d      	b.n	8006a3c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006946:	f003 031f 	and.w	r3, r3, #31
 800694a:	2b02      	cmp	r3, #2
 800694c:	d014      	beq.n	8006978 <USBD_LL_DataOutStage+0x98>
 800694e:	2b02      	cmp	r3, #2
 8006950:	d81d      	bhi.n	800698e <USBD_LL_DataOutStage+0xae>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <USBD_LL_DataOutStage+0x7c>
 8006956:	2b01      	cmp	r3, #1
 8006958:	d003      	beq.n	8006962 <USBD_LL_DataOutStage+0x82>
 800695a:	e018      	b.n	800698e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	75bb      	strb	r3, [r7, #22]
            break;
 8006960:	e018      	b.n	8006994 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006968:	b2db      	uxtb	r3, r3
 800696a:	4619      	mov	r1, r3
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 fa5e 	bl	8006e2e <USBD_CoreFindIF>
 8006972:	4603      	mov	r3, r0
 8006974:	75bb      	strb	r3, [r7, #22]
            break;
 8006976:	e00d      	b.n	8006994 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800697e:	b2db      	uxtb	r3, r3
 8006980:	4619      	mov	r1, r3
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fa60 	bl	8006e48 <USBD_CoreFindEP>
 8006988:	4603      	mov	r3, r0
 800698a:	75bb      	strb	r3, [r7, #22]
            break;
 800698c:	e002      	b.n	8006994 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800698e:	2300      	movs	r3, #0
 8006990:	75bb      	strb	r3, [r7, #22]
            break;
 8006992:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006994:	7dbb      	ldrb	r3, [r7, #22]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d119      	bne.n	80069ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d113      	bne.n	80069ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80069a6:	7dba      	ldrb	r2, [r7, #22]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	32ae      	adds	r2, #174	; 0xae
 80069ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b0:	691b      	ldr	r3, [r3, #16]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80069b6:	7dba      	ldrb	r2, [r7, #22]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80069be:	7dba      	ldrb	r2, [r7, #22]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	32ae      	adds	r2, #174	; 0xae
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 f94a 	bl	8007c68 <USBD_CtlSendStatus>
 80069d4:	e032      	b.n	8006a3c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fa31 	bl	8006e48 <USBD_CoreFindEP>
 80069e6:	4603      	mov	r3, r0
 80069e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ea:	7dbb      	ldrb	r3, [r7, #22]
 80069ec:	2bff      	cmp	r3, #255	; 0xff
 80069ee:	d025      	beq.n	8006a3c <USBD_LL_DataOutStage+0x15c>
 80069f0:	7dbb      	ldrb	r3, [r7, #22]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d122      	bne.n	8006a3c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b03      	cmp	r3, #3
 8006a00:	d117      	bne.n	8006a32 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a02:	7dba      	ldrb	r2, [r7, #22]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	32ae      	adds	r2, #174	; 0xae
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a12:	7dba      	ldrb	r2, [r7, #22]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a1a:	7dba      	ldrb	r2, [r7, #22]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	32ae      	adds	r2, #174	; 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	7afa      	ldrb	r2, [r7, #11]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	4798      	blx	r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d001      	beq.n	8006a3c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	e000      	b.n	8006a3e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b086      	sub	sp, #24
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a54:	7afb      	ldrb	r3, [r7, #11]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d16f      	bne.n	8006b3a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d15a      	bne.n	8006b20 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d914      	bls.n	8006aa0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	1ad2      	subs	r2, r2, r3
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f001 f8ac 	bl	8007bea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a92:	2300      	movs	r3, #0
 8006a94:	2200      	movs	r2, #0
 8006a96:	2100      	movs	r1, #0
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f004 fbad 	bl	800b1f8 <USBD_LL_PrepareReceive>
 8006a9e:	e03f      	b.n	8006b20 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	68da      	ldr	r2, [r3, #12]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d11c      	bne.n	8006ae6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d316      	bcc.n	8006ae6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d20f      	bcs.n	8006ae6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f001 f88d 	bl	8007bea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ad8:	2300      	movs	r3, #0
 8006ada:	2200      	movs	r2, #0
 8006adc:	2100      	movs	r1, #0
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	f004 fb8a 	bl	800b1f8 <USBD_LL_PrepareReceive>
 8006ae4:	e01c      	b.n	8006b20 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d10f      	bne.n	8006b12 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d009      	beq.n	8006b12 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b12:	2180      	movs	r1, #128	; 0x80
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f004 fac5 	bl	800b0a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f001 f8b7 	bl	8007c8e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d03a      	beq.n	8006ba0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f7ff fe42 	bl	80067b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b38:	e032      	b.n	8006ba0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	4619      	mov	r1, r3
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	f000 f97f 	bl	8006e48 <USBD_CoreFindEP>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
 8006b50:	2bff      	cmp	r3, #255	; 0xff
 8006b52:	d025      	beq.n	8006ba0 <USBD_LL_DataInStage+0x15a>
 8006b54:	7dfb      	ldrb	r3, [r7, #23]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d122      	bne.n	8006ba0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b03      	cmp	r3, #3
 8006b64:	d11c      	bne.n	8006ba0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b66:	7dfa      	ldrb	r2, [r7, #23]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	32ae      	adds	r2, #174	; 0xae
 8006b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b70:	695b      	ldr	r3, [r3, #20]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d014      	beq.n	8006ba0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b76:	7dfa      	ldrb	r2, [r7, #23]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b7e:	7dfa      	ldrb	r2, [r7, #23]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	32ae      	adds	r2, #174	; 0xae
 8006b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	7afa      	ldrb	r2, [r7, #11]
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	4798      	blx	r3
 8006b92:	4603      	mov	r3, r0
 8006b94:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b96:	7dbb      	ldrb	r3, [r7, #22]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b9c:	7dbb      	ldrb	r3, [r7, #22]
 8006b9e:	e000      	b.n	8006ba2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d014      	beq.n	8006c10 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00e      	beq.n	8006c10 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6852      	ldr	r2, [r2, #4]
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	4611      	mov	r1, r2
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c10:	2340      	movs	r3, #64	; 0x40
 8006c12:	2200      	movs	r2, #0
 8006c14:	2100      	movs	r1, #0
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f004 f9ff 	bl	800b01a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2240      	movs	r2, #64	; 0x40
 8006c28:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c2c:	2340      	movs	r3, #64	; 0x40
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2180      	movs	r1, #128	; 0x80
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f004 f9f1 	bl	800b01a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2240      	movs	r2, #64	; 0x40
 8006c42:	621a      	str	r2, [r3, #32]

  return ret;
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	78fa      	ldrb	r2, [r7, #3]
 8006c5e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2204      	movs	r2, #4
 8006c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b04      	cmp	r3, #4
 8006cac:	d106      	bne.n	8006cbc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	370c      	adds	r7, #12
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc8:	4770      	bx	lr

08006cca <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b082      	sub	sp, #8
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d110      	bne.n	8006d00 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cee:	69db      	ldr	r3, [r3, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d005      	beq.n	8006d00 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	69db      	ldr	r3, [r3, #28]
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	32ae      	adds	r2, #174	; 0xae
 8006d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e01c      	b.n	8006d66 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	d115      	bne.n	8006d64 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	32ae      	adds	r2, #174	; 0xae
 8006d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	32ae      	adds	r2, #174	; 0xae
 8006d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
 8006d5c:	78fa      	ldrb	r2, [r7, #3]
 8006d5e:	4611      	mov	r1, r2
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d64:	2300      	movs	r3, #0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	460b      	mov	r3, r1
 8006d78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	32ae      	adds	r2, #174	; 0xae
 8006d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e01c      	b.n	8006dca <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d115      	bne.n	8006dc8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	32ae      	adds	r2, #174	; 0xae
 8006da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	32ae      	adds	r2, #174	; 0xae
 8006dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc0:	78fa      	ldrb	r2, [r7, #3]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6852      	ldr	r2, [r2, #4]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	4611      	mov	r1, r2
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e20:	2303      	movs	r3, #3
 8006e22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e3a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	460b      	mov	r3, r1
 8006e52:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e54:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b086      	sub	sp, #24
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e76:	2300      	movs	r3, #0
 8006e78:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	885b      	ldrh	r3, [r3, #2]
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d920      	bls.n	8006ecc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e92:	e013      	b.n	8006ebc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e94:	f107 030a 	add.w	r3, r7, #10
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f000 f81b 	bl	8006ed6 <USBD_GetNextDesc>
 8006ea0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	2b05      	cmp	r3, #5
 8006ea8:	d108      	bne.n	8006ebc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	789b      	ldrb	r3, [r3, #2]
 8006eb2:	78fa      	ldrb	r2, [r7, #3]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d008      	beq.n	8006eca <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	885b      	ldrh	r3, [r3, #2]
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	897b      	ldrh	r3, [r7, #10]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d8e5      	bhi.n	8006e94 <USBD_GetEpDesc+0x32>
 8006ec8:	e000      	b.n	8006ecc <USBD_GetEpDesc+0x6a>
          break;
 8006eca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ecc:	693b      	ldr	r3, [r7, #16]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	881a      	ldrh	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	461a      	mov	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4413      	add	r3, r2
 8006f00:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f02:	68fb      	ldr	r3, [r7, #12]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	3301      	adds	r3, #1
 8006f26:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f2e:	8a3b      	ldrh	r3, [r7, #16]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	b21a      	sxth	r2, r3
 8006f34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	b21b      	sxth	r3, r3
 8006f3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f3e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	371c      	adds	r7, #28
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f62:	2b40      	cmp	r3, #64	; 0x40
 8006f64:	d005      	beq.n	8006f72 <USBD_StdDevReq+0x26>
 8006f66:	2b40      	cmp	r3, #64	; 0x40
 8006f68:	d857      	bhi.n	800701a <USBD_StdDevReq+0xce>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00f      	beq.n	8006f8e <USBD_StdDevReq+0x42>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d153      	bne.n	800701a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	32ae      	adds	r2, #174	; 0xae
 8006f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	4798      	blx	r3
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f8c:	e04a      	b.n	8007024 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	785b      	ldrb	r3, [r3, #1]
 8006f92:	2b09      	cmp	r3, #9
 8006f94:	d83b      	bhi.n	800700e <USBD_StdDevReq+0xc2>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <USBD_StdDevReq+0x50>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006ff1 	.word	0x08006ff1
 8006fa0:	08007005 	.word	0x08007005
 8006fa4:	0800700f 	.word	0x0800700f
 8006fa8:	08006ffb 	.word	0x08006ffb
 8006fac:	0800700f 	.word	0x0800700f
 8006fb0:	08006fcf 	.word	0x08006fcf
 8006fb4:	08006fc5 	.word	0x08006fc5
 8006fb8:	0800700f 	.word	0x0800700f
 8006fbc:	08006fe7 	.word	0x08006fe7
 8006fc0:	08006fd9 	.word	0x08006fd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fa3c 	bl	8007444 <USBD_GetDescriptor>
          break;
 8006fcc:	e024      	b.n	8007018 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fba1 	bl	8007718 <USBD_SetAddress>
          break;
 8006fd6:	e01f      	b.n	8007018 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fd8:	6839      	ldr	r1, [r7, #0]
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fbe0 	bl	80077a0 <USBD_SetConfig>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fe4:	e018      	b.n	8007018 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fc83 	bl	80078f4 <USBD_GetConfig>
          break;
 8006fee:	e013      	b.n	8007018 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fcb4 	bl	8007960 <USBD_GetStatus>
          break;
 8006ff8:	e00e      	b.n	8007018 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fce3 	bl	80079c8 <USBD_SetFeature>
          break;
 8007002:	e009      	b.n	8007018 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fd07 	bl	8007a1a <USBD_ClrFeature>
          break;
 800700c:	e004      	b.n	8007018 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800700e:	6839      	ldr	r1, [r7, #0]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fd5e 	bl	8007ad2 <USBD_CtlError>
          break;
 8007016:	bf00      	nop
      }
      break;
 8007018:	e004      	b.n	8007024 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800701a:	6839      	ldr	r1, [r7, #0]
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fd58 	bl	8007ad2 <USBD_CtlError>
      break;
 8007022:	bf00      	nop
  }

  return ret;
 8007024:	7bfb      	ldrb	r3, [r7, #15]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop

08007030 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800703a:	2300      	movs	r3, #0
 800703c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007046:	2b40      	cmp	r3, #64	; 0x40
 8007048:	d005      	beq.n	8007056 <USBD_StdItfReq+0x26>
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d852      	bhi.n	80070f4 <USBD_StdItfReq+0xc4>
 800704e:	2b00      	cmp	r3, #0
 8007050:	d001      	beq.n	8007056 <USBD_StdItfReq+0x26>
 8007052:	2b20      	cmp	r3, #32
 8007054:	d14e      	bne.n	80070f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705c:	b2db      	uxtb	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	2b02      	cmp	r3, #2
 8007062:	d840      	bhi.n	80070e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	889b      	ldrh	r3, [r3, #4]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	d836      	bhi.n	80070dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	889b      	ldrh	r3, [r3, #4]
 8007072:	b2db      	uxtb	r3, r3
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fed9 	bl	8006e2e <USBD_CoreFindIF>
 800707c:	4603      	mov	r3, r0
 800707e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2bff      	cmp	r3, #255	; 0xff
 8007084:	d01d      	beq.n	80070c2 <USBD_StdItfReq+0x92>
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d11a      	bne.n	80070c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800708c:	7bba      	ldrb	r2, [r7, #14]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	32ae      	adds	r2, #174	; 0xae
 8007092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00f      	beq.n	80070bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800709c:	7bba      	ldrb	r2, [r7, #14]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070a4:	7bba      	ldrb	r2, [r7, #14]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	32ae      	adds	r2, #174	; 0xae
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
 80070b6:	4603      	mov	r3, r0
 80070b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070ba:	e004      	b.n	80070c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80070bc:	2303      	movs	r3, #3
 80070be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80070c0:	e001      	b.n	80070c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80070c2:	2303      	movs	r3, #3
 80070c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	88db      	ldrh	r3, [r3, #6]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d110      	bne.n	80070f0 <USBD_StdItfReq+0xc0>
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d10d      	bne.n	80070f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fdc7 	bl	8007c68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070da:	e009      	b.n	80070f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fcf7 	bl	8007ad2 <USBD_CtlError>
          break;
 80070e4:	e004      	b.n	80070f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fcf2 	bl	8007ad2 <USBD_CtlError>
          break;
 80070ee:	e000      	b.n	80070f2 <USBD_StdItfReq+0xc2>
          break;
 80070f0:	bf00      	nop
      }
      break;
 80070f2:	e004      	b.n	80070fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fceb 	bl	8007ad2 <USBD_CtlError>
      break;
 80070fc:	bf00      	nop
  }

  return ret;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	889b      	ldrh	r3, [r3, #4]
 800711a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007124:	2b40      	cmp	r3, #64	; 0x40
 8007126:	d007      	beq.n	8007138 <USBD_StdEPReq+0x30>
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	f200 817f 	bhi.w	800742c <USBD_StdEPReq+0x324>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d02a      	beq.n	8007188 <USBD_StdEPReq+0x80>
 8007132:	2b20      	cmp	r3, #32
 8007134:	f040 817a 	bne.w	800742c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007138:	7bbb      	ldrb	r3, [r7, #14]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f7ff fe83 	bl	8006e48 <USBD_CoreFindEP>
 8007142:	4603      	mov	r3, r0
 8007144:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007146:	7b7b      	ldrb	r3, [r7, #13]
 8007148:	2bff      	cmp	r3, #255	; 0xff
 800714a:	f000 8174 	beq.w	8007436 <USBD_StdEPReq+0x32e>
 800714e:	7b7b      	ldrb	r3, [r7, #13]
 8007150:	2b00      	cmp	r3, #0
 8007152:	f040 8170 	bne.w	8007436 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007156:	7b7a      	ldrb	r2, [r7, #13]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800715e:	7b7a      	ldrb	r2, [r7, #13]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	32ae      	adds	r2, #174	; 0xae
 8007164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8163 	beq.w	8007436 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007170:	7b7a      	ldrb	r2, [r7, #13]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	32ae      	adds	r2, #174	; 0xae
 8007176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
 8007182:	4603      	mov	r3, r0
 8007184:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007186:	e156      	b.n	8007436 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	785b      	ldrb	r3, [r3, #1]
 800718c:	2b03      	cmp	r3, #3
 800718e:	d008      	beq.n	80071a2 <USBD_StdEPReq+0x9a>
 8007190:	2b03      	cmp	r3, #3
 8007192:	f300 8145 	bgt.w	8007420 <USBD_StdEPReq+0x318>
 8007196:	2b00      	cmp	r3, #0
 8007198:	f000 809b 	beq.w	80072d2 <USBD_StdEPReq+0x1ca>
 800719c:	2b01      	cmp	r3, #1
 800719e:	d03c      	beq.n	800721a <USBD_StdEPReq+0x112>
 80071a0:	e13e      	b.n	8007420 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d002      	beq.n	80071b4 <USBD_StdEPReq+0xac>
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d016      	beq.n	80071e0 <USBD_StdEPReq+0xd8>
 80071b2:	e02c      	b.n	800720e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00d      	beq.n	80071d6 <USBD_StdEPReq+0xce>
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d00a      	beq.n	80071d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80071c0:	7bbb      	ldrb	r3, [r7, #14]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f003 ff6d 	bl	800b0a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80071ca:	2180      	movs	r1, #128	; 0x80
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f003 ff69 	bl	800b0a4 <USBD_LL_StallEP>
 80071d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071d4:	e020      	b.n	8007218 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fc7a 	bl	8007ad2 <USBD_CtlError>
              break;
 80071de:	e01b      	b.n	8007218 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	885b      	ldrh	r3, [r3, #2]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10e      	bne.n	8007206 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071e8:	7bbb      	ldrb	r3, [r7, #14]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <USBD_StdEPReq+0xfe>
 80071ee:	7bbb      	ldrb	r3, [r7, #14]
 80071f0:	2b80      	cmp	r3, #128	; 0x80
 80071f2:	d008      	beq.n	8007206 <USBD_StdEPReq+0xfe>
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	88db      	ldrh	r3, [r3, #6]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f003 ff4f 	bl	800b0a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fd2e 	bl	8007c68 <USBD_CtlSendStatus>

              break;
 800720c:	e004      	b.n	8007218 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fc5e 	bl	8007ad2 <USBD_CtlError>
              break;
 8007216:	bf00      	nop
          }
          break;
 8007218:	e107      	b.n	800742a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b02      	cmp	r3, #2
 8007224:	d002      	beq.n	800722c <USBD_StdEPReq+0x124>
 8007226:	2b03      	cmp	r3, #3
 8007228:	d016      	beq.n	8007258 <USBD_StdEPReq+0x150>
 800722a:	e04b      	b.n	80072c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <USBD_StdEPReq+0x146>
 8007232:	7bbb      	ldrb	r3, [r7, #14]
 8007234:	2b80      	cmp	r3, #128	; 0x80
 8007236:	d00a      	beq.n	800724e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007238:	7bbb      	ldrb	r3, [r7, #14]
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f003 ff31 	bl	800b0a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007242:	2180      	movs	r1, #128	; 0x80
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f003 ff2d 	bl	800b0a4 <USBD_LL_StallEP>
 800724a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800724c:	e040      	b.n	80072d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fc3e 	bl	8007ad2 <USBD_CtlError>
              break;
 8007256:	e03b      	b.n	80072d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	885b      	ldrh	r3, [r3, #2]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d136      	bne.n	80072ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007266:	2b00      	cmp	r3, #0
 8007268:	d004      	beq.n	8007274 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800726a:	7bbb      	ldrb	r3, [r7, #14]
 800726c:	4619      	mov	r1, r3
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f003 ff37 	bl	800b0e2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fcf7 	bl	8007c68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800727a:	7bbb      	ldrb	r3, [r7, #14]
 800727c:	4619      	mov	r1, r3
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff fde2 	bl	8006e48 <USBD_CoreFindEP>
 8007284:	4603      	mov	r3, r0
 8007286:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007288:	7b7b      	ldrb	r3, [r7, #13]
 800728a:	2bff      	cmp	r3, #255	; 0xff
 800728c:	d01f      	beq.n	80072ce <USBD_StdEPReq+0x1c6>
 800728e:	7b7b      	ldrb	r3, [r7, #13]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d11c      	bne.n	80072ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007294:	7b7a      	ldrb	r2, [r7, #13]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800729c:	7b7a      	ldrb	r2, [r7, #13]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	32ae      	adds	r2, #174	; 0xae
 80072a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d010      	beq.n	80072ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072ac:	7b7a      	ldrb	r2, [r7, #13]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	32ae      	adds	r2, #174	; 0xae
 80072b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
 80072be:	4603      	mov	r3, r0
 80072c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80072c2:	e004      	b.n	80072ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fc03 	bl	8007ad2 <USBD_CtlError>
              break;
 80072cc:	e000      	b.n	80072d0 <USBD_StdEPReq+0x1c8>
              break;
 80072ce:	bf00      	nop
          }
          break;
 80072d0:	e0ab      	b.n	800742a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d002      	beq.n	80072e4 <USBD_StdEPReq+0x1dc>
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d032      	beq.n	8007348 <USBD_StdEPReq+0x240>
 80072e2:	e097      	b.n	8007414 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d007      	beq.n	80072fa <USBD_StdEPReq+0x1f2>
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	2b80      	cmp	r3, #128	; 0x80
 80072ee:	d004      	beq.n	80072fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fbed 	bl	8007ad2 <USBD_CtlError>
                break;
 80072f8:	e091      	b.n	800741e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	da0b      	bge.n	800731a <USBD_StdEPReq+0x212>
 8007302:	7bbb      	ldrb	r3, [r7, #14]
 8007304:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007308:	4613      	mov	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	4413      	add	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	3310      	adds	r3, #16
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	4413      	add	r3, r2
 8007316:	3304      	adds	r3, #4
 8007318:	e00b      	b.n	8007332 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007320:	4613      	mov	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4413      	add	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	4413      	add	r3, r2
 8007330:	3304      	adds	r3, #4
 8007332:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2200      	movs	r2, #0
 8007338:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	2202      	movs	r2, #2
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 fc37 	bl	8007bb4 <USBD_CtlSendData>
              break;
 8007346:	e06a      	b.n	800741e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007348:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800734c:	2b00      	cmp	r3, #0
 800734e:	da11      	bge.n	8007374 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	f003 020f 	and.w	r2, r3, #15
 8007356:	6879      	ldr	r1, [r7, #4]
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	3324      	adds	r3, #36	; 0x24
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d117      	bne.n	800739a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800736a:	6839      	ldr	r1, [r7, #0]
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fbb0 	bl	8007ad2 <USBD_CtlError>
                  break;
 8007372:	e054      	b.n	800741e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	f003 020f 	and.w	r2, r3, #15
 800737a:	6879      	ldr	r1, [r7, #4]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	440b      	add	r3, r1
 8007386:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d104      	bne.n	800739a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fb9d 	bl	8007ad2 <USBD_CtlError>
                  break;
 8007398:	e041      	b.n	800741e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800739a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da0b      	bge.n	80073ba <USBD_StdEPReq+0x2b2>
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	3310      	adds	r3, #16
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	3304      	adds	r3, #4
 80073b8:	e00b      	b.n	80073d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	4413      	add	r3, r2
 80073d0:	3304      	adds	r3, #4
 80073d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d002      	beq.n	80073e0 <USBD_StdEPReq+0x2d8>
 80073da:	7bbb      	ldrb	r3, [r7, #14]
 80073dc:	2b80      	cmp	r3, #128	; 0x80
 80073de:	d103      	bne.n	80073e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	e00e      	b.n	8007406 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073e8:	7bbb      	ldrb	r3, [r7, #14]
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f003 fe97 	bl	800b120 <USBD_LL_IsStallEP>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d003      	beq.n	8007400 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2201      	movs	r2, #1
 80073fc:	601a      	str	r2, [r3, #0]
 80073fe:	e002      	b.n	8007406 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	2202      	movs	r2, #2
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fbd1 	bl	8007bb4 <USBD_CtlSendData>
              break;
 8007412:	e004      	b.n	800741e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fb5b 	bl	8007ad2 <USBD_CtlError>
              break;
 800741c:	bf00      	nop
          }
          break;
 800741e:	e004      	b.n	800742a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007420:	6839      	ldr	r1, [r7, #0]
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 fb55 	bl	8007ad2 <USBD_CtlError>
          break;
 8007428:	bf00      	nop
      }
      break;
 800742a:	e005      	b.n	8007438 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800742c:	6839      	ldr	r1, [r7, #0]
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fb4f 	bl	8007ad2 <USBD_CtlError>
      break;
 8007434:	e000      	b.n	8007438 <USBD_StdEPReq+0x330>
      break;
 8007436:	bf00      	nop
  }

  return ret;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
	...

08007444 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	885b      	ldrh	r3, [r3, #2]
 800745e:	0a1b      	lsrs	r3, r3, #8
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	2b06      	cmp	r3, #6
 8007466:	f200 8128 	bhi.w	80076ba <USBD_GetDescriptor+0x276>
 800746a:	a201      	add	r2, pc, #4	; (adr r2, 8007470 <USBD_GetDescriptor+0x2c>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	0800748d 	.word	0x0800748d
 8007474:	080074a5 	.word	0x080074a5
 8007478:	080074e5 	.word	0x080074e5
 800747c:	080076bb 	.word	0x080076bb
 8007480:	080076bb 	.word	0x080076bb
 8007484:	0800765b 	.word	0x0800765b
 8007488:	08007687 	.word	0x08007687
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	7c12      	ldrb	r2, [r2, #16]
 8007498:	f107 0108 	add.w	r1, r7, #8
 800749c:	4610      	mov	r0, r2
 800749e:	4798      	blx	r3
 80074a0:	60f8      	str	r0, [r7, #12]
      break;
 80074a2:	e112      	b.n	80076ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	7c1b      	ldrb	r3, [r3, #16]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d10d      	bne.n	80074c8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f107 0208 	add.w	r2, r7, #8
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
 80074bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3301      	adds	r3, #1
 80074c2:	2202      	movs	r2, #2
 80074c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074c6:	e100      	b.n	80076ca <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d0:	f107 0208 	add.w	r2, r7, #8
 80074d4:	4610      	mov	r0, r2
 80074d6:	4798      	blx	r3
 80074d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	3301      	adds	r3, #1
 80074de:	2202      	movs	r2, #2
 80074e0:	701a      	strb	r2, [r3, #0]
      break;
 80074e2:	e0f2      	b.n	80076ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	885b      	ldrh	r3, [r3, #2]
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b05      	cmp	r3, #5
 80074ec:	f200 80ac 	bhi.w	8007648 <USBD_GetDescriptor+0x204>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <USBD_GetDescriptor+0xb4>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	08007511 	.word	0x08007511
 80074fc:	08007545 	.word	0x08007545
 8007500:	08007579 	.word	0x08007579
 8007504:	080075ad 	.word	0x080075ad
 8007508:	080075e1 	.word	0x080075e1
 800750c:	08007615 	.word	0x08007615
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00b      	beq.n	8007534 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	7c12      	ldrb	r2, [r2, #16]
 8007528:	f107 0108 	add.w	r1, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007532:	e091      	b.n	8007658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007534:	6839      	ldr	r1, [r7, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f000 facb 	bl	8007ad2 <USBD_CtlError>
            err++;
 800753c:	7afb      	ldrb	r3, [r7, #11]
 800753e:	3301      	adds	r3, #1
 8007540:	72fb      	strb	r3, [r7, #11]
          break;
 8007542:	e089      	b.n	8007658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	7c12      	ldrb	r2, [r2, #16]
 800755c:	f107 0108 	add.w	r1, r7, #8
 8007560:	4610      	mov	r0, r2
 8007562:	4798      	blx	r3
 8007564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007566:	e077      	b.n	8007658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007568:	6839      	ldr	r1, [r7, #0]
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fab1 	bl	8007ad2 <USBD_CtlError>
            err++;
 8007570:	7afb      	ldrb	r3, [r7, #11]
 8007572:	3301      	adds	r3, #1
 8007574:	72fb      	strb	r3, [r7, #11]
          break;
 8007576:	e06f      	b.n	8007658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	7c12      	ldrb	r2, [r2, #16]
 8007590:	f107 0108 	add.w	r1, r7, #8
 8007594:	4610      	mov	r0, r2
 8007596:	4798      	blx	r3
 8007598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759a:	e05d      	b.n	8007658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800759c:	6839      	ldr	r1, [r7, #0]
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa97 	bl	8007ad2 <USBD_CtlError>
            err++;
 80075a4:	7afb      	ldrb	r3, [r7, #11]
 80075a6:	3301      	adds	r3, #1
 80075a8:	72fb      	strb	r3, [r7, #11]
          break;
 80075aa:	e055      	b.n	8007658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00b      	beq.n	80075d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	7c12      	ldrb	r2, [r2, #16]
 80075c4:	f107 0108 	add.w	r1, r7, #8
 80075c8:	4610      	mov	r0, r2
 80075ca:	4798      	blx	r3
 80075cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ce:	e043      	b.n	8007658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d0:	6839      	ldr	r1, [r7, #0]
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 fa7d 	bl	8007ad2 <USBD_CtlError>
            err++;
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	3301      	adds	r3, #1
 80075dc:	72fb      	strb	r3, [r7, #11]
          break;
 80075de:	e03b      	b.n	8007658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00b      	beq.n	8007604 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	7c12      	ldrb	r2, [r2, #16]
 80075f8:	f107 0108 	add.w	r1, r7, #8
 80075fc:	4610      	mov	r0, r2
 80075fe:	4798      	blx	r3
 8007600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007602:	e029      	b.n	8007658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fa63 	bl	8007ad2 <USBD_CtlError>
            err++;
 800760c:	7afb      	ldrb	r3, [r7, #11]
 800760e:	3301      	adds	r3, #1
 8007610:	72fb      	strb	r3, [r7, #11]
          break;
 8007612:	e021      	b.n	8007658 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	7c12      	ldrb	r2, [r2, #16]
 800762c:	f107 0108 	add.w	r1, r7, #8
 8007630:	4610      	mov	r0, r2
 8007632:	4798      	blx	r3
 8007634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007636:	e00f      	b.n	8007658 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fa49 	bl	8007ad2 <USBD_CtlError>
            err++;
 8007640:	7afb      	ldrb	r3, [r7, #11]
 8007642:	3301      	adds	r3, #1
 8007644:	72fb      	strb	r3, [r7, #11]
          break;
 8007646:	e007      	b.n	8007658 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007648:	6839      	ldr	r1, [r7, #0]
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f000 fa41 	bl	8007ad2 <USBD_CtlError>
          err++;
 8007650:	7afb      	ldrb	r3, [r7, #11]
 8007652:	3301      	adds	r3, #1
 8007654:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007656:	bf00      	nop
      }
      break;
 8007658:	e037      	b.n	80076ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	7c1b      	ldrb	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800766a:	f107 0208 	add.w	r2, r7, #8
 800766e:	4610      	mov	r0, r2
 8007670:	4798      	blx	r3
 8007672:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007674:	e029      	b.n	80076ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fa2a 	bl	8007ad2 <USBD_CtlError>
        err++;
 800767e:	7afb      	ldrb	r3, [r7, #11]
 8007680:	3301      	adds	r3, #1
 8007682:	72fb      	strb	r3, [r7, #11]
      break;
 8007684:	e021      	b.n	80076ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	7c1b      	ldrb	r3, [r3, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10d      	bne.n	80076aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	f107 0208 	add.w	r2, r7, #8
 800769a:	4610      	mov	r0, r2
 800769c:	4798      	blx	r3
 800769e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	2207      	movs	r2, #7
 80076a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076a8:	e00f      	b.n	80076ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f000 fa10 	bl	8007ad2 <USBD_CtlError>
        err++;
 80076b2:	7afb      	ldrb	r3, [r7, #11]
 80076b4:	3301      	adds	r3, #1
 80076b6:	72fb      	strb	r3, [r7, #11]
      break;
 80076b8:	e007      	b.n	80076ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fa08 	bl	8007ad2 <USBD_CtlError>
      err++;
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	3301      	adds	r3, #1
 80076c6:	72fb      	strb	r3, [r7, #11]
      break;
 80076c8:	bf00      	nop
  }

  if (err != 0U)
 80076ca:	7afb      	ldrb	r3, [r7, #11]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d11e      	bne.n	800770e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	88db      	ldrh	r3, [r3, #6]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d016      	beq.n	8007706 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076d8:	893b      	ldrh	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d00e      	beq.n	80076fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	88da      	ldrh	r2, [r3, #6]
 80076e2:	893b      	ldrh	r3, [r7, #8]
 80076e4:	4293      	cmp	r3, r2
 80076e6:	bf28      	it	cs
 80076e8:	4613      	movcs	r3, r2
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076ee:	893b      	ldrh	r3, [r7, #8]
 80076f0:	461a      	mov	r2, r3
 80076f2:	68f9      	ldr	r1, [r7, #12]
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 fa5d 	bl	8007bb4 <USBD_CtlSendData>
 80076fa:	e009      	b.n	8007710 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076fc:	6839      	ldr	r1, [r7, #0]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f9e7 	bl	8007ad2 <USBD_CtlError>
 8007704:	e004      	b.n	8007710 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 faae 	bl	8007c68 <USBD_CtlSendStatus>
 800770c:	e000      	b.n	8007710 <USBD_GetDescriptor+0x2cc>
    return;
 800770e:	bf00      	nop
  }
}
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop

08007718 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	889b      	ldrh	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d131      	bne.n	800778e <USBD_SetAddress+0x76>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	88db      	ldrh	r3, [r3, #6]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d12d      	bne.n	800778e <USBD_SetAddress+0x76>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	885b      	ldrh	r3, [r3, #2]
 8007736:	2b7f      	cmp	r3, #127	; 0x7f
 8007738:	d829      	bhi.n	800778e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	885b      	ldrh	r3, [r3, #2]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007744:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b03      	cmp	r3, #3
 8007750:	d104      	bne.n	800775c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 f9bc 	bl	8007ad2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775a:	e01d      	b.n	8007798 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	7bfa      	ldrb	r2, [r7, #15]
 8007760:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007764:	7bfb      	ldrb	r3, [r7, #15]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f003 fd05 	bl	800b178 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fa7a 	bl	8007c68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007774:	7bfb      	ldrb	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2202      	movs	r2, #2
 800777e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007782:	e009      	b.n	8007798 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2201      	movs	r2, #1
 8007788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778c:	e004      	b.n	8007798 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f99e 	bl	8007ad2 <USBD_CtlError>
  }
}
 8007796:	bf00      	nop
 8007798:	bf00      	nop
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	885b      	ldrh	r3, [r3, #2]
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	4b4e      	ldr	r3, [pc, #312]	; (80078f0 <USBD_SetConfig+0x150>)
 80077b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077b8:	4b4d      	ldr	r3, [pc, #308]	; (80078f0 <USBD_SetConfig+0x150>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d905      	bls.n	80077cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 f985 	bl	8007ad2 <USBD_CtlError>
    return USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e08c      	b.n	80078e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d002      	beq.n	80077de <USBD_SetConfig+0x3e>
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d029      	beq.n	8007830 <USBD_SetConfig+0x90>
 80077dc:	e075      	b.n	80078ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077de:	4b44      	ldr	r3, [pc, #272]	; (80078f0 <USBD_SetConfig+0x150>)
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d020      	beq.n	8007828 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077e6:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <USBD_SetConfig+0x150>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077f0:	4b3f      	ldr	r3, [pc, #252]	; (80078f0 <USBD_SetConfig+0x150>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	4619      	mov	r1, r3
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f7fe ffe7 	bl	80067ca <USBD_SetClassConfig>
 80077fc:	4603      	mov	r3, r0
 80077fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d008      	beq.n	8007818 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f962 	bl	8007ad2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007816:	e065      	b.n	80078e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fa25 	bl	8007c68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2203      	movs	r2, #3
 8007822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007826:	e05d      	b.n	80078e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fa1d 	bl	8007c68 <USBD_CtlSendStatus>
      break;
 800782e:	e059      	b.n	80078e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007830:	4b2f      	ldr	r3, [pc, #188]	; (80078f0 <USBD_SetConfig+0x150>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d112      	bne.n	800785e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007840:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <USBD_SetConfig+0x150>)
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800784a:	4b29      	ldr	r3, [pc, #164]	; (80078f0 <USBD_SetConfig+0x150>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f7fe ffd6 	bl	8006802 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fa06 	bl	8007c68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800785c:	e042      	b.n	80078e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800785e:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <USBD_SetConfig+0x150>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	429a      	cmp	r2, r3
 800786a:	d02a      	beq.n	80078c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fe ffc4 	bl	8006802 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800787a:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <USBD_SetConfig+0x150>)
 800787c:	781b      	ldrb	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <USBD_SetConfig+0x150>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7fe ff9d 	bl	80067ca <USBD_SetClassConfig>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007894:	7bfb      	ldrb	r3, [r7, #15]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00f      	beq.n	80078ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f918 	bl	8007ad2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fe ffa9 	bl	8006802 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078b8:	e014      	b.n	80078e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f9d4 	bl	8007c68 <USBD_CtlSendStatus>
      break;
 80078c0:	e010      	b.n	80078e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9d0 	bl	8007c68 <USBD_CtlSendStatus>
      break;
 80078c8:	e00c      	b.n	80078e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f900 	bl	8007ad2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078d2:	4b07      	ldr	r3, [pc, #28]	; (80078f0 <USBD_SetConfig+0x150>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fe ff92 	bl	8006802 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078de:	2303      	movs	r3, #3
 80078e0:	73fb      	strb	r3, [r7, #15]
      break;
 80078e2:	bf00      	nop
  }

  return ret;
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3710      	adds	r7, #16
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	20001258 	.word	0x20001258

080078f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	88db      	ldrh	r3, [r3, #6]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d004      	beq.n	8007910 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f8e2 	bl	8007ad2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800790e:	e023      	b.n	8007958 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b02      	cmp	r3, #2
 800791a:	dc02      	bgt.n	8007922 <USBD_GetConfig+0x2e>
 800791c:	2b00      	cmp	r3, #0
 800791e:	dc03      	bgt.n	8007928 <USBD_GetConfig+0x34>
 8007920:	e015      	b.n	800794e <USBD_GetConfig+0x5a>
 8007922:	2b03      	cmp	r3, #3
 8007924:	d00b      	beq.n	800793e <USBD_GetConfig+0x4a>
 8007926:	e012      	b.n	800794e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3308      	adds	r3, #8
 8007932:	2201      	movs	r2, #1
 8007934:	4619      	mov	r1, r3
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f93c 	bl	8007bb4 <USBD_CtlSendData>
        break;
 800793c:	e00c      	b.n	8007958 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	3304      	adds	r3, #4
 8007942:	2201      	movs	r2, #1
 8007944:	4619      	mov	r1, r3
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 f934 	bl	8007bb4 <USBD_CtlSendData>
        break;
 800794c:	e004      	b.n	8007958 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800794e:	6839      	ldr	r1, [r7, #0]
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f8be 	bl	8007ad2 <USBD_CtlError>
        break;
 8007956:	bf00      	nop
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	b2db      	uxtb	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	2b02      	cmp	r3, #2
 8007976:	d81e      	bhi.n	80079b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	88db      	ldrh	r3, [r3, #6]
 800797c:	2b02      	cmp	r3, #2
 800797e:	d004      	beq.n	800798a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f8a5 	bl	8007ad2 <USBD_CtlError>
        break;
 8007988:	e01a      	b.n	80079c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2201      	movs	r2, #1
 800798e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	f043 0202 	orr.w	r2, r3, #2
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	330c      	adds	r3, #12
 80079aa:	2202      	movs	r2, #2
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f900 	bl	8007bb4 <USBD_CtlSendData>
      break;
 80079b4:	e004      	b.n	80079c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f88a 	bl	8007ad2 <USBD_CtlError>
      break;
 80079be:	bf00      	nop
  }
}
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	885b      	ldrh	r3, [r3, #2]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d107      	bne.n	80079ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 f940 	bl	8007c68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079e8:	e013      	b.n	8007a12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	885b      	ldrh	r3, [r3, #2]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d10b      	bne.n	8007a0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	889b      	ldrh	r3, [r3, #4]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f930 	bl	8007c68 <USBD_CtlSendStatus>
}
 8007a08:	e003      	b.n	8007a12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f860 	bl	8007ad2 <USBD_CtlError>
}
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d80b      	bhi.n	8007a4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	885b      	ldrh	r3, [r3, #2]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d10c      	bne.n	8007a54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f910 	bl	8007c68 <USBD_CtlSendStatus>
      }
      break;
 8007a48:	e004      	b.n	8007a54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a4a:	6839      	ldr	r1, [r7, #0]
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f840 	bl	8007ad2 <USBD_CtlError>
      break;
 8007a52:	e000      	b.n	8007a56 <USBD_ClrFeature+0x3c>
      break;
 8007a54:	bf00      	nop
  }
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b084      	sub	sp, #16
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
 8007a66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	781a      	ldrb	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	3301      	adds	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff fa41 	bl	8006f10 <SWAPBYTE>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	461a      	mov	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007aa2:	68f8      	ldr	r0, [r7, #12]
 8007aa4:	f7ff fa34 	bl	8006f10 <SWAPBYTE>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f7ff fa27 	bl	8006f10 <SWAPBYTE>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	80da      	strh	r2, [r3, #6]
}
 8007aca:	bf00      	nop
 8007acc:	3710      	adds	r7, #16
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007adc:	2180      	movs	r1, #128	; 0x80
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f003 fae0 	bl	800b0a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f003 fadc 	bl	800b0a4 <USBD_LL_StallEP>
}
 8007aec:	bf00      	nop
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b086      	sub	sp, #24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d036      	beq.n	8007b78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b0e:	6938      	ldr	r0, [r7, #16]
 8007b10:	f000 f836 	bl	8007b80 <USBD_GetLen>
 8007b14:	4603      	mov	r3, r0
 8007b16:	3301      	adds	r3, #1
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	005b      	lsls	r3, r3, #1
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	4413      	add	r3, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7812      	ldrb	r2, [r2, #0]
 8007b2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	3301      	adds	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	68ba      	ldr	r2, [r7, #8]
 8007b38:	4413      	add	r3, r2
 8007b3a:	2203      	movs	r2, #3
 8007b3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
 8007b40:	3301      	adds	r3, #1
 8007b42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b44:	e013      	b.n	8007b6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b46:	7dfb      	ldrb	r3, [r7, #23]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	3301      	adds	r3, #1
 8007b56:	613b      	str	r3, [r7, #16]
    idx++;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	4413      	add	r3, r2
 8007b64:	2200      	movs	r2, #0
 8007b66:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e7      	bne.n	8007b46 <USBD_GetString+0x52>
 8007b76:	e000      	b.n	8007b7a <USBD_GetString+0x86>
    return;
 8007b78:	bf00      	nop
  }
}
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b90:	e005      	b.n	8007b9e <USBD_GetLen+0x1e>
  {
    len++;
 8007b92:	7bfb      	ldrb	r3, [r7, #15]
 8007b94:	3301      	adds	r3, #1
 8007b96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f5      	bne.n	8007b92 <USBD_GetLen+0x12>
  }

  return len;
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3714      	adds	r7, #20
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2202      	movs	r2, #2
 8007bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68ba      	ldr	r2, [r7, #8]
 8007bd8:	2100      	movs	r1, #0
 8007bda:	68f8      	ldr	r0, [r7, #12]
 8007bdc:	f003 faeb 	bl	800b1b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b084      	sub	sp, #16
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	60f8      	str	r0, [r7, #12]
 8007bf2:	60b9      	str	r1, [r7, #8]
 8007bf4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f003 fada 	bl	800b1b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2203      	movs	r2, #3
 8007c1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	2100      	movs	r1, #0
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f003 fade 	bl	800b1f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3710      	adds	r7, #16
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	2100      	movs	r1, #0
 8007c58:	68f8      	ldr	r0, [r7, #12]
 8007c5a:	f003 facd 	bl	800b1f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2204      	movs	r2, #4
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f003 fa99 	bl	800b1b6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2205      	movs	r2, #5
 8007c9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f003 faa7 	bl	800b1f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	4a07      	ldr	r2, [pc, #28]	; (8007ce0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007cc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4a06      	ldr	r2, [pc, #24]	; (8007ce4 <vApplicationGetIdleTaskMemory+0x30>)
 8007cca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2280      	movs	r2, #128	; 0x80
 8007cd0:	601a      	str	r2, [r3, #0]
}
 8007cd2:	bf00      	nop
 8007cd4:	3714      	adds	r7, #20
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	2000125c 	.word	0x2000125c
 8007ce4:	200012b8 	.word	0x200012b8

08007ce8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	4a07      	ldr	r2, [pc, #28]	; (8007d14 <vApplicationGetTimerTaskMemory+0x2c>)
 8007cf8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	4a06      	ldr	r2, [pc, #24]	; (8007d18 <vApplicationGetTimerTaskMemory+0x30>)
 8007cfe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d06:	601a      	str	r2, [r3, #0]
}
 8007d08:	bf00      	nop
 8007d0a:	3714      	adds	r7, #20
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	200014b8 	.word	0x200014b8
 8007d18:	20001514 	.word	0x20001514

08007d1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f103 0208 	add.w	r2, r3, #8
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f04f 32ff 	mov.w	r2, #4294967295
 8007d34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f103 0208 	add.w	r2, r3, #8
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f103 0208 	add.w	r2, r3, #8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d76:	b480      	push	{r7}
 8007d78:	b085      	sub	sp, #20
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
 8007d7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	683a      	ldr	r2, [r7, #0]
 8007da0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	1c5a      	adds	r2, r3, #1
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	601a      	str	r2, [r3, #0]
}
 8007db2:	bf00      	nop
 8007db4:	3714      	adds	r7, #20
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b085      	sub	sp, #20
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd4:	d103      	bne.n	8007dde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	691b      	ldr	r3, [r3, #16]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	e00c      	b.n	8007df8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	3308      	adds	r3, #8
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	e002      	b.n	8007dec <vListInsert+0x2e>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d2f6      	bcs.n	8007de6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	683a      	ldr	r2, [r7, #0]
 8007e06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	683a      	ldr	r2, [r7, #0]
 8007e12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6892      	ldr	r2, [r2, #8]
 8007e46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	6852      	ldr	r2, [r2, #4]
 8007e50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d103      	bne.n	8007e64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	689a      	ldr	r2, [r3, #8]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	1e5a      	subs	r2, r3, #1
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3714      	adds	r7, #20
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d10a      	bne.n	8007eae <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9c:	f383 8811 	msr	BASEPRI, r3
 8007ea0:	f3bf 8f6f 	isb	sy
 8007ea4:	f3bf 8f4f 	dsb	sy
 8007ea8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007eaa:	bf00      	nop
 8007eac:	e7fe      	b.n	8007eac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007eae:	f002 f889 	bl	8009fc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ebe:	fb01 f303 	mul.w	r3, r1, r3
 8007ec2:	441a      	add	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	68f9      	ldr	r1, [r7, #12]
 8007ee2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ee4:	fb01 f303 	mul.w	r3, r1, r3
 8007ee8:	441a      	add	r2, r3
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	22ff      	movs	r2, #255	; 0xff
 8007ef2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	22ff      	movs	r2, #255	; 0xff
 8007efa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d114      	bne.n	8007f2e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01a      	beq.n	8007f42 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	3310      	adds	r3, #16
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f93d 	bl	8009190 <xTaskRemoveFromEventList>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d012      	beq.n	8007f42 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f1c:	4b0c      	ldr	r3, [pc, #48]	; (8007f50 <xQueueGenericReset+0xcc>)
 8007f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	e009      	b.n	8007f42 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3310      	adds	r3, #16
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fef2 	bl	8007d1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3324      	adds	r3, #36	; 0x24
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7ff feed 	bl	8007d1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f42:	f002 f86f 	bl	800a024 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f46:	2301      	movs	r3, #1
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	e000ed04 	.word	0xe000ed04

08007f54 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08e      	sub	sp, #56	; 0x38
 8007f58:	af02      	add	r7, sp, #8
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
 8007f60:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d10a      	bne.n	8007f7e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6c:	f383 8811 	msr	BASEPRI, r3
 8007f70:	f3bf 8f6f 	isb	sy
 8007f74:	f3bf 8f4f 	dsb	sy
 8007f78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f7a:	bf00      	nop
 8007f7c:	e7fe      	b.n	8007f7c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10a      	bne.n	8007f9a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f96:	bf00      	nop
 8007f98:	e7fe      	b.n	8007f98 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <xQueueGenericCreateStatic+0x52>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <xQueueGenericCreateStatic+0x56>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e000      	b.n	8007fac <xQueueGenericCreateStatic+0x58>
 8007faa:	2300      	movs	r3, #0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d10a      	bne.n	8007fc6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	623b      	str	r3, [r7, #32]
}
 8007fc2:	bf00      	nop
 8007fc4:	e7fe      	b.n	8007fc4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d102      	bne.n	8007fd2 <xQueueGenericCreateStatic+0x7e>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <xQueueGenericCreateStatic+0x82>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xQueueGenericCreateStatic+0x84>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	61fb      	str	r3, [r7, #28]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ff2:	2350      	movs	r3, #80	; 0x50
 8007ff4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	2b50      	cmp	r3, #80	; 0x50
 8007ffa:	d00a      	beq.n	8008012 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008000:	f383 8811 	msr	BASEPRI, r3
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	61bb      	str	r3, [r7, #24]
}
 800800e:	bf00      	nop
 8008010:	e7fe      	b.n	8008010 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008012:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d00d      	beq.n	800803a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008026:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4613      	mov	r3, r2
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	68b9      	ldr	r1, [r7, #8]
 8008034:	68f8      	ldr	r0, [r7, #12]
 8008036:	f000 f83f 	bl	80080b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800803a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800803c:	4618      	mov	r0, r3
 800803e:	3730      	adds	r7, #48	; 0x30
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008044:	b580      	push	{r7, lr}
 8008046:	b08a      	sub	sp, #40	; 0x28
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	4613      	mov	r3, r2
 8008050:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805c:	f383 8811 	msr	BASEPRI, r3
 8008060:	f3bf 8f6f 	isb	sy
 8008064:	f3bf 8f4f 	dsb	sy
 8008068:	613b      	str	r3, [r7, #16]
}
 800806a:	bf00      	nop
 800806c:	e7fe      	b.n	800806c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	fb02 f303 	mul.w	r3, r2, r3
 8008076:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	3350      	adds	r3, #80	; 0x50
 800807c:	4618      	mov	r0, r3
 800807e:	f002 f8c3 	bl	800a208 <pvPortMalloc>
 8008082:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d011      	beq.n	80080ae <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	3350      	adds	r3, #80	; 0x50
 8008092:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800809c:	79fa      	ldrb	r2, [r7, #7]
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4613      	mov	r3, r2
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	68f8      	ldr	r0, [r7, #12]
 80080aa:	f000 f805 	bl	80080b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080ae:	69bb      	ldr	r3, [r7, #24]
	}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3720      	adds	r7, #32
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d103      	bne.n	80080d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	601a      	str	r2, [r3, #0]
 80080d2:	e002      	b.n	80080da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080da:	69bb      	ldr	r3, [r7, #24]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080e6:	2101      	movs	r1, #1
 80080e8:	69b8      	ldr	r0, [r7, #24]
 80080ea:	f7ff fecb 	bl	8007e84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	78fa      	ldrb	r2, [r7, #3]
 80080f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080f6:	bf00      	nop
 80080f8:	3710      	adds	r7, #16
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b08e      	sub	sp, #56	; 0x38
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d10a      	bne.n	8008132 <xQueueGenericSend+0x32>
	__asm volatile
 800811c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008120:	f383 8811 	msr	BASEPRI, r3
 8008124:	f3bf 8f6f 	isb	sy
 8008128:	f3bf 8f4f 	dsb	sy
 800812c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800812e:	bf00      	nop
 8008130:	e7fe      	b.n	8008130 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d103      	bne.n	8008140 <xQueueGenericSend+0x40>
 8008138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <xQueueGenericSend+0x44>
 8008140:	2301      	movs	r3, #1
 8008142:	e000      	b.n	8008146 <xQueueGenericSend+0x46>
 8008144:	2300      	movs	r3, #0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d10a      	bne.n	8008160 <xQueueGenericSend+0x60>
	__asm volatile
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800815c:	bf00      	nop
 800815e:	e7fe      	b.n	800815e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d103      	bne.n	800816e <xQueueGenericSend+0x6e>
 8008166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <xQueueGenericSend+0x72>
 800816e:	2301      	movs	r3, #1
 8008170:	e000      	b.n	8008174 <xQueueGenericSend+0x74>
 8008172:	2300      	movs	r3, #0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueGenericSend+0x8e>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	623b      	str	r3, [r7, #32]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800818e:	f001 f9bd 	bl	800950c <xTaskGetSchedulerState>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d102      	bne.n	800819e <xQueueGenericSend+0x9e>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <xQueueGenericSend+0xa2>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <xQueueGenericSend+0xa4>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10a      	bne.n	80081be <xQueueGenericSend+0xbe>
	__asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	61fb      	str	r3, [r7, #28]
}
 80081ba:	bf00      	nop
 80081bc:	e7fe      	b.n	80081bc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80081be:	f001 ff01 	bl	8009fc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d302      	bcc.n	80081d4 <xQueueGenericSend+0xd4>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d129      	bne.n	8008228 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	68b9      	ldr	r1, [r7, #8]
 80081d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081da:	f000 fa0b 	bl	80085f4 <prvCopyDataToQueue>
 80081de:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d010      	beq.n	800820a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ea:	3324      	adds	r3, #36	; 0x24
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 ffcf 	bl	8009190 <xTaskRemoveFromEventList>
 80081f2:	4603      	mov	r3, r0
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d013      	beq.n	8008220 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80081f8:	4b3f      	ldr	r3, [pc, #252]	; (80082f8 <xQueueGenericSend+0x1f8>)
 80081fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	e00a      	b.n	8008220 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800820a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	d007      	beq.n	8008220 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008210:	4b39      	ldr	r3, [pc, #228]	; (80082f8 <xQueueGenericSend+0x1f8>)
 8008212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008216:	601a      	str	r2, [r3, #0]
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008220:	f001 ff00 	bl	800a024 <vPortExitCritical>
				return pdPASS;
 8008224:	2301      	movs	r3, #1
 8008226:	e063      	b.n	80082f0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d103      	bne.n	8008236 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800822e:	f001 fef9 	bl	800a024 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008232:	2300      	movs	r3, #0
 8008234:	e05c      	b.n	80082f0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800823c:	f107 0314 	add.w	r3, r7, #20
 8008240:	4618      	mov	r0, r3
 8008242:	f001 f809 	bl	8009258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008246:	2301      	movs	r3, #1
 8008248:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800824a:	f001 feeb 	bl	800a024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800824e:	f000 fd7b 	bl	8008d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008252:	f001 feb7 	bl	8009fc4 <vPortEnterCritical>
 8008256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008258:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800825c:	b25b      	sxtb	r3, r3
 800825e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008262:	d103      	bne.n	800826c <xQueueGenericSend+0x16c>
 8008264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800826c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008272:	b25b      	sxtb	r3, r3
 8008274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008278:	d103      	bne.n	8008282 <xQueueGenericSend+0x182>
 800827a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008282:	f001 fecf 	bl	800a024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008286:	1d3a      	adds	r2, r7, #4
 8008288:	f107 0314 	add.w	r3, r7, #20
 800828c:	4611      	mov	r1, r2
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fff8 	bl	8009284 <xTaskCheckForTimeOut>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d124      	bne.n	80082e4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800829a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800829c:	f000 faa2 	bl	80087e4 <prvIsQueueFull>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d018      	beq.n	80082d8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	3310      	adds	r3, #16
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 ff1e 	bl	80090f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80082b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082b6:	f000 fa2d 	bl	8008714 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80082ba:	f000 fd53 	bl	8008d64 <xTaskResumeAll>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f47f af7c 	bne.w	80081be <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80082c6:	4b0c      	ldr	r3, [pc, #48]	; (80082f8 <xQueueGenericSend+0x1f8>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	e772      	b.n	80081be <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80082d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082da:	f000 fa1b 	bl	8008714 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80082de:	f000 fd41 	bl	8008d64 <xTaskResumeAll>
 80082e2:	e76c      	b.n	80081be <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80082e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082e6:	f000 fa15 	bl	8008714 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80082ea:	f000 fd3b 	bl	8008d64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80082ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3738      	adds	r7, #56	; 0x38
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	e000ed04 	.word	0xe000ed04

080082fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b090      	sub	sp, #64	; 0x40
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
 8008308:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800830e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d103      	bne.n	8008338 <xQueueGenericSendFromISR+0x3c>
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008334:	2b00      	cmp	r3, #0
 8008336:	d101      	bne.n	800833c <xQueueGenericSendFromISR+0x40>
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <xQueueGenericSendFromISR+0x42>
 800833c:	2300      	movs	r3, #0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008354:	bf00      	nop
 8008356:	e7fe      	b.n	8008356 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	2b02      	cmp	r3, #2
 800835c:	d103      	bne.n	8008366 <xQueueGenericSendFromISR+0x6a>
 800835e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <xQueueGenericSendFromISR+0x6e>
 8008366:	2301      	movs	r3, #1
 8008368:	e000      	b.n	800836c <xQueueGenericSendFromISR+0x70>
 800836a:	2300      	movs	r3, #0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	623b      	str	r3, [r7, #32]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008386:	f001 feff 	bl	800a188 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800838a:	f3ef 8211 	mrs	r2, BASEPRI
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	61fa      	str	r2, [r7, #28]
 80083a0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80083a2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80083a4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d302      	bcc.n	80083b8 <xQueueGenericSendFromISR+0xbc>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d12f      	bne.n	8008418 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80083b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80083be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	68b9      	ldr	r1, [r7, #8]
 80083cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80083ce:	f000 f911 	bl	80085f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80083d2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80083d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083da:	d112      	bne.n	8008402 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d016      	beq.n	8008412 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	3324      	adds	r3, #36	; 0x24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fed1 	bl	8009190 <xTaskRemoveFromEventList>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00e      	beq.n	8008412 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00b      	beq.n	8008412 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	e007      	b.n	8008412 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008402:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008406:	3301      	adds	r3, #1
 8008408:	b2db      	uxtb	r3, r3
 800840a:	b25a      	sxtb	r2, r3
 800840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008412:	2301      	movs	r3, #1
 8008414:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008416:	e001      	b.n	800841c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008418:	2300      	movs	r3, #0
 800841a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800841c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008426:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800842a:	4618      	mov	r0, r3
 800842c:	3740      	adds	r7, #64	; 0x40
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
	...

08008434 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08c      	sub	sp, #48	; 0x30
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008440:	2300      	movs	r3, #0
 8008442:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <xQueueReceive+0x30>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	623b      	str	r3, [r7, #32]
}
 8008460:	bf00      	nop
 8008462:	e7fe      	b.n	8008462 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d103      	bne.n	8008472 <xQueueReceive+0x3e>
 800846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <xQueueReceive+0x42>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <xQueueReceive+0x44>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10a      	bne.n	8008492 <xQueueReceive+0x5e>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	f383 8811 	msr	BASEPRI, r3
 8008484:	f3bf 8f6f 	isb	sy
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	61fb      	str	r3, [r7, #28]
}
 800848e:	bf00      	nop
 8008490:	e7fe      	b.n	8008490 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008492:	f001 f83b 	bl	800950c <xTaskGetSchedulerState>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d102      	bne.n	80084a2 <xQueueReceive+0x6e>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <xQueueReceive+0x72>
 80084a2:	2301      	movs	r3, #1
 80084a4:	e000      	b.n	80084a8 <xQueueReceive+0x74>
 80084a6:	2300      	movs	r3, #0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <xQueueReceive+0x8e>
	__asm volatile
 80084ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b0:	f383 8811 	msr	BASEPRI, r3
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	f3bf 8f4f 	dsb	sy
 80084bc:	61bb      	str	r3, [r7, #24]
}
 80084be:	bf00      	nop
 80084c0:	e7fe      	b.n	80084c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084c2:	f001 fd7f 	bl	8009fc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80084cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d01f      	beq.n	8008512 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084d6:	f000 f8f7 	bl	80086c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	1e5a      	subs	r2, r3, #1
 80084de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e4:	691b      	ldr	r3, [r3, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d00f      	beq.n	800850a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ec:	3310      	adds	r3, #16
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fe4e 	bl	8009190 <xTaskRemoveFromEventList>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d007      	beq.n	800850a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80084fa:	4b3d      	ldr	r3, [pc, #244]	; (80085f0 <xQueueReceive+0x1bc>)
 80084fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008500:	601a      	str	r2, [r3, #0]
 8008502:	f3bf 8f4f 	dsb	sy
 8008506:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800850a:	f001 fd8b 	bl	800a024 <vPortExitCritical>
				return pdPASS;
 800850e:	2301      	movs	r3, #1
 8008510:	e069      	b.n	80085e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008518:	f001 fd84 	bl	800a024 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800851c:	2300      	movs	r3, #0
 800851e:	e062      	b.n	80085e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008526:	f107 0310 	add.w	r3, r7, #16
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fe94 	bl	8009258 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008530:	2301      	movs	r3, #1
 8008532:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008534:	f001 fd76 	bl	800a024 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008538:	f000 fc06 	bl	8008d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800853c:	f001 fd42 	bl	8009fc4 <vPortEnterCritical>
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008546:	b25b      	sxtb	r3, r3
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d103      	bne.n	8008556 <xQueueReceive+0x122>
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008558:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800855c:	b25b      	sxtb	r3, r3
 800855e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008562:	d103      	bne.n	800856c <xQueueReceive+0x138>
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800856c:	f001 fd5a 	bl	800a024 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008570:	1d3a      	adds	r2, r7, #4
 8008572:	f107 0310 	add.w	r3, r7, #16
 8008576:	4611      	mov	r1, r2
 8008578:	4618      	mov	r0, r3
 800857a:	f000 fe83 	bl	8009284 <xTaskCheckForTimeOut>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d123      	bne.n	80085cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008586:	f000 f917 	bl	80087b8 <prvIsQueueEmpty>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d017      	beq.n	80085c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008592:	3324      	adds	r3, #36	; 0x24
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	4611      	mov	r1, r2
 8008598:	4618      	mov	r0, r3
 800859a:	f000 fda9 	bl	80090f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800859e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a0:	f000 f8b8 	bl	8008714 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085a4:	f000 fbde 	bl	8008d64 <xTaskResumeAll>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d189      	bne.n	80084c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80085ae:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <xQueueReceive+0x1bc>)
 80085b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	f3bf 8f4f 	dsb	sy
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	e780      	b.n	80084c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80085c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085c2:	f000 f8a7 	bl	8008714 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085c6:	f000 fbcd 	bl	8008d64 <xTaskResumeAll>
 80085ca:	e77a      	b.n	80084c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80085cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ce:	f000 f8a1 	bl	8008714 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80085d2:	f000 fbc7 	bl	8008d64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80085d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085d8:	f000 f8ee 	bl	80087b8 <prvIsQueueEmpty>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f43f af6f 	beq.w	80084c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3730      	adds	r7, #48	; 0x30
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008600:	2300      	movs	r3, #0
 8008602:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008608:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10d      	bne.n	800862e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d14d      	bne.n	80086b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 ff92 	bl	8009548 <xTaskPriorityDisinherit>
 8008624:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	609a      	str	r2, [r3, #8]
 800862c:	e043      	b.n	80086b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d119      	bne.n	8008668 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6858      	ldr	r0, [r3, #4]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863c:	461a      	mov	r2, r3
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	f003 fddc 	bl	800c1fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864c:	441a      	add	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	685a      	ldr	r2, [r3, #4]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	429a      	cmp	r2, r3
 800865c:	d32b      	bcc.n	80086b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	605a      	str	r2, [r3, #4]
 8008666:	e026      	b.n	80086b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	68d8      	ldr	r0, [r3, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	461a      	mov	r2, r3
 8008672:	68b9      	ldr	r1, [r7, #8]
 8008674:	f003 fdc2 	bl	800c1fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	425b      	negs	r3, r3
 8008682:	441a      	add	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	68da      	ldr	r2, [r3, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	429a      	cmp	r2, r3
 8008692:	d207      	bcs.n	80086a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869c:	425b      	negs	r3, r3
 800869e:	441a      	add	r2, r3
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d105      	bne.n	80086b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80086be:	697b      	ldr	r3, [r7, #20]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d018      	beq.n	800870c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68da      	ldr	r2, [r3, #12]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	441a      	add	r2, r3
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68da      	ldr	r2, [r3, #12]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d303      	bcc.n	80086fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	68d9      	ldr	r1, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008704:	461a      	mov	r2, r3
 8008706:	6838      	ldr	r0, [r7, #0]
 8008708:	f003 fd78 	bl	800c1fc <memcpy>
	}
}
 800870c:	bf00      	nop
 800870e:	3708      	adds	r7, #8
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800871c:	f001 fc52 	bl	8009fc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008726:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008728:	e011      	b.n	800874e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800872e:	2b00      	cmp	r3, #0
 8008730:	d012      	beq.n	8008758 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	3324      	adds	r3, #36	; 0x24
 8008736:	4618      	mov	r0, r3
 8008738:	f000 fd2a 	bl	8009190 <xTaskRemoveFromEventList>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008742:	f000 fe01 	bl	8009348 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
 8008748:	3b01      	subs	r3, #1
 800874a:	b2db      	uxtb	r3, r3
 800874c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800874e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008752:	2b00      	cmp	r3, #0
 8008754:	dce9      	bgt.n	800872a <prvUnlockQueue+0x16>
 8008756:	e000      	b.n	800875a <prvUnlockQueue+0x46>
					break;
 8008758:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	22ff      	movs	r2, #255	; 0xff
 800875e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008762:	f001 fc5f 	bl	800a024 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008766:	f001 fc2d 	bl	8009fc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008770:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008772:	e011      	b.n	8008798 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d012      	beq.n	80087a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	3310      	adds	r3, #16
 8008780:	4618      	mov	r0, r3
 8008782:	f000 fd05 	bl	8009190 <xTaskRemoveFromEventList>
 8008786:	4603      	mov	r3, r0
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800878c:	f000 fddc 	bl	8009348 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008790:	7bbb      	ldrb	r3, [r7, #14]
 8008792:	3b01      	subs	r3, #1
 8008794:	b2db      	uxtb	r3, r3
 8008796:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800879c:	2b00      	cmp	r3, #0
 800879e:	dce9      	bgt.n	8008774 <prvUnlockQueue+0x60>
 80087a0:	e000      	b.n	80087a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	22ff      	movs	r2, #255	; 0xff
 80087a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80087ac:	f001 fc3a 	bl	800a024 <vPortExitCritical>
}
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087c0:	f001 fc00 	bl	8009fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087cc:	2301      	movs	r3, #1
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	e001      	b.n	80087d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087d2:	2300      	movs	r3, #0
 80087d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087d6:	f001 fc25 	bl	800a024 <vPortExitCritical>

	return xReturn;
 80087da:	68fb      	ldr	r3, [r7, #12]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087ec:	f001 fbea 	bl	8009fc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d102      	bne.n	8008802 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	60fb      	str	r3, [r7, #12]
 8008800:	e001      	b.n	8008806 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008806:	f001 fc0d 	bl	800a024 <vPortExitCritical>

	return xReturn;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	e014      	b.n	800884e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008824:	4a0f      	ldr	r2, [pc, #60]	; (8008864 <vQueueAddToRegistry+0x50>)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d10b      	bne.n	8008848 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008830:	490c      	ldr	r1, [pc, #48]	; (8008864 <vQueueAddToRegistry+0x50>)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800883a:	4a0a      	ldr	r2, [pc, #40]	; (8008864 <vQueueAddToRegistry+0x50>)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	4413      	add	r3, r2
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008846:	e006      	b.n	8008856 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3301      	adds	r3, #1
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b07      	cmp	r3, #7
 8008852:	d9e7      	bls.n	8008824 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	3714      	adds	r7, #20
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop
 8008864:	20001914 	.word	0x20001914

08008868 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008868:	b580      	push	{r7, lr}
 800886a:	b086      	sub	sp, #24
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008878:	f001 fba4 	bl	8009fc4 <vPortEnterCritical>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008882:	b25b      	sxtb	r3, r3
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008888:	d103      	bne.n	8008892 <vQueueWaitForMessageRestricted+0x2a>
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008898:	b25b      	sxtb	r3, r3
 800889a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800889e:	d103      	bne.n	80088a8 <vQueueWaitForMessageRestricted+0x40>
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088a8:	f001 fbbc 	bl	800a024 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	3324      	adds	r3, #36	; 0x24
 80088b8:	687a      	ldr	r2, [r7, #4]
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	4618      	mov	r0, r3
 80088be:	f000 fc3b 	bl	8009138 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80088c2:	6978      	ldr	r0, [r7, #20]
 80088c4:	f7ff ff26 	bl	8008714 <prvUnlockQueue>
	}
 80088c8:	bf00      	nop
 80088ca:	3718      	adds	r7, #24
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}

080088d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08e      	sub	sp, #56	; 0x38
 80088d4:	af04      	add	r7, sp, #16
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	607a      	str	r2, [r7, #4]
 80088dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d10a      	bne.n	80088fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	f383 8811 	msr	BASEPRI, r3
 80088ec:	f3bf 8f6f 	isb	sy
 80088f0:	f3bf 8f4f 	dsb	sy
 80088f4:	623b      	str	r3, [r7, #32]
}
 80088f6:	bf00      	nop
 80088f8:	e7fe      	b.n	80088f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80088fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <xTaskCreateStatic+0x46>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	61fb      	str	r3, [r7, #28]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008916:	235c      	movs	r3, #92	; 0x5c
 8008918:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	2b5c      	cmp	r3, #92	; 0x5c
 800891e:	d00a      	beq.n	8008936 <xTaskCreateStatic+0x66>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	61bb      	str	r3, [r7, #24]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008936:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893a:	2b00      	cmp	r3, #0
 800893c:	d01e      	beq.n	800897c <xTaskCreateStatic+0xac>
 800893e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01b      	beq.n	800897c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800894c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	2202      	movs	r2, #2
 8008952:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008956:	2300      	movs	r3, #0
 8008958:	9303      	str	r3, [sp, #12]
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	9302      	str	r3, [sp, #8]
 800895e:	f107 0314 	add.w	r3, r7, #20
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	68b9      	ldr	r1, [r7, #8]
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f850 	bl	8008a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008974:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008976:	f000 f8dd 	bl	8008b34 <prvAddNewTaskToReadyList>
 800897a:	e001      	b.n	8008980 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800897c:	2300      	movs	r3, #0
 800897e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008980:	697b      	ldr	r3, [r7, #20]
	}
 8008982:	4618      	mov	r0, r3
 8008984:	3728      	adds	r7, #40	; 0x28
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800898a:	b580      	push	{r7, lr}
 800898c:	b08c      	sub	sp, #48	; 0x30
 800898e:	af04      	add	r7, sp, #16
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	603b      	str	r3, [r7, #0]
 8008996:	4613      	mov	r3, r2
 8008998:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800899a:	88fb      	ldrh	r3, [r7, #6]
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4618      	mov	r0, r3
 80089a0:	f001 fc32 	bl	800a208 <pvPortMalloc>
 80089a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00e      	beq.n	80089ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80089ac:	205c      	movs	r0, #92	; 0x5c
 80089ae:	f001 fc2b 	bl	800a208 <pvPortMalloc>
 80089b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	697a      	ldr	r2, [r7, #20]
 80089be:	631a      	str	r2, [r3, #48]	; 0x30
 80089c0:	e005      	b.n	80089ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80089c2:	6978      	ldr	r0, [r7, #20]
 80089c4:	f001 fcec 	bl	800a3a0 <vPortFree>
 80089c8:	e001      	b.n	80089ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d017      	beq.n	8008a04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	2300      	movs	r3, #0
 80089e0:	9303      	str	r3, [sp, #12]
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	9302      	str	r3, [sp, #8]
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68b9      	ldr	r1, [r7, #8]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f80e 	bl	8008a14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80089f8:	69f8      	ldr	r0, [r7, #28]
 80089fa:	f000 f89b 	bl	8008b34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80089fe:	2301      	movs	r3, #1
 8008a00:	61bb      	str	r3, [r7, #24]
 8008a02:	e002      	b.n	8008a0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008a04:	f04f 33ff 	mov.w	r3, #4294967295
 8008a08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008a0a:	69bb      	ldr	r3, [r7, #24]
	}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	3720      	adds	r7, #32
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
 8008a20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	21a5      	movs	r1, #165	; 0xa5
 8008a2e:	f003 fbb3 	bl	800c198 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	4413      	add	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	f023 0307 	bic.w	r3, r3, #7
 8008a4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f003 0307 	and.w	r3, r3, #7
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	617b      	str	r3, [r7, #20]
}
 8008a68:	bf00      	nop
 8008a6a:	e7fe      	b.n	8008a6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d01f      	beq.n	8008ab2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a72:	2300      	movs	r3, #0
 8008a74:	61fb      	str	r3, [r7, #28]
 8008a76:	e012      	b.n	8008a9e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	7819      	ldrb	r1, [r3, #0]
 8008a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	3334      	adds	r3, #52	; 0x34
 8008a88:	460a      	mov	r2, r1
 8008a8a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	4413      	add	r3, r2
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d006      	beq.n	8008aa6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	61fb      	str	r3, [r7, #28]
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	2b0f      	cmp	r3, #15
 8008aa2:	d9e9      	bls.n	8008a78 <prvInitialiseNewTask+0x64>
 8008aa4:	e000      	b.n	8008aa8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008aa6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ab0:	e003      	b.n	8008aba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	2b37      	cmp	r3, #55	; 0x37
 8008abe:	d901      	bls.n	8008ac4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ac0:	2337      	movs	r3, #55	; 0x37
 8008ac2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ace:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7ff f93e 	bl	8007d5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ae2:	3318      	adds	r3, #24
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7ff f939 	bl	8007d5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008aee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008af2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008afe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b02:	2200      	movs	r2, #0
 8008b04:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	68f9      	ldr	r1, [r7, #12]
 8008b12:	69b8      	ldr	r0, [r7, #24]
 8008b14:	f001 f928 	bl	8009d68 <pxPortInitialiseStack>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d002      	beq.n	8008b2a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	3720      	adds	r7, #32
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008b3c:	f001 fa42 	bl	8009fc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008b40:	4b2d      	ldr	r3, [pc, #180]	; (8008bf8 <prvAddNewTaskToReadyList+0xc4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	4a2c      	ldr	r2, [pc, #176]	; (8008bf8 <prvAddNewTaskToReadyList+0xc4>)
 8008b48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008b4a:	4b2c      	ldr	r3, [pc, #176]	; (8008bfc <prvAddNewTaskToReadyList+0xc8>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d109      	bne.n	8008b66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008b52:	4a2a      	ldr	r2, [pc, #168]	; (8008bfc <prvAddNewTaskToReadyList+0xc8>)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008b58:	4b27      	ldr	r3, [pc, #156]	; (8008bf8 <prvAddNewTaskToReadyList+0xc4>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d110      	bne.n	8008b82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008b60:	f000 fc16 	bl	8009390 <prvInitialiseTaskLists>
 8008b64:	e00d      	b.n	8008b82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008b66:	4b26      	ldr	r3, [pc, #152]	; (8008c00 <prvAddNewTaskToReadyList+0xcc>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d109      	bne.n	8008b82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008b6e:	4b23      	ldr	r3, [pc, #140]	; (8008bfc <prvAddNewTaskToReadyList+0xc8>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b78:	429a      	cmp	r2, r3
 8008b7a:	d802      	bhi.n	8008b82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008b7c:	4a1f      	ldr	r2, [pc, #124]	; (8008bfc <prvAddNewTaskToReadyList+0xc8>)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008b82:	4b20      	ldr	r3, [pc, #128]	; (8008c04 <prvAddNewTaskToReadyList+0xd0>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3301      	adds	r3, #1
 8008b88:	4a1e      	ldr	r2, [pc, #120]	; (8008c04 <prvAddNewTaskToReadyList+0xd0>)
 8008b8a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008b8c:	4b1d      	ldr	r3, [pc, #116]	; (8008c04 <prvAddNewTaskToReadyList+0xd0>)
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4b1b      	ldr	r3, [pc, #108]	; (8008c08 <prvAddNewTaskToReadyList+0xd4>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d903      	bls.n	8008ba8 <prvAddNewTaskToReadyList+0x74>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	4a18      	ldr	r2, [pc, #96]	; (8008c08 <prvAddNewTaskToReadyList+0xd4>)
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4a15      	ldr	r2, [pc, #84]	; (8008c0c <prvAddNewTaskToReadyList+0xd8>)
 8008bb6:	441a      	add	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7ff f8d9 	bl	8007d76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008bc4:	f001 fa2e 	bl	800a024 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008bc8:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <prvAddNewTaskToReadyList+0xcc>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00e      	beq.n	8008bee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008bd0:	4b0a      	ldr	r3, [pc, #40]	; (8008bfc <prvAddNewTaskToReadyList+0xc8>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d207      	bcs.n	8008bee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008bde:	4b0c      	ldr	r3, [pc, #48]	; (8008c10 <prvAddNewTaskToReadyList+0xdc>)
 8008be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008bee:	bf00      	nop
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20001e28 	.word	0x20001e28
 8008bfc:	20001954 	.word	0x20001954
 8008c00:	20001e34 	.word	0x20001e34
 8008c04:	20001e44 	.word	0x20001e44
 8008c08:	20001e30 	.word	0x20001e30
 8008c0c:	20001958 	.word	0x20001958
 8008c10:	e000ed04 	.word	0xe000ed04

08008c14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d017      	beq.n	8008c56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008c26:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <vTaskDelay+0x60>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00a      	beq.n	8008c44 <vTaskDelay+0x30>
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	60bb      	str	r3, [r7, #8]
}
 8008c40:	bf00      	nop
 8008c42:	e7fe      	b.n	8008c42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008c44:	f000 f880 	bl	8008d48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008c48:	2100      	movs	r1, #0
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fcea 	bl	8009624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008c50:	f000 f888 	bl	8008d64 <xTaskResumeAll>
 8008c54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d107      	bne.n	8008c6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008c5c:	4b06      	ldr	r3, [pc, #24]	; (8008c78 <vTaskDelay+0x64>)
 8008c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	f3bf 8f4f 	dsb	sy
 8008c68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c6c:	bf00      	nop
 8008c6e:	3710      	adds	r7, #16
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}
 8008c74:	20001e50 	.word	0x20001e50
 8008c78:	e000ed04 	.word	0xe000ed04

08008c7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08a      	sub	sp, #40	; 0x28
 8008c80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008c82:	2300      	movs	r3, #0
 8008c84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008c86:	2300      	movs	r3, #0
 8008c88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008c8a:	463a      	mov	r2, r7
 8008c8c:	1d39      	adds	r1, r7, #4
 8008c8e:	f107 0308 	add.w	r3, r7, #8
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff f80e 	bl	8007cb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008c98:	6839      	ldr	r1, [r7, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	9202      	str	r2, [sp, #8]
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	9300      	str	r3, [sp, #0]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	460a      	mov	r2, r1
 8008caa:	4921      	ldr	r1, [pc, #132]	; (8008d30 <vTaskStartScheduler+0xb4>)
 8008cac:	4821      	ldr	r0, [pc, #132]	; (8008d34 <vTaskStartScheduler+0xb8>)
 8008cae:	f7ff fe0f 	bl	80088d0 <xTaskCreateStatic>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4a20      	ldr	r2, [pc, #128]	; (8008d38 <vTaskStartScheduler+0xbc>)
 8008cb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008cb8:	4b1f      	ldr	r3, [pc, #124]	; (8008d38 <vTaskStartScheduler+0xbc>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d002      	beq.n	8008cc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	e001      	b.n	8008cca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d102      	bne.n	8008cd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008cd0:	f000 fcfc 	bl	80096cc <xTimerCreateTimerTask>
 8008cd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d116      	bne.n	8008d0a <vTaskStartScheduler+0x8e>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	613b      	str	r3, [r7, #16]
}
 8008cee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008cf0:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <vTaskStartScheduler+0xc0>)
 8008cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008cf8:	4b11      	ldr	r3, [pc, #68]	; (8008d40 <vTaskStartScheduler+0xc4>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008cfe:	4b11      	ldr	r3, [pc, #68]	; (8008d44 <vTaskStartScheduler+0xc8>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008d04:	f001 f8bc 	bl	8009e80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008d08:	e00e      	b.n	8008d28 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d10:	d10a      	bne.n	8008d28 <vTaskStartScheduler+0xac>
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	60fb      	str	r3, [r7, #12]
}
 8008d24:	bf00      	nop
 8008d26:	e7fe      	b.n	8008d26 <vTaskStartScheduler+0xaa>
}
 8008d28:	bf00      	nop
 8008d2a:	3718      	adds	r7, #24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	0800c2a0 	.word	0x0800c2a0
 8008d34:	08009361 	.word	0x08009361
 8008d38:	20001e4c 	.word	0x20001e4c
 8008d3c:	20001e48 	.word	0x20001e48
 8008d40:	20001e34 	.word	0x20001e34
 8008d44:	20001e2c 	.word	0x20001e2c

08008d48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008d48:	b480      	push	{r7}
 8008d4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008d4c:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <vTaskSuspendAll+0x18>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3301      	adds	r3, #1
 8008d52:	4a03      	ldr	r2, [pc, #12]	; (8008d60 <vTaskSuspendAll+0x18>)
 8008d54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008d56:	bf00      	nop
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	20001e50 	.word	0x20001e50

08008d64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008d72:	4b42      	ldr	r3, [pc, #264]	; (8008e7c <xTaskResumeAll+0x118>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <xTaskResumeAll+0x2c>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	603b      	str	r3, [r7, #0]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008d90:	f001 f918 	bl	8009fc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008d94:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <xTaskResumeAll+0x118>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	4a38      	ldr	r2, [pc, #224]	; (8008e7c <xTaskResumeAll+0x118>)
 8008d9c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d9e:	4b37      	ldr	r3, [pc, #220]	; (8008e7c <xTaskResumeAll+0x118>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d162      	bne.n	8008e6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008da6:	4b36      	ldr	r3, [pc, #216]	; (8008e80 <xTaskResumeAll+0x11c>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d05e      	beq.n	8008e6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008dae:	e02f      	b.n	8008e10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008db0:	4b34      	ldr	r3, [pc, #208]	; (8008e84 <xTaskResumeAll+0x120>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3318      	adds	r3, #24
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff f837 	bl	8007e30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	3304      	adds	r3, #4
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f7ff f832 	bl	8007e30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd0:	4b2d      	ldr	r3, [pc, #180]	; (8008e88 <xTaskResumeAll+0x124>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d903      	bls.n	8008de0 <xTaskResumeAll+0x7c>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ddc:	4a2a      	ldr	r2, [pc, #168]	; (8008e88 <xTaskResumeAll+0x124>)
 8008dde:	6013      	str	r3, [r2, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	4a27      	ldr	r2, [pc, #156]	; (8008e8c <xTaskResumeAll+0x128>)
 8008dee:	441a      	add	r2, r3
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3304      	adds	r3, #4
 8008df4:	4619      	mov	r1, r3
 8008df6:	4610      	mov	r0, r2
 8008df8:	f7fe ffbd 	bl	8007d76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e00:	4b23      	ldr	r3, [pc, #140]	; (8008e90 <xTaskResumeAll+0x12c>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d302      	bcc.n	8008e10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008e0a:	4b22      	ldr	r3, [pc, #136]	; (8008e94 <xTaskResumeAll+0x130>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e10:	4b1c      	ldr	r3, [pc, #112]	; (8008e84 <xTaskResumeAll+0x120>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1cb      	bne.n	8008db0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d001      	beq.n	8008e22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008e1e:	f000 fb55 	bl	80094cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008e22:	4b1d      	ldr	r3, [pc, #116]	; (8008e98 <xTaskResumeAll+0x134>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d010      	beq.n	8008e50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008e2e:	f000 f847 	bl	8008ec0 <xTaskIncrementTick>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008e38:	4b16      	ldr	r3, [pc, #88]	; (8008e94 <xTaskResumeAll+0x130>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3b01      	subs	r3, #1
 8008e42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f1      	bne.n	8008e2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008e4a:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <xTaskResumeAll+0x134>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008e50:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <xTaskResumeAll+0x130>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d009      	beq.n	8008e6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008e5c:	4b0f      	ldr	r3, [pc, #60]	; (8008e9c <xTaskResumeAll+0x138>)
 8008e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e62:	601a      	str	r2, [r3, #0]
 8008e64:	f3bf 8f4f 	dsb	sy
 8008e68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008e6c:	f001 f8da 	bl	800a024 <vPortExitCritical>

	return xAlreadyYielded;
 8008e70:	68bb      	ldr	r3, [r7, #8]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	20001e50 	.word	0x20001e50
 8008e80:	20001e28 	.word	0x20001e28
 8008e84:	20001de8 	.word	0x20001de8
 8008e88:	20001e30 	.word	0x20001e30
 8008e8c:	20001958 	.word	0x20001958
 8008e90:	20001954 	.word	0x20001954
 8008e94:	20001e3c 	.word	0x20001e3c
 8008e98:	20001e38 	.word	0x20001e38
 8008e9c:	e000ed04 	.word	0xe000ed04

08008ea0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ea6:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <xTaskGetTickCount+0x1c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008eac:	687b      	ldr	r3, [r7, #4]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20001e2c 	.word	0x20001e2c

08008ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008eca:	4b4f      	ldr	r3, [pc, #316]	; (8009008 <xTaskIncrementTick+0x148>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	f040 808f 	bne.w	8008ff2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ed4:	4b4d      	ldr	r3, [pc, #308]	; (800900c <xTaskIncrementTick+0x14c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008edc:	4a4b      	ldr	r2, [pc, #300]	; (800900c <xTaskIncrementTick+0x14c>)
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d120      	bne.n	8008f2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ee8:	4b49      	ldr	r3, [pc, #292]	; (8009010 <xTaskIncrementTick+0x150>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <xTaskIncrementTick+0x48>
	__asm volatile
 8008ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	603b      	str	r3, [r7, #0]
}
 8008f04:	bf00      	nop
 8008f06:	e7fe      	b.n	8008f06 <xTaskIncrementTick+0x46>
 8008f08:	4b41      	ldr	r3, [pc, #260]	; (8009010 <xTaskIncrementTick+0x150>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	4b41      	ldr	r3, [pc, #260]	; (8009014 <xTaskIncrementTick+0x154>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a3f      	ldr	r2, [pc, #252]	; (8009010 <xTaskIncrementTick+0x150>)
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	4a3f      	ldr	r2, [pc, #252]	; (8009014 <xTaskIncrementTick+0x154>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	4b3e      	ldr	r3, [pc, #248]	; (8009018 <xTaskIncrementTick+0x158>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	3301      	adds	r3, #1
 8008f22:	4a3d      	ldr	r2, [pc, #244]	; (8009018 <xTaskIncrementTick+0x158>)
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	f000 fad1 	bl	80094cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008f2a:	4b3c      	ldr	r3, [pc, #240]	; (800901c <xTaskIncrementTick+0x15c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d349      	bcc.n	8008fc8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f34:	4b36      	ldr	r3, [pc, #216]	; (8009010 <xTaskIncrementTick+0x150>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d104      	bne.n	8008f48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f3e:	4b37      	ldr	r3, [pc, #220]	; (800901c <xTaskIncrementTick+0x15c>)
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295
 8008f44:	601a      	str	r2, [r3, #0]
					break;
 8008f46:	e03f      	b.n	8008fc8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f48:	4b31      	ldr	r3, [pc, #196]	; (8009010 <xTaskIncrementTick+0x150>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d203      	bcs.n	8008f68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008f60:	4a2e      	ldr	r2, [pc, #184]	; (800901c <xTaskIncrementTick+0x15c>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008f66:	e02f      	b.n	8008fc8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	3304      	adds	r3, #4
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fe ff5f 	bl	8007e30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d004      	beq.n	8008f84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	3318      	adds	r3, #24
 8008f7e:	4618      	mov	r0, r3
 8008f80:	f7fe ff56 	bl	8007e30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	4b25      	ldr	r3, [pc, #148]	; (8009020 <xTaskIncrementTick+0x160>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d903      	bls.n	8008f98 <xTaskIncrementTick+0xd8>
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	4a22      	ldr	r2, [pc, #136]	; (8009020 <xTaskIncrementTick+0x160>)
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4a1f      	ldr	r2, [pc, #124]	; (8009024 <xTaskIncrementTick+0x164>)
 8008fa6:	441a      	add	r2, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	3304      	adds	r3, #4
 8008fac:	4619      	mov	r1, r3
 8008fae:	4610      	mov	r0, r2
 8008fb0:	f7fe fee1 	bl	8007d76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <xTaskIncrementTick+0x168>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d3b8      	bcc.n	8008f34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fc6:	e7b5      	b.n	8008f34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fc8:	4b17      	ldr	r3, [pc, #92]	; (8009028 <xTaskIncrementTick+0x168>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fce:	4915      	ldr	r1, [pc, #84]	; (8009024 <xTaskIncrementTick+0x164>)
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	440b      	add	r3, r1
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d901      	bls.n	8008fe4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008fe4:	4b11      	ldr	r3, [pc, #68]	; (800902c <xTaskIncrementTick+0x16c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008fec:	2301      	movs	r3, #1
 8008fee:	617b      	str	r3, [r7, #20]
 8008ff0:	e004      	b.n	8008ffc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ff2:	4b0f      	ldr	r3, [pc, #60]	; (8009030 <xTaskIncrementTick+0x170>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	4a0d      	ldr	r2, [pc, #52]	; (8009030 <xTaskIncrementTick+0x170>)
 8008ffa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ffc:	697b      	ldr	r3, [r7, #20]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3718      	adds	r7, #24
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20001e50 	.word	0x20001e50
 800900c:	20001e2c 	.word	0x20001e2c
 8009010:	20001de0 	.word	0x20001de0
 8009014:	20001de4 	.word	0x20001de4
 8009018:	20001e40 	.word	0x20001e40
 800901c:	20001e48 	.word	0x20001e48
 8009020:	20001e30 	.word	0x20001e30
 8009024:	20001958 	.word	0x20001958
 8009028:	20001954 	.word	0x20001954
 800902c:	20001e3c 	.word	0x20001e3c
 8009030:	20001e38 	.word	0x20001e38

08009034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800903a:	4b28      	ldr	r3, [pc, #160]	; (80090dc <vTaskSwitchContext+0xa8>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009042:	4b27      	ldr	r3, [pc, #156]	; (80090e0 <vTaskSwitchContext+0xac>)
 8009044:	2201      	movs	r2, #1
 8009046:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009048:	e041      	b.n	80090ce <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800904a:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <vTaskSwitchContext+0xac>)
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009050:	4b24      	ldr	r3, [pc, #144]	; (80090e4 <vTaskSwitchContext+0xb0>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	e010      	b.n	800907a <vTaskSwitchContext+0x46>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d10a      	bne.n	8009074 <vTaskSwitchContext+0x40>
	__asm volatile
 800905e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	607b      	str	r3, [r7, #4]
}
 8009070:	bf00      	nop
 8009072:	e7fe      	b.n	8009072 <vTaskSwitchContext+0x3e>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	3b01      	subs	r3, #1
 8009078:	60fb      	str	r3, [r7, #12]
 800907a:	491b      	ldr	r1, [pc, #108]	; (80090e8 <vTaskSwitchContext+0xb4>)
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	4613      	mov	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	440b      	add	r3, r1
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0e4      	beq.n	8009058 <vTaskSwitchContext+0x24>
 800908e:	68fa      	ldr	r2, [r7, #12]
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4a13      	ldr	r2, [pc, #76]	; (80090e8 <vTaskSwitchContext+0xb4>)
 800909a:	4413      	add	r3, r2
 800909c:	60bb      	str	r3, [r7, #8]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	685a      	ldr	r2, [r3, #4]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	605a      	str	r2, [r3, #4]
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	3308      	adds	r3, #8
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d104      	bne.n	80090be <vTaskSwitchContext+0x8a>
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	4a09      	ldr	r2, [pc, #36]	; (80090ec <vTaskSwitchContext+0xb8>)
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	4a06      	ldr	r2, [pc, #24]	; (80090e4 <vTaskSwitchContext+0xb0>)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6013      	str	r3, [r2, #0]
}
 80090ce:	bf00      	nop
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr
 80090da:	bf00      	nop
 80090dc:	20001e50 	.word	0x20001e50
 80090e0:	20001e3c 	.word	0x20001e3c
 80090e4:	20001e30 	.word	0x20001e30
 80090e8:	20001958 	.word	0x20001958
 80090ec:	20001954 	.word	0x20001954

080090f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009104:	f383 8811 	msr	BASEPRI, r3
 8009108:	f3bf 8f6f 	isb	sy
 800910c:	f3bf 8f4f 	dsb	sy
 8009110:	60fb      	str	r3, [r7, #12]
}
 8009112:	bf00      	nop
 8009114:	e7fe      	b.n	8009114 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009116:	4b07      	ldr	r3, [pc, #28]	; (8009134 <vTaskPlaceOnEventList+0x44>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	3318      	adds	r3, #24
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7fe fe4d 	bl	8007dbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009124:	2101      	movs	r1, #1
 8009126:	6838      	ldr	r0, [r7, #0]
 8009128:	f000 fa7c 	bl	8009624 <prvAddCurrentTaskToDelayedList>
}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	20001954 	.word	0x20001954

08009138 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009138:	b580      	push	{r7, lr}
 800913a:	b086      	sub	sp, #24
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10a      	bne.n	8009160 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914e:	f383 8811 	msr	BASEPRI, r3
 8009152:	f3bf 8f6f 	isb	sy
 8009156:	f3bf 8f4f 	dsb	sy
 800915a:	617b      	str	r3, [r7, #20]
}
 800915c:	bf00      	nop
 800915e:	e7fe      	b.n	800915e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009160:	4b0a      	ldr	r3, [pc, #40]	; (800918c <vTaskPlaceOnEventListRestricted+0x54>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	3318      	adds	r3, #24
 8009166:	4619      	mov	r1, r3
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f7fe fe04 	bl	8007d76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009174:	f04f 33ff 	mov.w	r3, #4294967295
 8009178:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	68b8      	ldr	r0, [r7, #8]
 800917e:	f000 fa51 	bl	8009624 <prvAddCurrentTaskToDelayedList>
	}
 8009182:	bf00      	nop
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20001954 	.word	0x20001954

08009190 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b086      	sub	sp, #24
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	68db      	ldr	r3, [r3, #12]
 800919e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d10a      	bne.n	80091bc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	60fb      	str	r3, [r7, #12]
}
 80091b8:	bf00      	nop
 80091ba:	e7fe      	b.n	80091ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	3318      	adds	r3, #24
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fe fe35 	bl	8007e30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091c6:	4b1e      	ldr	r3, [pc, #120]	; (8009240 <xTaskRemoveFromEventList+0xb0>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d11d      	bne.n	800920a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe fe2c 	bl	8007e30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091dc:	4b19      	ldr	r3, [pc, #100]	; (8009244 <xTaskRemoveFromEventList+0xb4>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d903      	bls.n	80091ec <xTaskRemoveFromEventList+0x5c>
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	4a16      	ldr	r2, [pc, #88]	; (8009244 <xTaskRemoveFromEventList+0xb4>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4613      	mov	r3, r2
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	4a13      	ldr	r2, [pc, #76]	; (8009248 <xTaskRemoveFromEventList+0xb8>)
 80091fa:	441a      	add	r2, r3
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	3304      	adds	r3, #4
 8009200:	4619      	mov	r1, r3
 8009202:	4610      	mov	r0, r2
 8009204:	f7fe fdb7 	bl	8007d76 <vListInsertEnd>
 8009208:	e005      	b.n	8009216 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	3318      	adds	r3, #24
 800920e:	4619      	mov	r1, r3
 8009210:	480e      	ldr	r0, [pc, #56]	; (800924c <xTaskRemoveFromEventList+0xbc>)
 8009212:	f7fe fdb0 	bl	8007d76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800921a:	4b0d      	ldr	r3, [pc, #52]	; (8009250 <xTaskRemoveFromEventList+0xc0>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009220:	429a      	cmp	r2, r3
 8009222:	d905      	bls.n	8009230 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009224:	2301      	movs	r3, #1
 8009226:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009228:	4b0a      	ldr	r3, [pc, #40]	; (8009254 <xTaskRemoveFromEventList+0xc4>)
 800922a:	2201      	movs	r2, #1
 800922c:	601a      	str	r2, [r3, #0]
 800922e:	e001      	b.n	8009234 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009234:	697b      	ldr	r3, [r7, #20]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20001e50 	.word	0x20001e50
 8009244:	20001e30 	.word	0x20001e30
 8009248:	20001958 	.word	0x20001958
 800924c:	20001de8 	.word	0x20001de8
 8009250:	20001954 	.word	0x20001954
 8009254:	20001e3c 	.word	0x20001e3c

08009258 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009260:	4b06      	ldr	r3, [pc, #24]	; (800927c <vTaskInternalSetTimeOutState+0x24>)
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009268:	4b05      	ldr	r3, [pc, #20]	; (8009280 <vTaskInternalSetTimeOutState+0x28>)
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	605a      	str	r2, [r3, #4]
}
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	20001e40 	.word	0x20001e40
 8009280:	20001e2c 	.word	0x20001e2c

08009284 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b088      	sub	sp, #32
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d10a      	bne.n	80092aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	613b      	str	r3, [r7, #16]
}
 80092a6:	bf00      	nop
 80092a8:	e7fe      	b.n	80092a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80092b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092b4:	f383 8811 	msr	BASEPRI, r3
 80092b8:	f3bf 8f6f 	isb	sy
 80092bc:	f3bf 8f4f 	dsb	sy
 80092c0:	60fb      	str	r3, [r7, #12]
}
 80092c2:	bf00      	nop
 80092c4:	e7fe      	b.n	80092c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80092c6:	f000 fe7d 	bl	8009fc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80092ca:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <xTaskCheckForTimeOut+0xbc>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	69ba      	ldr	r2, [r7, #24]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092e2:	d102      	bne.n	80092ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61fb      	str	r3, [r7, #28]
 80092e8:	e023      	b.n	8009332 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	4b15      	ldr	r3, [pc, #84]	; (8009344 <xTaskCheckForTimeOut+0xc0>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d007      	beq.n	8009306 <xTaskCheckForTimeOut+0x82>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	69ba      	ldr	r2, [r7, #24]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d302      	bcc.n	8009306 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	61fb      	str	r3, [r7, #28]
 8009304:	e015      	b.n	8009332 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	429a      	cmp	r2, r3
 800930e:	d20b      	bcs.n	8009328 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	681a      	ldr	r2, [r3, #0]
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff ff9b 	bl	8009258 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009322:	2300      	movs	r3, #0
 8009324:	61fb      	str	r3, [r7, #28]
 8009326:	e004      	b.n	8009332 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800932e:	2301      	movs	r3, #1
 8009330:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009332:	f000 fe77 	bl	800a024 <vPortExitCritical>

	return xReturn;
 8009336:	69fb      	ldr	r3, [r7, #28]
}
 8009338:	4618      	mov	r0, r3
 800933a:	3720      	adds	r7, #32
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	20001e2c 	.word	0x20001e2c
 8009344:	20001e40 	.word	0x20001e40

08009348 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800934c:	4b03      	ldr	r3, [pc, #12]	; (800935c <vTaskMissedYield+0x14>)
 800934e:	2201      	movs	r2, #1
 8009350:	601a      	str	r2, [r3, #0]
}
 8009352:	bf00      	nop
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	20001e3c 	.word	0x20001e3c

08009360 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009368:	f000 f852 	bl	8009410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800936c:	4b06      	ldr	r3, [pc, #24]	; (8009388 <prvIdleTask+0x28>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d9f9      	bls.n	8009368 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <prvIdleTask+0x2c>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009384:	e7f0      	b.n	8009368 <prvIdleTask+0x8>
 8009386:	bf00      	nop
 8009388:	20001958 	.word	0x20001958
 800938c:	e000ed04 	.word	0xe000ed04

08009390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009396:	2300      	movs	r3, #0
 8009398:	607b      	str	r3, [r7, #4]
 800939a:	e00c      	b.n	80093b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	4613      	mov	r3, r2
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4a12      	ldr	r2, [pc, #72]	; (80093f0 <prvInitialiseTaskLists+0x60>)
 80093a8:	4413      	add	r3, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fe fcb6 	bl	8007d1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	3301      	adds	r3, #1
 80093b4:	607b      	str	r3, [r7, #4]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b37      	cmp	r3, #55	; 0x37
 80093ba:	d9ef      	bls.n	800939c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80093bc:	480d      	ldr	r0, [pc, #52]	; (80093f4 <prvInitialiseTaskLists+0x64>)
 80093be:	f7fe fcad 	bl	8007d1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80093c2:	480d      	ldr	r0, [pc, #52]	; (80093f8 <prvInitialiseTaskLists+0x68>)
 80093c4:	f7fe fcaa 	bl	8007d1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80093c8:	480c      	ldr	r0, [pc, #48]	; (80093fc <prvInitialiseTaskLists+0x6c>)
 80093ca:	f7fe fca7 	bl	8007d1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80093ce:	480c      	ldr	r0, [pc, #48]	; (8009400 <prvInitialiseTaskLists+0x70>)
 80093d0:	f7fe fca4 	bl	8007d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80093d4:	480b      	ldr	r0, [pc, #44]	; (8009404 <prvInitialiseTaskLists+0x74>)
 80093d6:	f7fe fca1 	bl	8007d1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80093da:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <prvInitialiseTaskLists+0x78>)
 80093dc:	4a05      	ldr	r2, [pc, #20]	; (80093f4 <prvInitialiseTaskLists+0x64>)
 80093de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093e0:	4b0a      	ldr	r3, [pc, #40]	; (800940c <prvInitialiseTaskLists+0x7c>)
 80093e2:	4a05      	ldr	r2, [pc, #20]	; (80093f8 <prvInitialiseTaskLists+0x68>)
 80093e4:	601a      	str	r2, [r3, #0]
}
 80093e6:	bf00      	nop
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop
 80093f0:	20001958 	.word	0x20001958
 80093f4:	20001db8 	.word	0x20001db8
 80093f8:	20001dcc 	.word	0x20001dcc
 80093fc:	20001de8 	.word	0x20001de8
 8009400:	20001dfc 	.word	0x20001dfc
 8009404:	20001e14 	.word	0x20001e14
 8009408:	20001de0 	.word	0x20001de0
 800940c:	20001de4 	.word	0x20001de4

08009410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009416:	e019      	b.n	800944c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009418:	f000 fdd4 	bl	8009fc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800941c:	4b10      	ldr	r3, [pc, #64]	; (8009460 <prvCheckTasksWaitingTermination+0x50>)
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	3304      	adds	r3, #4
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe fd01 	bl	8007e30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800942e:	4b0d      	ldr	r3, [pc, #52]	; (8009464 <prvCheckTasksWaitingTermination+0x54>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	3b01      	subs	r3, #1
 8009434:	4a0b      	ldr	r2, [pc, #44]	; (8009464 <prvCheckTasksWaitingTermination+0x54>)
 8009436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009438:	4b0b      	ldr	r3, [pc, #44]	; (8009468 <prvCheckTasksWaitingTermination+0x58>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3b01      	subs	r3, #1
 800943e:	4a0a      	ldr	r2, [pc, #40]	; (8009468 <prvCheckTasksWaitingTermination+0x58>)
 8009440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009442:	f000 fdef 	bl	800a024 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 f810 	bl	800946c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800944c:	4b06      	ldr	r3, [pc, #24]	; (8009468 <prvCheckTasksWaitingTermination+0x58>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1e1      	bne.n	8009418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20001dfc 	.word	0x20001dfc
 8009464:	20001e28 	.word	0x20001e28
 8009468:	20001e10 	.word	0x20001e10

0800946c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800947a:	2b00      	cmp	r3, #0
 800947c:	d108      	bne.n	8009490 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009482:	4618      	mov	r0, r3
 8009484:	f000 ff8c 	bl	800a3a0 <vPortFree>
				vPortFree( pxTCB );
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 ff89 	bl	800a3a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800948e:	e018      	b.n	80094c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009496:	2b01      	cmp	r3, #1
 8009498:	d103      	bne.n	80094a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 ff80 	bl	800a3a0 <vPortFree>
	}
 80094a0:	e00f      	b.n	80094c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d00a      	beq.n	80094c2 <prvDeleteTCB+0x56>
	__asm volatile
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	60fb      	str	r3, [r7, #12]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <prvDeleteTCB+0x54>
	}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094d2:	4b0c      	ldr	r3, [pc, #48]	; (8009504 <prvResetNextTaskUnblockTime+0x38>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80094dc:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <prvResetNextTaskUnblockTime+0x3c>)
 80094de:	f04f 32ff 	mov.w	r2, #4294967295
 80094e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80094e4:	e008      	b.n	80094f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094e6:	4b07      	ldr	r3, [pc, #28]	; (8009504 <prvResetNextTaskUnblockTime+0x38>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	4a04      	ldr	r2, [pc, #16]	; (8009508 <prvResetNextTaskUnblockTime+0x3c>)
 80094f6:	6013      	str	r3, [r2, #0]
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr
 8009504:	20001de0 	.word	0x20001de0
 8009508:	20001e48 	.word	0x20001e48

0800950c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009512:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <xTaskGetSchedulerState+0x34>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d102      	bne.n	8009520 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800951a:	2301      	movs	r3, #1
 800951c:	607b      	str	r3, [r7, #4]
 800951e:	e008      	b.n	8009532 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009520:	4b08      	ldr	r3, [pc, #32]	; (8009544 <xTaskGetSchedulerState+0x38>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d102      	bne.n	800952e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009528:	2302      	movs	r3, #2
 800952a:	607b      	str	r3, [r7, #4]
 800952c:	e001      	b.n	8009532 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800952e:	2300      	movs	r3, #0
 8009530:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009532:	687b      	ldr	r3, [r7, #4]
	}
 8009534:	4618      	mov	r0, r3
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	20001e34 	.word	0x20001e34
 8009544:	20001e50 	.word	0x20001e50

08009548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009554:	2300      	movs	r3, #0
 8009556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d056      	beq.n	800960c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800955e:	4b2e      	ldr	r3, [pc, #184]	; (8009618 <xTaskPriorityDisinherit+0xd0>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	429a      	cmp	r2, r3
 8009566:	d00a      	beq.n	800957e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	60fb      	str	r3, [r7, #12]
}
 800957a:	bf00      	nop
 800957c:	e7fe      	b.n	800957c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10a      	bne.n	800959c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	60bb      	str	r3, [r7, #8]
}
 8009598:	bf00      	nop
 800959a:	e7fe      	b.n	800959a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a0:	1e5a      	subs	r2, r3, #1
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095ae:	429a      	cmp	r2, r3
 80095b0:	d02c      	beq.n	800960c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d128      	bne.n	800960c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	3304      	adds	r3, #4
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fc36 	bl	8007e30 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095dc:	4b0f      	ldr	r3, [pc, #60]	; (800961c <xTaskPriorityDisinherit+0xd4>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d903      	bls.n	80095ec <xTaskPriorityDisinherit+0xa4>
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095e8:	4a0c      	ldr	r2, [pc, #48]	; (800961c <xTaskPriorityDisinherit+0xd4>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095f0:	4613      	mov	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	4a09      	ldr	r2, [pc, #36]	; (8009620 <xTaskPriorityDisinherit+0xd8>)
 80095fa:	441a      	add	r2, r3
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	3304      	adds	r3, #4
 8009600:	4619      	mov	r1, r3
 8009602:	4610      	mov	r0, r2
 8009604:	f7fe fbb7 	bl	8007d76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009608:	2301      	movs	r3, #1
 800960a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800960c:	697b      	ldr	r3, [r7, #20]
	}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	20001954 	.word	0x20001954
 800961c:	20001e30 	.word	0x20001e30
 8009620:	20001958 	.word	0x20001958

08009624 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800962e:	4b21      	ldr	r3, [pc, #132]	; (80096b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009634:	4b20      	ldr	r3, [pc, #128]	; (80096b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	3304      	adds	r3, #4
 800963a:	4618      	mov	r0, r3
 800963c:	f7fe fbf8 	bl	8007e30 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009646:	d10a      	bne.n	800965e <prvAddCurrentTaskToDelayedList+0x3a>
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d007      	beq.n	800965e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800964e:	4b1a      	ldr	r3, [pc, #104]	; (80096b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	3304      	adds	r3, #4
 8009654:	4619      	mov	r1, r3
 8009656:	4819      	ldr	r0, [pc, #100]	; (80096bc <prvAddCurrentTaskToDelayedList+0x98>)
 8009658:	f7fe fb8d 	bl	8007d76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800965c:	e026      	b.n	80096ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4413      	add	r3, r2
 8009664:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009666:	4b14      	ldr	r3, [pc, #80]	; (80096b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	429a      	cmp	r2, r3
 8009674:	d209      	bcs.n	800968a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009676:	4b12      	ldr	r3, [pc, #72]	; (80096c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009678:	681a      	ldr	r2, [r3, #0]
 800967a:	4b0f      	ldr	r3, [pc, #60]	; (80096b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3304      	adds	r3, #4
 8009680:	4619      	mov	r1, r3
 8009682:	4610      	mov	r0, r2
 8009684:	f7fe fb9b 	bl	8007dbe <vListInsert>
}
 8009688:	e010      	b.n	80096ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800968a:	4b0e      	ldr	r3, [pc, #56]	; (80096c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3304      	adds	r3, #4
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7fe fb91 	bl	8007dbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800969c:	4b0a      	ldr	r3, [pc, #40]	; (80096c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d202      	bcs.n	80096ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80096a6:	4a08      	ldr	r2, [pc, #32]	; (80096c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	6013      	str	r3, [r2, #0]
}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	20001e2c 	.word	0x20001e2c
 80096b8:	20001954 	.word	0x20001954
 80096bc:	20001e14 	.word	0x20001e14
 80096c0:	20001de4 	.word	0x20001de4
 80096c4:	20001de0 	.word	0x20001de0
 80096c8:	20001e48 	.word	0x20001e48

080096cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08a      	sub	sp, #40	; 0x28
 80096d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80096d2:	2300      	movs	r3, #0
 80096d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80096d6:	f000 fb07 	bl	8009ce8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80096da:	4b1c      	ldr	r3, [pc, #112]	; (800974c <xTimerCreateTimerTask+0x80>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d021      	beq.n	8009726 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80096e6:	2300      	movs	r3, #0
 80096e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80096ea:	1d3a      	adds	r2, r7, #4
 80096ec:	f107 0108 	add.w	r1, r7, #8
 80096f0:	f107 030c 	add.w	r3, r7, #12
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7fe faf7 	bl	8007ce8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	9202      	str	r2, [sp, #8]
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	2302      	movs	r3, #2
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	2300      	movs	r3, #0
 800970a:	460a      	mov	r2, r1
 800970c:	4910      	ldr	r1, [pc, #64]	; (8009750 <xTimerCreateTimerTask+0x84>)
 800970e:	4811      	ldr	r0, [pc, #68]	; (8009754 <xTimerCreateTimerTask+0x88>)
 8009710:	f7ff f8de 	bl	80088d0 <xTaskCreateStatic>
 8009714:	4603      	mov	r3, r0
 8009716:	4a10      	ldr	r2, [pc, #64]	; (8009758 <xTimerCreateTimerTask+0x8c>)
 8009718:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800971a:	4b0f      	ldr	r3, [pc, #60]	; (8009758 <xTimerCreateTimerTask+0x8c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009722:	2301      	movs	r3, #1
 8009724:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10a      	bne.n	8009742 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	613b      	str	r3, [r7, #16]
}
 800973e:	bf00      	nop
 8009740:	e7fe      	b.n	8009740 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009742:	697b      	ldr	r3, [r7, #20]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20001e84 	.word	0x20001e84
 8009750:	0800c2a8 	.word	0x0800c2a8
 8009754:	08009891 	.word	0x08009891
 8009758:	20001e88 	.word	0x20001e88

0800975c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	; 0x28
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
 8009768:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800976a:	2300      	movs	r3, #0
 800976c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	623b      	str	r3, [r7, #32]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800978a:	4b1a      	ldr	r3, [pc, #104]	; (80097f4 <xTimerGenericCommand+0x98>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d02a      	beq.n	80097e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	2b05      	cmp	r3, #5
 80097a2:	dc18      	bgt.n	80097d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80097a4:	f7ff feb2 	bl	800950c <xTaskGetSchedulerState>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d109      	bne.n	80097c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80097ae:	4b11      	ldr	r3, [pc, #68]	; (80097f4 <xTimerGenericCommand+0x98>)
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	f107 0110 	add.w	r1, r7, #16
 80097b6:	2300      	movs	r3, #0
 80097b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ba:	f7fe fca1 	bl	8008100 <xQueueGenericSend>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24
 80097c0:	e012      	b.n	80097e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80097c2:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <xTimerGenericCommand+0x98>)
 80097c4:	6818      	ldr	r0, [r3, #0]
 80097c6:	f107 0110 	add.w	r1, r7, #16
 80097ca:	2300      	movs	r3, #0
 80097cc:	2200      	movs	r2, #0
 80097ce:	f7fe fc97 	bl	8008100 <xQueueGenericSend>
 80097d2:	6278      	str	r0, [r7, #36]	; 0x24
 80097d4:	e008      	b.n	80097e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80097d6:	4b07      	ldr	r3, [pc, #28]	; (80097f4 <xTimerGenericCommand+0x98>)
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	f107 0110 	add.w	r1, r7, #16
 80097de:	2300      	movs	r3, #0
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	f7fe fd8b 	bl	80082fc <xQueueGenericSendFromISR>
 80097e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3728      	adds	r7, #40	; 0x28
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20001e84 	.word	0x20001e84

080097f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af02      	add	r7, sp, #8
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009802:	4b22      	ldr	r3, [pc, #136]	; (800988c <prvProcessExpiredTimer+0x94>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	3304      	adds	r3, #4
 8009810:	4618      	mov	r0, r3
 8009812:	f7fe fb0d 	bl	8007e30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b00      	cmp	r3, #0
 8009822:	d022      	beq.n	800986a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	699a      	ldr	r2, [r3, #24]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	18d1      	adds	r1, r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	6978      	ldr	r0, [r7, #20]
 8009832:	f000 f8d1 	bl	80099d8 <prvInsertTimerInActiveList>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d01f      	beq.n	800987c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800983c:	2300      	movs	r3, #0
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	2300      	movs	r3, #0
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	2100      	movs	r1, #0
 8009846:	6978      	ldr	r0, [r7, #20]
 8009848:	f7ff ff88 	bl	800975c <xTimerGenericCommand>
 800984c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d113      	bne.n	800987c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	60fb      	str	r3, [r7, #12]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009870:	f023 0301 	bic.w	r3, r3, #1
 8009874:	b2da      	uxtb	r2, r3
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	6a1b      	ldr	r3, [r3, #32]
 8009880:	6978      	ldr	r0, [r7, #20]
 8009882:	4798      	blx	r3
}
 8009884:	bf00      	nop
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20001e7c 	.word	0x20001e7c

08009890 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009898:	f107 0308 	add.w	r3, r7, #8
 800989c:	4618      	mov	r0, r3
 800989e:	f000 f857 	bl	8009950 <prvGetNextExpireTime>
 80098a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4619      	mov	r1, r3
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f000 f803 	bl	80098b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80098ae:	f000 f8d5 	bl	8009a5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80098b2:	e7f1      	b.n	8009898 <prvTimerTask+0x8>

080098b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80098be:	f7ff fa43 	bl	8008d48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f866 	bl	8009998 <prvSampleTimeNow>
 80098cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d130      	bne.n	8009936 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10a      	bne.n	80098f0 <prvProcessTimerOrBlockTask+0x3c>
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d806      	bhi.n	80098f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80098e2:	f7ff fa3f 	bl	8008d64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff ff85 	bl	80097f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80098ee:	e024      	b.n	800993a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d008      	beq.n	8009908 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80098f6:	4b13      	ldr	r3, [pc, #76]	; (8009944 <prvProcessTimerOrBlockTask+0x90>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <prvProcessTimerOrBlockTask+0x50>
 8009900:	2301      	movs	r3, #1
 8009902:	e000      	b.n	8009906 <prvProcessTimerOrBlockTask+0x52>
 8009904:	2300      	movs	r3, #0
 8009906:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009908:	4b0f      	ldr	r3, [pc, #60]	; (8009948 <prvProcessTimerOrBlockTask+0x94>)
 800990a:	6818      	ldr	r0, [r3, #0]
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	1ad3      	subs	r3, r2, r3
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	4619      	mov	r1, r3
 8009916:	f7fe ffa7 	bl	8008868 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800991a:	f7ff fa23 	bl	8008d64 <xTaskResumeAll>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d10a      	bne.n	800993a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009924:	4b09      	ldr	r3, [pc, #36]	; (800994c <prvProcessTimerOrBlockTask+0x98>)
 8009926:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800992a:	601a      	str	r2, [r3, #0]
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	f3bf 8f6f 	isb	sy
}
 8009934:	e001      	b.n	800993a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009936:	f7ff fa15 	bl	8008d64 <xTaskResumeAll>
}
 800993a:	bf00      	nop
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	20001e80 	.word	0x20001e80
 8009948:	20001e84 	.word	0x20001e84
 800994c:	e000ed04 	.word	0xe000ed04

08009950 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009958:	4b0e      	ldr	r3, [pc, #56]	; (8009994 <prvGetNextExpireTime+0x44>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <prvGetNextExpireTime+0x16>
 8009962:	2201      	movs	r2, #1
 8009964:	e000      	b.n	8009968 <prvGetNextExpireTime+0x18>
 8009966:	2200      	movs	r2, #0
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009974:	4b07      	ldr	r3, [pc, #28]	; (8009994 <prvGetNextExpireTime+0x44>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68db      	ldr	r3, [r3, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]
 800997e:	e001      	b.n	8009984 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009980:	2300      	movs	r3, #0
 8009982:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009984:	68fb      	ldr	r3, [r7, #12]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20001e7c 	.word	0x20001e7c

08009998 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80099a0:	f7ff fa7e 	bl	8008ea0 <xTaskGetTickCount>
 80099a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80099a6:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <prvSampleTimeNow+0x3c>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	68fa      	ldr	r2, [r7, #12]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d205      	bcs.n	80099bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80099b0:	f000 f936 	bl	8009c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	601a      	str	r2, [r3, #0]
 80099ba:	e002      	b.n	80099c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80099c2:	4a04      	ldr	r2, [pc, #16]	; (80099d4 <prvSampleTimeNow+0x3c>)
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80099c8:	68fb      	ldr	r3, [r7, #12]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	20001e8c 	.word	0x20001e8c

080099d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80099e6:	2300      	movs	r3, #0
 80099e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d812      	bhi.n	8009a24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	1ad2      	subs	r2, r2, r3
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d302      	bcc.n	8009a12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	e01b      	b.n	8009a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a12:	4b10      	ldr	r3, [pc, #64]	; (8009a54 <prvInsertTimerInActiveList+0x7c>)
 8009a14:	681a      	ldr	r2, [r3, #0]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3304      	adds	r3, #4
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f7fe f9ce 	bl	8007dbe <vListInsert>
 8009a22:	e012      	b.n	8009a4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d206      	bcs.n	8009a3a <prvInsertTimerInActiveList+0x62>
 8009a2c:	68ba      	ldr	r2, [r7, #8]
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d302      	bcc.n	8009a3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
 8009a38:	e007      	b.n	8009a4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <prvInsertTimerInActiveList+0x80>)
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4619      	mov	r1, r3
 8009a44:	4610      	mov	r0, r2
 8009a46:	f7fe f9ba 	bl	8007dbe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009a4a:	697b      	ldr	r3, [r7, #20]
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3718      	adds	r7, #24
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20001e80 	.word	0x20001e80
 8009a58:	20001e7c 	.word	0x20001e7c

08009a5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08e      	sub	sp, #56	; 0x38
 8009a60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a62:	e0ca      	b.n	8009bfa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	da18      	bge.n	8009a9c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009a6a:	1d3b      	adds	r3, r7, #4
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10a      	bne.n	8009a8c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7a:	f383 8811 	msr	BASEPRI, r3
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	61fb      	str	r3, [r7, #28]
}
 8009a88:	bf00      	nop
 8009a8a:	e7fe      	b.n	8009a8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a92:	6850      	ldr	r0, [r2, #4]
 8009a94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a96:	6892      	ldr	r2, [r2, #8]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f2c0 80ab 	blt.w	8009bfa <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d004      	beq.n	8009aba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab2:	3304      	adds	r3, #4
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fe f9bb 	bl	8007e30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009aba:	463b      	mov	r3, r7
 8009abc:	4618      	mov	r0, r3
 8009abe:	f7ff ff6b 	bl	8009998 <prvSampleTimeNow>
 8009ac2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b09      	cmp	r3, #9
 8009ac8:	f200 8096 	bhi.w	8009bf8 <prvProcessReceivedCommands+0x19c>
 8009acc:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <prvProcessReceivedCommands+0x78>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009afd 	.word	0x08009afd
 8009ad8:	08009afd 	.word	0x08009afd
 8009adc:	08009afd 	.word	0x08009afd
 8009ae0:	08009b71 	.word	0x08009b71
 8009ae4:	08009b85 	.word	0x08009b85
 8009ae8:	08009bcf 	.word	0x08009bcf
 8009aec:	08009afd 	.word	0x08009afd
 8009af0:	08009afd 	.word	0x08009afd
 8009af4:	08009b71 	.word	0x08009b71
 8009af8:	08009b85 	.word	0x08009b85
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b02:	f043 0301 	orr.w	r3, r3, #1
 8009b06:	b2da      	uxtb	r2, r3
 8009b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009b0e:	68ba      	ldr	r2, [r7, #8]
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	18d1      	adds	r1, r2, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b1c:	f7ff ff5c 	bl	80099d8 <prvInsertTimerInActiveList>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d069      	beq.n	8009bfa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	6a1b      	ldr	r3, [r3, #32]
 8009b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d05e      	beq.n	8009bfa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	699b      	ldr	r3, [r3, #24]
 8009b42:	441a      	add	r2, r3
 8009b44:	2300      	movs	r3, #0
 8009b46:	9300      	str	r3, [sp, #0]
 8009b48:	2300      	movs	r3, #0
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b4e:	f7ff fe05 	bl	800975c <xTimerGenericCommand>
 8009b52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d14f      	bne.n	8009bfa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5e:	f383 8811 	msr	BASEPRI, r3
 8009b62:	f3bf 8f6f 	isb	sy
 8009b66:	f3bf 8f4f 	dsb	sy
 8009b6a:	61bb      	str	r3, [r7, #24]
}
 8009b6c:	bf00      	nop
 8009b6e:	e7fe      	b.n	8009b6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009b82:	e03a      	b.n	8009bfa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b8a:	f043 0301 	orr.w	r3, r3, #1
 8009b8e:	b2da      	uxtb	r2, r3
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009b96:	68ba      	ldr	r2, [r7, #8]
 8009b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d10a      	bne.n	8009bba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	617b      	str	r3, [r7, #20]
}
 8009bb6:	bf00      	nop
 8009bb8:	e7fe      	b.n	8009bb8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	699a      	ldr	r2, [r3, #24]
 8009bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc0:	18d1      	adds	r1, r2, r3
 8009bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bc8:	f7ff ff06 	bl	80099d8 <prvInsertTimerInActiveList>
					break;
 8009bcc:	e015      	b.n	8009bfa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bd4:	f003 0302 	and.w	r3, r3, #2
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d103      	bne.n	8009be4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009bdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bde:	f000 fbdf 	bl	800a3a0 <vPortFree>
 8009be2:	e00a      	b.n	8009bfa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bea:	f023 0301 	bic.w	r3, r3, #1
 8009bee:	b2da      	uxtb	r2, r3
 8009bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009bf6:	e000      	b.n	8009bfa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009bf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bfa:	4b08      	ldr	r3, [pc, #32]	; (8009c1c <prvProcessReceivedCommands+0x1c0>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	1d39      	adds	r1, r7, #4
 8009c00:	2200      	movs	r2, #0
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7fe fc16 	bl	8008434 <xQueueReceive>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f47f af2a 	bne.w	8009a64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009c10:	bf00      	nop
 8009c12:	bf00      	nop
 8009c14:	3730      	adds	r7, #48	; 0x30
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20001e84 	.word	0x20001e84

08009c20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009c26:	e048      	b.n	8009cba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c28:	4b2d      	ldr	r3, [pc, #180]	; (8009ce0 <prvSwitchTimerLists+0xc0>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c32:	4b2b      	ldr	r3, [pc, #172]	; (8009ce0 <prvSwitchTimerLists+0xc0>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3304      	adds	r3, #4
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe f8f5 	bl	8007e30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d02e      	beq.n	8009cba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	4413      	add	r3, r2
 8009c64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009c66:	68ba      	ldr	r2, [r7, #8]
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d90e      	bls.n	8009c8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009c7a:	4b19      	ldr	r3, [pc, #100]	; (8009ce0 <prvSwitchTimerLists+0xc0>)
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	3304      	adds	r3, #4
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f7fe f89a 	bl	8007dbe <vListInsert>
 8009c8a:	e016      	b.n	8009cba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	2300      	movs	r3, #0
 8009c92:	693a      	ldr	r2, [r7, #16]
 8009c94:	2100      	movs	r1, #0
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f7ff fd60 	bl	800975c <xTimerGenericCommand>
 8009c9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d10a      	bne.n	8009cba <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	603b      	str	r3, [r7, #0]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cba:	4b09      	ldr	r3, [pc, #36]	; (8009ce0 <prvSwitchTimerLists+0xc0>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1b1      	bne.n	8009c28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009cc4:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <prvSwitchTimerLists+0xc0>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009cca:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <prvSwitchTimerLists+0xc4>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a04      	ldr	r2, [pc, #16]	; (8009ce0 <prvSwitchTimerLists+0xc0>)
 8009cd0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009cd2:	4a04      	ldr	r2, [pc, #16]	; (8009ce4 <prvSwitchTimerLists+0xc4>)
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	6013      	str	r3, [r2, #0]
}
 8009cd8:	bf00      	nop
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	20001e7c 	.word	0x20001e7c
 8009ce4:	20001e80 	.word	0x20001e80

08009ce8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009cee:	f000 f969 	bl	8009fc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009cf2:	4b15      	ldr	r3, [pc, #84]	; (8009d48 <prvCheckForValidListAndQueue+0x60>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d120      	bne.n	8009d3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009cfa:	4814      	ldr	r0, [pc, #80]	; (8009d4c <prvCheckForValidListAndQueue+0x64>)
 8009cfc:	f7fe f80e 	bl	8007d1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009d00:	4813      	ldr	r0, [pc, #76]	; (8009d50 <prvCheckForValidListAndQueue+0x68>)
 8009d02:	f7fe f80b 	bl	8007d1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009d06:	4b13      	ldr	r3, [pc, #76]	; (8009d54 <prvCheckForValidListAndQueue+0x6c>)
 8009d08:	4a10      	ldr	r2, [pc, #64]	; (8009d4c <prvCheckForValidListAndQueue+0x64>)
 8009d0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009d0c:	4b12      	ldr	r3, [pc, #72]	; (8009d58 <prvCheckForValidListAndQueue+0x70>)
 8009d0e:	4a10      	ldr	r2, [pc, #64]	; (8009d50 <prvCheckForValidListAndQueue+0x68>)
 8009d10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009d12:	2300      	movs	r3, #0
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	4b11      	ldr	r3, [pc, #68]	; (8009d5c <prvCheckForValidListAndQueue+0x74>)
 8009d18:	4a11      	ldr	r2, [pc, #68]	; (8009d60 <prvCheckForValidListAndQueue+0x78>)
 8009d1a:	2110      	movs	r1, #16
 8009d1c:	200a      	movs	r0, #10
 8009d1e:	f7fe f919 	bl	8007f54 <xQueueGenericCreateStatic>
 8009d22:	4603      	mov	r3, r0
 8009d24:	4a08      	ldr	r2, [pc, #32]	; (8009d48 <prvCheckForValidListAndQueue+0x60>)
 8009d26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009d28:	4b07      	ldr	r3, [pc, #28]	; (8009d48 <prvCheckForValidListAndQueue+0x60>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d005      	beq.n	8009d3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009d30:	4b05      	ldr	r3, [pc, #20]	; (8009d48 <prvCheckForValidListAndQueue+0x60>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	490b      	ldr	r1, [pc, #44]	; (8009d64 <prvCheckForValidListAndQueue+0x7c>)
 8009d36:	4618      	mov	r0, r3
 8009d38:	f7fe fd6c 	bl	8008814 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d3c:	f000 f972 	bl	800a024 <vPortExitCritical>
}
 8009d40:	bf00      	nop
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}
 8009d46:	bf00      	nop
 8009d48:	20001e84 	.word	0x20001e84
 8009d4c:	20001e54 	.word	0x20001e54
 8009d50:	20001e68 	.word	0x20001e68
 8009d54:	20001e7c 	.word	0x20001e7c
 8009d58:	20001e80 	.word	0x20001e80
 8009d5c:	20001f30 	.word	0x20001f30
 8009d60:	20001e90 	.word	0x20001e90
 8009d64:	0800c2b0 	.word	0x0800c2b0

08009d68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	3b04      	subs	r3, #4
 8009d78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009d80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3b04      	subs	r3, #4
 8009d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	f023 0201 	bic.w	r2, r3, #1
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3b04      	subs	r3, #4
 8009d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009d98:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <pxPortInitialiseStack+0x64>)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	3b14      	subs	r3, #20
 8009da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	3b04      	subs	r3, #4
 8009dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f06f 0202 	mvn.w	r2, #2
 8009db6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3b20      	subs	r3, #32
 8009dbc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	08009dd1 	.word	0x08009dd1

08009dd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dda:	4b12      	ldr	r3, [pc, #72]	; (8009e24 <prvTaskExitError+0x54>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009de2:	d00a      	beq.n	8009dfa <prvTaskExitError+0x2a>
	__asm volatile
 8009de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	60fb      	str	r3, [r7, #12]
}
 8009df6:	bf00      	nop
 8009df8:	e7fe      	b.n	8009df8 <prvTaskExitError+0x28>
	__asm volatile
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	60bb      	str	r3, [r7, #8]
}
 8009e0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009e0e:	bf00      	nop
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d0fc      	beq.n	8009e10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e16:	bf00      	nop
 8009e18:	bf00      	nop
 8009e1a:	3714      	adds	r7, #20
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr
 8009e24:	20000098 	.word	0x20000098
	...

08009e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009e30:	4b07      	ldr	r3, [pc, #28]	; (8009e50 <pxCurrentTCBConst2>)
 8009e32:	6819      	ldr	r1, [r3, #0]
 8009e34:	6808      	ldr	r0, [r1, #0]
 8009e36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e3a:	f380 8809 	msr	PSP, r0
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f04f 0000 	mov.w	r0, #0
 8009e46:	f380 8811 	msr	BASEPRI, r0
 8009e4a:	4770      	bx	lr
 8009e4c:	f3af 8000 	nop.w

08009e50 <pxCurrentTCBConst2>:
 8009e50:	20001954 	.word	0x20001954
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009e54:	bf00      	nop
 8009e56:	bf00      	nop

08009e58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e58:	4808      	ldr	r0, [pc, #32]	; (8009e7c <prvPortStartFirstTask+0x24>)
 8009e5a:	6800      	ldr	r0, [r0, #0]
 8009e5c:	6800      	ldr	r0, [r0, #0]
 8009e5e:	f380 8808 	msr	MSP, r0
 8009e62:	f04f 0000 	mov.w	r0, #0
 8009e66:	f380 8814 	msr	CONTROL, r0
 8009e6a:	b662      	cpsie	i
 8009e6c:	b661      	cpsie	f
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	df00      	svc	0
 8009e78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009e7a:	bf00      	nop
 8009e7c:	e000ed08 	.word	0xe000ed08

08009e80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009e86:	4b46      	ldr	r3, [pc, #280]	; (8009fa0 <xPortStartScheduler+0x120>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a46      	ldr	r2, [pc, #280]	; (8009fa4 <xPortStartScheduler+0x124>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10a      	bne.n	8009ea6 <xPortStartScheduler+0x26>
	__asm volatile
 8009e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e94:	f383 8811 	msr	BASEPRI, r3
 8009e98:	f3bf 8f6f 	isb	sy
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	613b      	str	r3, [r7, #16]
}
 8009ea2:	bf00      	nop
 8009ea4:	e7fe      	b.n	8009ea4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009ea6:	4b3e      	ldr	r3, [pc, #248]	; (8009fa0 <xPortStartScheduler+0x120>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a3f      	ldr	r2, [pc, #252]	; (8009fa8 <xPortStartScheduler+0x128>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d10a      	bne.n	8009ec6 <xPortStartScheduler+0x46>
	__asm volatile
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	60fb      	str	r3, [r7, #12]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ec6:	4b39      	ldr	r3, [pc, #228]	; (8009fac <xPortStartScheduler+0x12c>)
 8009ec8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	22ff      	movs	r2, #255	; 0xff
 8009ed6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ee0:	78fb      	ldrb	r3, [r7, #3]
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ee8:	b2da      	uxtb	r2, r3
 8009eea:	4b31      	ldr	r3, [pc, #196]	; (8009fb0 <xPortStartScheduler+0x130>)
 8009eec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009eee:	4b31      	ldr	r3, [pc, #196]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009ef0:	2207      	movs	r2, #7
 8009ef2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ef4:	e009      	b.n	8009f0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009ef6:	4b2f      	ldr	r3, [pc, #188]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	3b01      	subs	r3, #1
 8009efc:	4a2d      	ldr	r2, [pc, #180]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009efe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	005b      	lsls	r3, r3, #1
 8009f06:	b2db      	uxtb	r3, r3
 8009f08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f0a:	78fb      	ldrb	r3, [r7, #3]
 8009f0c:	b2db      	uxtb	r3, r3
 8009f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f12:	2b80      	cmp	r3, #128	; 0x80
 8009f14:	d0ef      	beq.n	8009ef6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f16:	4b27      	ldr	r3, [pc, #156]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f1c3 0307 	rsb	r3, r3, #7
 8009f1e:	2b04      	cmp	r3, #4
 8009f20:	d00a      	beq.n	8009f38 <xPortStartScheduler+0xb8>
	__asm volatile
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	60bb      	str	r3, [r7, #8]
}
 8009f34:	bf00      	nop
 8009f36:	e7fe      	b.n	8009f36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f38:	4b1e      	ldr	r3, [pc, #120]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	021b      	lsls	r3, r3, #8
 8009f3e:	4a1d      	ldr	r2, [pc, #116]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009f40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f42:	4b1c      	ldr	r3, [pc, #112]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009f4a:	4a1a      	ldr	r2, [pc, #104]	; (8009fb4 <xPortStartScheduler+0x134>)
 8009f4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	b2da      	uxtb	r2, r3
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f56:	4b18      	ldr	r3, [pc, #96]	; (8009fb8 <xPortStartScheduler+0x138>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a17      	ldr	r2, [pc, #92]	; (8009fb8 <xPortStartScheduler+0x138>)
 8009f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009f62:	4b15      	ldr	r3, [pc, #84]	; (8009fb8 <xPortStartScheduler+0x138>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a14      	ldr	r2, [pc, #80]	; (8009fb8 <xPortStartScheduler+0x138>)
 8009f68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009f6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009f6e:	f000 f8dd 	bl	800a12c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009f72:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <xPortStartScheduler+0x13c>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009f78:	f000 f8fc 	bl	800a174 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009f7c:	4b10      	ldr	r3, [pc, #64]	; (8009fc0 <xPortStartScheduler+0x140>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a0f      	ldr	r2, [pc, #60]	; (8009fc0 <xPortStartScheduler+0x140>)
 8009f82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009f86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009f88:	f7ff ff66 	bl	8009e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009f8c:	f7ff f852 	bl	8009034 <vTaskSwitchContext>
	prvTaskExitError();
 8009f90:	f7ff ff1e 	bl	8009dd0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	e000ed00 	.word	0xe000ed00
 8009fa4:	410fc271 	.word	0x410fc271
 8009fa8:	410fc270 	.word	0x410fc270
 8009fac:	e000e400 	.word	0xe000e400
 8009fb0:	20001f80 	.word	0x20001f80
 8009fb4:	20001f84 	.word	0x20001f84
 8009fb8:	e000ed20 	.word	0xe000ed20
 8009fbc:	20000098 	.word	0x20000098
 8009fc0:	e000ef34 	.word	0xe000ef34

08009fc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	f383 8811 	msr	BASEPRI, r3
 8009fd2:	f3bf 8f6f 	isb	sy
 8009fd6:	f3bf 8f4f 	dsb	sy
 8009fda:	607b      	str	r3, [r7, #4]
}
 8009fdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009fde:	4b0f      	ldr	r3, [pc, #60]	; (800a01c <vPortEnterCritical+0x58>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	4a0d      	ldr	r2, [pc, #52]	; (800a01c <vPortEnterCritical+0x58>)
 8009fe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	; (800a01c <vPortEnterCritical+0x58>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10f      	bne.n	800a010 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ff0:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <vPortEnterCritical+0x5c>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00a      	beq.n	800a010 <vPortEnterCritical+0x4c>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	603b      	str	r3, [r7, #0]
}
 800a00c:	bf00      	nop
 800a00e:	e7fe      	b.n	800a00e <vPortEnterCritical+0x4a>
	}
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	20000098 	.word	0x20000098
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a02a:	4b12      	ldr	r3, [pc, #72]	; (800a074 <vPortExitCritical+0x50>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <vPortExitCritical+0x24>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	607b      	str	r3, [r7, #4]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <vPortExitCritical+0x50>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3b01      	subs	r3, #1
 800a04e:	4a09      	ldr	r2, [pc, #36]	; (800a074 <vPortExitCritical+0x50>)
 800a050:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a052:	4b08      	ldr	r3, [pc, #32]	; (800a074 <vPortExitCritical+0x50>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d105      	bne.n	800a066 <vPortExitCritical+0x42>
 800a05a:	2300      	movs	r3, #0
 800a05c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	f383 8811 	msr	BASEPRI, r3
}
 800a064:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a066:	bf00      	nop
 800a068:	370c      	adds	r7, #12
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	20000098 	.word	0x20000098
	...

0800a080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a080:	f3ef 8009 	mrs	r0, PSP
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <pxCurrentTCBConst>)
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	f01e 0f10 	tst.w	lr, #16
 800a090:	bf08      	it	eq
 800a092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09a:	6010      	str	r0, [r2, #0]
 800a09c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a0a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0a4:	f380 8811 	msr	BASEPRI, r0
 800a0a8:	f3bf 8f4f 	dsb	sy
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f7fe ffc0 	bl	8009034 <vTaskSwitchContext>
 800a0b4:	f04f 0000 	mov.w	r0, #0
 800a0b8:	f380 8811 	msr	BASEPRI, r0
 800a0bc:	bc09      	pop	{r0, r3}
 800a0be:	6819      	ldr	r1, [r3, #0]
 800a0c0:	6808      	ldr	r0, [r1, #0]
 800a0c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c6:	f01e 0f10 	tst.w	lr, #16
 800a0ca:	bf08      	it	eq
 800a0cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a0d0:	f380 8809 	msr	PSP, r0
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w

0800a0e0 <pxCurrentTCBConst>:
 800a0e0:	20001954 	.word	0x20001954
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop

0800a0e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	607b      	str	r3, [r7, #4]
}
 800a100:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a102:	f7fe fedd 	bl	8008ec0 <xTaskIncrementTick>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d003      	beq.n	800a114 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a10c:	4b06      	ldr	r3, [pc, #24]	; (800a128 <xPortSysTickHandler+0x40>)
 800a10e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	2300      	movs	r3, #0
 800a116:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f383 8811 	msr	BASEPRI, r3
}
 800a11e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	e000ed04 	.word	0xe000ed04

0800a12c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a12c:	b480      	push	{r7}
 800a12e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a130:	4b0b      	ldr	r3, [pc, #44]	; (800a160 <vPortSetupTimerInterrupt+0x34>)
 800a132:	2200      	movs	r2, #0
 800a134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a136:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <vPortSetupTimerInterrupt+0x38>)
 800a138:	2200      	movs	r2, #0
 800a13a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a13c:	4b0a      	ldr	r3, [pc, #40]	; (800a168 <vPortSetupTimerInterrupt+0x3c>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a0a      	ldr	r2, [pc, #40]	; (800a16c <vPortSetupTimerInterrupt+0x40>)
 800a142:	fba2 2303 	umull	r2, r3, r2, r3
 800a146:	099b      	lsrs	r3, r3, #6
 800a148:	4a09      	ldr	r2, [pc, #36]	; (800a170 <vPortSetupTimerInterrupt+0x44>)
 800a14a:	3b01      	subs	r3, #1
 800a14c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a14e:	4b04      	ldr	r3, [pc, #16]	; (800a160 <vPortSetupTimerInterrupt+0x34>)
 800a150:	2207      	movs	r2, #7
 800a152:	601a      	str	r2, [r3, #0]
}
 800a154:	bf00      	nop
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
 800a15e:	bf00      	nop
 800a160:	e000e010 	.word	0xe000e010
 800a164:	e000e018 	.word	0xe000e018
 800a168:	20000000 	.word	0x20000000
 800a16c:	10624dd3 	.word	0x10624dd3
 800a170:	e000e014 	.word	0xe000e014

0800a174 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a174:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a184 <vPortEnableVFP+0x10>
 800a178:	6801      	ldr	r1, [r0, #0]
 800a17a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a17e:	6001      	str	r1, [r0, #0]
 800a180:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a182:	bf00      	nop
 800a184:	e000ed88 	.word	0xe000ed88

0800a188 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a18e:	f3ef 8305 	mrs	r3, IPSR
 800a192:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2b0f      	cmp	r3, #15
 800a198:	d914      	bls.n	800a1c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a19a:	4a17      	ldr	r2, [pc, #92]	; (800a1f8 <vPortValidateInterruptPriority+0x70>)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	781b      	ldrb	r3, [r3, #0]
 800a1a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a1a4:	4b15      	ldr	r3, [pc, #84]	; (800a1fc <vPortValidateInterruptPriority+0x74>)
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	7afa      	ldrb	r2, [r7, #11]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d20a      	bcs.n	800a1c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	607b      	str	r3, [r7, #4]
}
 800a1c0:	bf00      	nop
 800a1c2:	e7fe      	b.n	800a1c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a1c4:	4b0e      	ldr	r3, [pc, #56]	; (800a200 <vPortValidateInterruptPriority+0x78>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a1cc:	4b0d      	ldr	r3, [pc, #52]	; (800a204 <vPortValidateInterruptPriority+0x7c>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d90a      	bls.n	800a1ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1d8:	f383 8811 	msr	BASEPRI, r3
 800a1dc:	f3bf 8f6f 	isb	sy
 800a1e0:	f3bf 8f4f 	dsb	sy
 800a1e4:	603b      	str	r3, [r7, #0]
}
 800a1e6:	bf00      	nop
 800a1e8:	e7fe      	b.n	800a1e8 <vPortValidateInterruptPriority+0x60>
	}
 800a1ea:	bf00      	nop
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	e000e3f0 	.word	0xe000e3f0
 800a1fc:	20001f80 	.word	0x20001f80
 800a200:	e000ed0c 	.word	0xe000ed0c
 800a204:	20001f84 	.word	0x20001f84

0800a208 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b08a      	sub	sp, #40	; 0x28
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a210:	2300      	movs	r3, #0
 800a212:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a214:	f7fe fd98 	bl	8008d48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a218:	4b5b      	ldr	r3, [pc, #364]	; (800a388 <pvPortMalloc+0x180>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d101      	bne.n	800a224 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a220:	f000 f920 	bl	800a464 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a224:	4b59      	ldr	r3, [pc, #356]	; (800a38c <pvPortMalloc+0x184>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4013      	ands	r3, r2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f040 8093 	bne.w	800a358 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d01d      	beq.n	800a274 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a238:	2208      	movs	r2, #8
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4413      	add	r3, r2
 800a23e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f003 0307 	and.w	r3, r3, #7
 800a246:	2b00      	cmp	r3, #0
 800a248:	d014      	beq.n	800a274 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f023 0307 	bic.w	r3, r3, #7
 800a250:	3308      	adds	r3, #8
 800a252:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f003 0307 	and.w	r3, r3, #7
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00a      	beq.n	800a274 <pvPortMalloc+0x6c>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	617b      	str	r3, [r7, #20]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d06e      	beq.n	800a358 <pvPortMalloc+0x150>
 800a27a:	4b45      	ldr	r3, [pc, #276]	; (800a390 <pvPortMalloc+0x188>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	687a      	ldr	r2, [r7, #4]
 800a280:	429a      	cmp	r2, r3
 800a282:	d869      	bhi.n	800a358 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a284:	4b43      	ldr	r3, [pc, #268]	; (800a394 <pvPortMalloc+0x18c>)
 800a286:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a288:	4b42      	ldr	r3, [pc, #264]	; (800a394 <pvPortMalloc+0x18c>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a28e:	e004      	b.n	800a29a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a292:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d903      	bls.n	800a2ac <pvPortMalloc+0xa4>
 800a2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d1f1      	bne.n	800a290 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a2ac:	4b36      	ldr	r3, [pc, #216]	; (800a388 <pvPortMalloc+0x180>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d050      	beq.n	800a358 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2208      	movs	r2, #8
 800a2bc:	4413      	add	r3, r2
 800a2be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	685a      	ldr	r2, [r3, #4]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	2308      	movs	r3, #8
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d91f      	bls.n	800a318 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4413      	add	r3, r2
 800a2de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2e0:	69bb      	ldr	r3, [r7, #24]
 800a2e2:	f003 0307 	and.w	r3, r3, #7
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00a      	beq.n	800a300 <pvPortMalloc+0xf8>
	__asm volatile
 800a2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ee:	f383 8811 	msr	BASEPRI, r3
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	613b      	str	r3, [r7, #16]
}
 800a2fc:	bf00      	nop
 800a2fe:	e7fe      	b.n	800a2fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	1ad2      	subs	r2, r2, r3
 800a308:	69bb      	ldr	r3, [r7, #24]
 800a30a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a312:	69b8      	ldr	r0, [r7, #24]
 800a314:	f000 f908 	bl	800a528 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a318:	4b1d      	ldr	r3, [pc, #116]	; (800a390 <pvPortMalloc+0x188>)
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a31e:	685b      	ldr	r3, [r3, #4]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	4a1b      	ldr	r2, [pc, #108]	; (800a390 <pvPortMalloc+0x188>)
 800a324:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a326:	4b1a      	ldr	r3, [pc, #104]	; (800a390 <pvPortMalloc+0x188>)
 800a328:	681a      	ldr	r2, [r3, #0]
 800a32a:	4b1b      	ldr	r3, [pc, #108]	; (800a398 <pvPortMalloc+0x190>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d203      	bcs.n	800a33a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a332:	4b17      	ldr	r3, [pc, #92]	; (800a390 <pvPortMalloc+0x188>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a18      	ldr	r2, [pc, #96]	; (800a398 <pvPortMalloc+0x190>)
 800a338:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	4b13      	ldr	r3, [pc, #76]	; (800a38c <pvPortMalloc+0x184>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	431a      	orrs	r2, r3
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34a:	2200      	movs	r2, #0
 800a34c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a34e:	4b13      	ldr	r3, [pc, #76]	; (800a39c <pvPortMalloc+0x194>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	3301      	adds	r3, #1
 800a354:	4a11      	ldr	r2, [pc, #68]	; (800a39c <pvPortMalloc+0x194>)
 800a356:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a358:	f7fe fd04 	bl	8008d64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <pvPortMalloc+0x174>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	f383 8811 	msr	BASEPRI, r3
 800a36e:	f3bf 8f6f 	isb	sy
 800a372:	f3bf 8f4f 	dsb	sy
 800a376:	60fb      	str	r3, [r7, #12]
}
 800a378:	bf00      	nop
 800a37a:	e7fe      	b.n	800a37a <pvPortMalloc+0x172>
	return pvReturn;
 800a37c:	69fb      	ldr	r3, [r7, #28]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3728      	adds	r7, #40	; 0x28
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20005b90 	.word	0x20005b90
 800a38c:	20005ba4 	.word	0x20005ba4
 800a390:	20005b94 	.word	0x20005b94
 800a394:	20005b88 	.word	0x20005b88
 800a398:	20005b98 	.word	0x20005b98
 800a39c:	20005b9c 	.word	0x20005b9c

0800a3a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d04d      	beq.n	800a44e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a3b2:	2308      	movs	r3, #8
 800a3b4:	425b      	negs	r3, r3
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4413      	add	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	685a      	ldr	r2, [r3, #4]
 800a3c4:	4b24      	ldr	r3, [pc, #144]	; (800a458 <vPortFree+0xb8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10a      	bne.n	800a3e4 <vPortFree+0x44>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	60fb      	str	r3, [r7, #12]
}
 800a3e0:	bf00      	nop
 800a3e2:	e7fe      	b.n	800a3e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d00a      	beq.n	800a402 <vPortFree+0x62>
	__asm volatile
 800a3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f0:	f383 8811 	msr	BASEPRI, r3
 800a3f4:	f3bf 8f6f 	isb	sy
 800a3f8:	f3bf 8f4f 	dsb	sy
 800a3fc:	60bb      	str	r3, [r7, #8]
}
 800a3fe:	bf00      	nop
 800a400:	e7fe      	b.n	800a400 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	4b14      	ldr	r3, [pc, #80]	; (800a458 <vPortFree+0xb8>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4013      	ands	r3, r2
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d01e      	beq.n	800a44e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d11a      	bne.n	800a44e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	685a      	ldr	r2, [r3, #4]
 800a41c:	4b0e      	ldr	r3, [pc, #56]	; (800a458 <vPortFree+0xb8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	43db      	mvns	r3, r3
 800a422:	401a      	ands	r2, r3
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a428:	f7fe fc8e 	bl	8008d48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	4b0a      	ldr	r3, [pc, #40]	; (800a45c <vPortFree+0xbc>)
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4413      	add	r3, r2
 800a436:	4a09      	ldr	r2, [pc, #36]	; (800a45c <vPortFree+0xbc>)
 800a438:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a43a:	6938      	ldr	r0, [r7, #16]
 800a43c:	f000 f874 	bl	800a528 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a440:	4b07      	ldr	r3, [pc, #28]	; (800a460 <vPortFree+0xc0>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	3301      	adds	r3, #1
 800a446:	4a06      	ldr	r2, [pc, #24]	; (800a460 <vPortFree+0xc0>)
 800a448:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a44a:	f7fe fc8b 	bl	8008d64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a44e:	bf00      	nop
 800a450:	3718      	adds	r7, #24
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20005ba4 	.word	0x20005ba4
 800a45c:	20005b94 	.word	0x20005b94
 800a460:	20005ba0 	.word	0x20005ba0

0800a464 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a46a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a46e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a470:	4b27      	ldr	r3, [pc, #156]	; (800a510 <prvHeapInit+0xac>)
 800a472:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	f003 0307 	and.w	r3, r3, #7
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00c      	beq.n	800a498 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3307      	adds	r3, #7
 800a482:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f023 0307 	bic.w	r3, r3, #7
 800a48a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	4a1f      	ldr	r2, [pc, #124]	; (800a510 <prvHeapInit+0xac>)
 800a494:	4413      	add	r3, r2
 800a496:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a49c:	4a1d      	ldr	r2, [pc, #116]	; (800a514 <prvHeapInit+0xb0>)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a4a2:	4b1c      	ldr	r3, [pc, #112]	; (800a514 <prvHeapInit+0xb0>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a4b0:	2208      	movs	r2, #8
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f023 0307 	bic.w	r3, r3, #7
 800a4be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4a15      	ldr	r2, [pc, #84]	; (800a518 <prvHeapInit+0xb4>)
 800a4c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a4c6:	4b14      	ldr	r3, [pc, #80]	; (800a518 <prvHeapInit+0xb4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a4ce:	4b12      	ldr	r3, [pc, #72]	; (800a518 <prvHeapInit+0xb4>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	1ad2      	subs	r2, r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <prvHeapInit+0xb4>)
 800a4e6:	681a      	ldr	r2, [r3, #0]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	4a0a      	ldr	r2, [pc, #40]	; (800a51c <prvHeapInit+0xb8>)
 800a4f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	4a09      	ldr	r2, [pc, #36]	; (800a520 <prvHeapInit+0xbc>)
 800a4fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a4fc:	4b09      	ldr	r3, [pc, #36]	; (800a524 <prvHeapInit+0xc0>)
 800a4fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a502:	601a      	str	r2, [r3, #0]
}
 800a504:	bf00      	nop
 800a506:	3714      	adds	r7, #20
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	20001f88 	.word	0x20001f88
 800a514:	20005b88 	.word	0x20005b88
 800a518:	20005b90 	.word	0x20005b90
 800a51c:	20005b98 	.word	0x20005b98
 800a520:	20005b94 	.word	0x20005b94
 800a524:	20005ba4 	.word	0x20005ba4

0800a528 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a530:	4b28      	ldr	r3, [pc, #160]	; (800a5d4 <prvInsertBlockIntoFreeList+0xac>)
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e002      	b.n	800a53c <prvInsertBlockIntoFreeList+0x14>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	429a      	cmp	r2, r3
 800a544:	d8f7      	bhi.n	800a536 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	4413      	add	r3, r2
 800a552:	687a      	ldr	r2, [r7, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	d108      	bne.n	800a56a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	441a      	add	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	68ba      	ldr	r2, [r7, #8]
 800a574:	441a      	add	r2, r3
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d118      	bne.n	800a5b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4b15      	ldr	r3, [pc, #84]	; (800a5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d00d      	beq.n	800a5a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685a      	ldr	r2, [r3, #4]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	441a      	add	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	601a      	str	r2, [r3, #0]
 800a5a4:	e008      	b.n	800a5b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a5a6:	4b0c      	ldr	r3, [pc, #48]	; (800a5d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	601a      	str	r2, [r3, #0]
 800a5ae:	e003      	b.n	800a5b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d002      	beq.n	800a5c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	20005b88 	.word	0x20005b88
 800a5d8:	20005b90 	.word	0x20005b90

0800a5dc <HAL_I2S_RxCpltCallback>:

uint16_t u16CounterFFT = 0U ;
static void expandPDMbuffer( const uint16_t *inBuffer , float32_t *outBuffer   );

void HAL_I2S_RxCpltCallback (I2S_HandleTypeDef *hi2s )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b082      	sub	sp, #8
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	DEBUG_PIN_HW_ISR_TOGGLE() ;
 800a5e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a5e8:	4806      	ldr	r0, [pc, #24]	; (800a604 <HAL_I2S_RxCpltCallback+0x28>)
 800a5ea:	f7f7 f94a 	bl	8001882 <HAL_GPIO_TogglePin>
	xQueueSendFromISR( xDecimationQueue , & u16PDM_Buffer , &xHigherPriorityTaskWoken );
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <HAL_I2S_RxCpltCallback+0x2c>)
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	4a05      	ldr	r2, [pc, #20]	; (800a60c <HAL_I2S_RxCpltCallback+0x30>)
 800a5f6:	4906      	ldr	r1, [pc, #24]	; (800a610 <HAL_I2S_RxCpltCallback+0x34>)
 800a5f8:	f7fd fe80 	bl	80082fc <xQueueGenericSendFromISR>

}
 800a5fc:	bf00      	nop
 800a5fe:	3708      	adds	r7, #8
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	40020c00 	.word	0x40020c00
 800a608:	20007bb4 	.word	0x20007bb4
 800a60c:	20007bb0 	.word	0x20007bb0
 800a610:	20007bbc 	.word	0x20007bbc

0800a614 <vDecimationTaskRoutine>:



void vDecimationTaskRoutine( void * pvParameters )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b086      	sub	sp, #24
 800a618:	af02      	add	r7, sp, #8
 800a61a:	6078      	str	r0, [r7, #4]
	uint32_t Mode =   pvParameters   ;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	60fb      	str	r3, [r7, #12]
	/* create decimation  queue */

	xDecimationQueue =  xQueueCreate( DECMATION_QUEUE_SIZE , sizeof(  uint16_t  ) * PDM_BUFFER_SIZE   ) ;
 800a620:	2200      	movs	r2, #0
 800a622:	2180      	movs	r1, #128	; 0x80
 800a624:	2004      	movs	r0, #4
 800a626:	f7fd fd0d 	bl	8008044 <xQueueGenericCreate>
 800a62a:	4603      	mov	r3, r0
 800a62c:	4a33      	ldr	r2, [pc, #204]	; (800a6fc <vDecimationTaskRoutine+0xe8>)
 800a62e:	6013      	str	r3, [r2, #0]
	/* Create  FFT queue */
	xFFTQueue =  xQueueCreate( 10U , sizeof(  float32_t  ) * FFT_SIZE   ) ;
 800a630:	2200      	movs	r2, #0
 800a632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a636:	200a      	movs	r0, #10
 800a638:	f7fd fd04 	bl	8008044 <xQueueGenericCreate>
 800a63c:	4603      	mov	r3, r0
 800a63e:	4a30      	ldr	r2, [pc, #192]	; (800a700 <vDecimationTaskRoutine+0xec>)
 800a640:	6013      	str	r3, [r2, #0]

	/* Init  arm  CMSIS  Deciamtion filter  */
	arm_fir_decimate_init_f32	(&DecimateInstance  , FIR_LENGTH , DECIMATOR , 	fir_coeff_arrary , DecimateState , PDM_BITS_SIZE );
 800a642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	4b2e      	ldr	r3, [pc, #184]	; (800a704 <vDecimationTaskRoutine+0xf0>)
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	4b2e      	ldr	r3, [pc, #184]	; (800a708 <vDecimationTaskRoutine+0xf4>)
 800a64e:	2240      	movs	r2, #64	; 0x40
 800a650:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a654:	482d      	ldr	r0, [pc, #180]	; (800a70c <vDecimationTaskRoutine+0xf8>)
 800a656:	f001 fa6f 	bl	800bb38 <arm_fir_decimate_init_f32>


	/* Microphone Init  */
	u8Microphone_Init ();
 800a65a:	f7f5 ff41 	bl	80004e0 <u8Microphone_Init>

	/* Microphone Start */
	u8Microphone_Start(  u16PDM_Buffer ,  PDM_BUFFER_SIZE  );
 800a65e:	2140      	movs	r1, #64	; 0x40
 800a660:	482b      	ldr	r0, [pc, #172]	; (800a710 <vDecimationTaskRoutine+0xfc>)
 800a662:	f7f6 f877 	bl	8000754 <u8Microphone_Start>

    while ( 1 )
    {
        /* Task code goes here. */
    	DEBUG_PIN_TASK_DECIMATION_TOGGLE();
 800a666:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a66a:	482a      	ldr	r0, [pc, #168]	; (800a714 <vDecimationTaskRoutine+0x100>)
 800a66c:	f7f7 f909 	bl	8001882 <HAL_GPIO_TogglePin>
    	if (  xQueueReceive( xDecimationQueue , u16IntermidatePDMBuf , 0U  ) == pdPASS  )
 800a670:	4b22      	ldr	r3, [pc, #136]	; (800a6fc <vDecimationTaskRoutine+0xe8>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2200      	movs	r2, #0
 800a676:	4928      	ldr	r1, [pc, #160]	; (800a718 <vDecimationTaskRoutine+0x104>)
 800a678:	4618      	mov	r0, r3
 800a67a:	f7fd fedb 	bl	8008434 <xQueueReceive>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b01      	cmp	r3, #1
 800a682:	d131      	bne.n	800a6e8 <vDecimationTaskRoutine+0xd4>
    	{

    		/* expand pdm u16buffer to  float  buffer ( bits ) */

    		expandPDMbuffer( u16IntermidatePDMBuf  ,  f32PDM_BITS_Buffer  ) ;
 800a684:	4925      	ldr	r1, [pc, #148]	; (800a71c <vDecimationTaskRoutine+0x108>)
 800a686:	4824      	ldr	r0, [pc, #144]	; (800a718 <vDecimationTaskRoutine+0x104>)
 800a688:	f000 f850 	bl	800a72c <expandPDMbuffer>

    		/* process ar decimation filter */
    		arm_fir_decimate_f32(&DecimateInstance , f32PDM_BITS_Buffer , f32PCM_Buffer , PDM_BITS_SIZE  );
 800a68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a690:	4a23      	ldr	r2, [pc, #140]	; (800a720 <vDecimationTaskRoutine+0x10c>)
 800a692:	4922      	ldr	r1, [pc, #136]	; (800a71c <vDecimationTaskRoutine+0x108>)
 800a694:	481d      	ldr	r0, [pc, #116]	; (800a70c <vDecimationTaskRoutine+0xf8>)
 800a696:	f001 fa6b 	bl	800bb70 <arm_fir_decimate_f32>

    		/* Send Smaples to  fft Task */
    		if  ( u16CounterFFT == FFT_SIZE  )
 800a69a:	4b22      	ldr	r3, [pc, #136]	; (800a724 <vDecimationTaskRoutine+0x110>)
 800a69c:	881b      	ldrh	r3, [r3, #0]
 800a69e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6a2:	d10a      	bne.n	800a6ba <vDecimationTaskRoutine+0xa6>
    		{
    			xQueueSend( xFFTQueue , ( void * )f32FFT_Buffer ,0  );
 800a6a4:	4b16      	ldr	r3, [pc, #88]	; (800a700 <vDecimationTaskRoutine+0xec>)
 800a6a6:	6818      	ldr	r0, [r3, #0]
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	491e      	ldr	r1, [pc, #120]	; (800a728 <vDecimationTaskRoutine+0x114>)
 800a6ae:	f7fd fd27 	bl	8008100 <xQueueGenericSend>
    			u16CounterFFT =0U ;
 800a6b2:	4b1c      	ldr	r3, [pc, #112]	; (800a724 <vDecimationTaskRoutine+0x110>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	801a      	strh	r2, [r3, #0]
 800a6b8:	e00f      	b.n	800a6da <vDecimationTaskRoutine+0xc6>

    		}
    		else
    		{
    			memcpy( &f32FFT_Buffer[ u16CounterFFT ] , f32PCM_Buffer ,sizeof(float32_t)* PCM_BUFFER_SIZE );
 800a6ba:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <vDecimationTaskRoutine+0x110>)
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	4a19      	ldr	r2, [pc, #100]	; (800a728 <vDecimationTaskRoutine+0x114>)
 800a6c2:	4413      	add	r3, r2
 800a6c4:	2240      	movs	r2, #64	; 0x40
 800a6c6:	4916      	ldr	r1, [pc, #88]	; (800a720 <vDecimationTaskRoutine+0x10c>)
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 fd97 	bl	800c1fc <memcpy>
    			u16CounterFFT = u16CounterFFT + PCM_BUFFER_SIZE ;
 800a6ce:	4b15      	ldr	r3, [pc, #84]	; (800a724 <vDecimationTaskRoutine+0x110>)
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	3310      	adds	r3, #16
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	4b13      	ldr	r3, [pc, #76]	; (800a724 <vDecimationTaskRoutine+0x110>)
 800a6d8:	801a      	strh	r2, [r3, #0]

    		}
#define TEST_RECORD
#ifdef TEST_RECORD
    		/* send samples via usb */
    		if ( Mode == 1U )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d103      	bne.n	800a6e8 <vDecimationTaskRoutine+0xd4>
    		{
    		 CDC_Transmit_FS( (uint8_t * ) f32PCM_Buffer, PCM_BUFFER_SIZE  * sizeof(float));
 800a6e0:	2140      	movs	r1, #64	; 0x40
 800a6e2:	480f      	ldr	r0, [pc, #60]	; (800a720 <vDecimationTaskRoutine+0x10c>)
 800a6e4:	f000 f996 	bl	800aa14 <CDC_Transmit_FS>

    		}
#endif
    	}

    	DEBUG_PIN_TASK_DECIMATION_TOGGLE();
 800a6e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a6ec:	4809      	ldr	r0, [pc, #36]	; (800a714 <vDecimationTaskRoutine+0x100>)
 800a6ee:	f7f7 f8c8 	bl	8001882 <HAL_GPIO_TogglePin>

    	vTaskDelay(  1U  ) ;
 800a6f2:	2001      	movs	r0, #1
 800a6f4:	f7fe fa8e 	bl	8008c14 <vTaskDelay>
    	DEBUG_PIN_TASK_DECIMATION_TOGGLE();
 800a6f8:	e7b5      	b.n	800a666 <vDecimationTaskRoutine+0x52>
 800a6fa:	bf00      	nop
 800a6fc:	20007bb4 	.word	0x20007bb4
 800a700:	20007bb8 	.word	0x20007bb8
 800a704:	20005bb4 	.word	0x20005bb4
 800a708:	2000009c 	.word	0x2000009c
 800a70c:	20005ba8 	.word	0x20005ba8
 800a710:	20007bbc 	.word	0x20007bbc
 800a714:	40020c00 	.word	0x40020c00
 800a718:	20007c3c 	.word	0x20007c3c
 800a71c:	20007cbc 	.word	0x20007cbc
 800a720:	20008cbc 	.word	0x20008cbc
 800a724:	200090fc 	.word	0x200090fc
 800a728:	20008cfc 	.word	0x20008cfc

0800a72c <expandPDMbuffer>:




static void expandPDMbuffer( const uint16_t *inBuffer , float32_t *outBuffer   )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
    uint32_t bitIndex = 0;
 800a736:	2300      	movs	r3, #0
 800a738:	60fb      	str	r3, [r7, #12]
    uint16_t modifiedCurrentWord = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	817b      	strh	r3, [r7, #10]

    memset(outBuffer, 0, sizeof(PDM_BITS_SIZE ));
 800a73e:	2204      	movs	r2, #4
 800a740:	2100      	movs	r1, #0
 800a742:	6838      	ldr	r0, [r7, #0]
 800a744:	f001 fd28 	bl	800c198 <memset>

    /* Move each bit from each uint16_t word to an element of output array. */
    for(bitIndex=0;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]
 800a74c:	e023      	b.n	800a796 <expandPDMbuffer+0x6a>
        bitIndex < PDM_BITS_SIZE ;
        bitIndex++)
    {
        if (bitIndex % 16 == 0)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f003 030f 	and.w	r3, r3, #15
 800a754:	2b00      	cmp	r3, #0
 800a756:	d106      	bne.n	800a766 <expandPDMbuffer+0x3a>
        {
            modifiedCurrentWord = inBuffer[bitIndex/16];
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	091b      	lsrs	r3, r3, #4
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	4413      	add	r3, r2
 800a762:	881b      	ldrh	r3, [r3, #0]
 800a764:	817b      	strh	r3, [r7, #10]
        }

        if (modifiedCurrentWord & 0x8000)
 800a766:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	da06      	bge.n	800a77c <expandPDMbuffer+0x50>
        {
            outBuffer[bitIndex] = INT16_MAX;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	4413      	add	r3, r2
 800a776:	4a0c      	ldr	r2, [pc, #48]	; (800a7a8 <expandPDMbuffer+0x7c>)
 800a778:	601a      	str	r2, [r3, #0]
 800a77a:	e006      	b.n	800a78a <expandPDMbuffer+0x5e>
        }
        else
        {
            outBuffer[bitIndex] = INT16_MIN;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	683a      	ldr	r2, [r7, #0]
 800a782:	4413      	add	r3, r2
 800a784:	f04f 4247 	mov.w	r2, #3338665984	; 0xc7000000
 800a788:	601a      	str	r2, [r3, #0]
        }

        modifiedCurrentWord = modifiedCurrentWord << 1;
 800a78a:	897b      	ldrh	r3, [r7, #10]
 800a78c:	005b      	lsls	r3, r3, #1
 800a78e:	817b      	strh	r3, [r7, #10]
        bitIndex++)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	3301      	adds	r3, #1
 800a794:	60fb      	str	r3, [r7, #12]
        bitIndex < PDM_BITS_SIZE ;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a79c:	d3d7      	bcc.n	800a74e <expandPDMbuffer+0x22>
    }
}
 800a79e:	bf00      	nop
 800a7a0:	bf00      	nop
 800a7a2:	3710      	adds	r7, #16
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}
 800a7a8:	46fffe00 	.word	0x46fffe00

0800a7ac <vFFT_TaskRoutine>:


extern QueueHandle_t xFFTQueue ;

void vFFT_TaskRoutine( void * pvParameters )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	uint32_t Mode =   pvParameters   ;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	613b      	str	r3, [r7, #16]
	/*01 : Init FFT  */
	arm_status status = ARM_MATH_SUCCESS ;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	73fb      	strb	r3, [r7, #15]
	status = arm_cfft_radix4_init_f32	( &FFT_Instance ,  FFT_SIZE , 0 ,1 )	;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a7c4:	4827      	ldr	r0, [pc, #156]	; (800a864 <vFFT_TaskRoutine+0xb8>)
 800a7c6:	f000 fd8f 	bl	800b2e8 <arm_cfft_radix4_init_f32>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	73fb      	strb	r3, [r7, #15]

	while ( 1)
	{
		/*01  Get FFT Input Buffer  */
		DEBUG_PIN_TASK_FFT_TOGGLE();
 800a7ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7d2:	4825      	ldr	r0, [pc, #148]	; (800a868 <vFFT_TaskRoutine+0xbc>)
 800a7d4:	f7f7 f855 	bl	8001882 <HAL_GPIO_TogglePin>
		if (pdTRUE == xQueueReceive(xFFTQueue , PCM_Samples , 0 ) )
 800a7d8:	4b24      	ldr	r3, [pc, #144]	; (800a86c <vFFT_TaskRoutine+0xc0>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	4924      	ldr	r1, [pc, #144]	; (800a870 <vFFT_TaskRoutine+0xc4>)
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f7fd fe27 	bl	8008434 <xQueueReceive>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d132      	bne.n	800a852 <vFFT_TaskRoutine+0xa6>
			{
			/* add imaginary part  */
			uint16_t j = 0;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	82fb      	strh	r3, [r7, #22]
			for( uint16_t i = 0; i < FFT_SAMPLES ; i+= 2U )
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	82bb      	strh	r3, [r7, #20]
 800a7f4:	e017      	b.n	800a826 <vFFT_TaskRoutine+0x7a>
			{
				InputBuffer[ i ]= PCM_Samples [ j ];
 800a7f6:	8afa      	ldrh	r2, [r7, #22]
 800a7f8:	8abb      	ldrh	r3, [r7, #20]
 800a7fa:	491d      	ldr	r1, [pc, #116]	; (800a870 <vFFT_TaskRoutine+0xc4>)
 800a7fc:	0092      	lsls	r2, r2, #2
 800a7fe:	440a      	add	r2, r1
 800a800:	6812      	ldr	r2, [r2, #0]
 800a802:	491c      	ldr	r1, [pc, #112]	; (800a874 <vFFT_TaskRoutine+0xc8>)
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	440b      	add	r3, r1
 800a808:	601a      	str	r2, [r3, #0]
				InputBuffer[ i +1  ]= 0.0f;
 800a80a:	8abb      	ldrh	r3, [r7, #20]
 800a80c:	3301      	adds	r3, #1
 800a80e:	4a19      	ldr	r2, [pc, #100]	; (800a874 <vFFT_TaskRoutine+0xc8>)
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	601a      	str	r2, [r3, #0]
				j++ ;
 800a81a:	8afb      	ldrh	r3, [r7, #22]
 800a81c:	3301      	adds	r3, #1
 800a81e:	82fb      	strh	r3, [r7, #22]
			for( uint16_t i = 0; i < FFT_SAMPLES ; i+= 2U )
 800a820:	8abb      	ldrh	r3, [r7, #20]
 800a822:	3302      	adds	r3, #2
 800a824:	82bb      	strh	r3, [r7, #20]
 800a826:	8abb      	ldrh	r3, [r7, #20]
 800a828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a82c:	d3e3      	bcc.n	800a7f6 <vFFT_TaskRoutine+0x4a>

			}
			/*01  FFT Process  */
			arm_cfft_radix4_f32	(	&FFT_Instance,  InputBuffer )	;
 800a82e:	4911      	ldr	r1, [pc, #68]	; (800a874 <vFFT_TaskRoutine+0xc8>)
 800a830:	480c      	ldr	r0, [pc, #48]	; (800a864 <vFFT_TaskRoutine+0xb8>)
 800a832:	f001 f95d 	bl	800baf0 <arm_cfft_radix4_f32>

			/*01  Calculate FFT Magintudes  */
			 arm_cmplx_mag_f32(InputBuffer, OutputBuffer, FFT_SIZE);
 800a836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a83a:	490f      	ldr	r1, [pc, #60]	; (800a878 <vFFT_TaskRoutine+0xcc>)
 800a83c:	480d      	ldr	r0, [pc, #52]	; (800a874 <vFFT_TaskRoutine+0xc8>)
 800a83e:	f001 fb53 	bl	800bee8 <arm_cmplx_mag_f32>

			/*01  Send FFF Results Via USB  */
	    		if ( Mode == 2U )
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b02      	cmp	r3, #2
 800a846:	d104      	bne.n	800a852 <vFFT_TaskRoutine+0xa6>
	    		{
	    		 CDC_Transmit_FS( (uint8_t * ) OutputBuffer, FFT_SIZE  * sizeof( float32_t ));
 800a848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a84c:	480a      	ldr	r0, [pc, #40]	; (800a878 <vFFT_TaskRoutine+0xcc>)
 800a84e:	f000 f8e1 	bl	800aa14 <CDC_Transmit_FS>
	    		}
			}
		DEBUG_PIN_TASK_FFT_TOGGLE();
 800a852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a856:	4804      	ldr	r0, [pc, #16]	; (800a868 <vFFT_TaskRoutine+0xbc>)
 800a858:	f7f7 f813 	bl	8001882 <HAL_GPIO_TogglePin>
		/*01  Task  Periode */
		vTaskDelay( 1U );
 800a85c:	2001      	movs	r0, #1
 800a85e:	f7fe f9d9 	bl	8008c14 <vTaskDelay>
		DEBUG_PIN_TASK_FFT_TOGGLE();
 800a862:	e7b4      	b.n	800a7ce <vFFT_TaskRoutine+0x22>
 800a864:	20009100 	.word	0x20009100
 800a868:	40020c00 	.word	0x40020c00
 800a86c:	20007bb8 	.word	0x20007bb8
 800a870:	20009914 	.word	0x20009914
 800a874:	20009114 	.word	0x20009114
 800a878:	20009d14 	.word	0x20009d14

0800a87c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a880:	2200      	movs	r2, #0
 800a882:	4912      	ldr	r1, [pc, #72]	; (800a8cc <MX_USB_DEVICE_Init+0x50>)
 800a884:	4812      	ldr	r0, [pc, #72]	; (800a8d0 <MX_USB_DEVICE_Init+0x54>)
 800a886:	f7fb ff23 	bl	80066d0 <USBD_Init>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a890:	f7f6 f88e 	bl	80009b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a894:	490f      	ldr	r1, [pc, #60]	; (800a8d4 <MX_USB_DEVICE_Init+0x58>)
 800a896:	480e      	ldr	r0, [pc, #56]	; (800a8d0 <MX_USB_DEVICE_Init+0x54>)
 800a898:	f7fb ff4a 	bl	8006730 <USBD_RegisterClass>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a8a2:	f7f6 f885 	bl	80009b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a8a6:	490c      	ldr	r1, [pc, #48]	; (800a8d8 <MX_USB_DEVICE_Init+0x5c>)
 800a8a8:	4809      	ldr	r0, [pc, #36]	; (800a8d0 <MX_USB_DEVICE_Init+0x54>)
 800a8aa:	f7fb fe3b 	bl	8006524 <USBD_CDC_RegisterInterface>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a8b4:	f7f6 f87c 	bl	80009b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a8b8:	4805      	ldr	r0, [pc, #20]	; (800a8d0 <MX_USB_DEVICE_Init+0x54>)
 800a8ba:	f7fb ff6f 	bl	800679c <USBD_Start>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d001      	beq.n	800a8c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a8c4:	f7f6 f874 	bl	80009b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a8c8:	bf00      	nop
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	200010b0 	.word	0x200010b0
 800a8d0:	2000a114 	.word	0x2000a114
 800a8d4:	20000018 	.word	0x20000018
 800a8d8:	2000109c 	.word	0x2000109c

0800a8dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4905      	ldr	r1, [pc, #20]	; (800a8f8 <CDC_Init_FS+0x1c>)
 800a8e4:	4805      	ldr	r0, [pc, #20]	; (800a8fc <CDC_Init_FS+0x20>)
 800a8e6:	f7fb fe37 	bl	8006558 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a8ea:	4905      	ldr	r1, [pc, #20]	; (800a900 <CDC_Init_FS+0x24>)
 800a8ec:	4803      	ldr	r0, [pc, #12]	; (800a8fc <CDC_Init_FS+0x20>)
 800a8ee:	f7fb fe55 	bl	800659c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a8f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	2000abf0 	.word	0x2000abf0
 800a8fc:	2000a114 	.word	0x2000a114
 800a900:	2000a3f0 	.word	0x2000a3f0

0800a904 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a908:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	4603      	mov	r3, r0
 800a91c:	6039      	str	r1, [r7, #0]
 800a91e:	71fb      	strb	r3, [r7, #7]
 800a920:	4613      	mov	r3, r2
 800a922:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b23      	cmp	r3, #35	; 0x23
 800a928:	d84a      	bhi.n	800a9c0 <CDC_Control_FS+0xac>
 800a92a:	a201      	add	r2, pc, #4	; (adr r2, 800a930 <CDC_Control_FS+0x1c>)
 800a92c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a930:	0800a9c1 	.word	0x0800a9c1
 800a934:	0800a9c1 	.word	0x0800a9c1
 800a938:	0800a9c1 	.word	0x0800a9c1
 800a93c:	0800a9c1 	.word	0x0800a9c1
 800a940:	0800a9c1 	.word	0x0800a9c1
 800a944:	0800a9c1 	.word	0x0800a9c1
 800a948:	0800a9c1 	.word	0x0800a9c1
 800a94c:	0800a9c1 	.word	0x0800a9c1
 800a950:	0800a9c1 	.word	0x0800a9c1
 800a954:	0800a9c1 	.word	0x0800a9c1
 800a958:	0800a9c1 	.word	0x0800a9c1
 800a95c:	0800a9c1 	.word	0x0800a9c1
 800a960:	0800a9c1 	.word	0x0800a9c1
 800a964:	0800a9c1 	.word	0x0800a9c1
 800a968:	0800a9c1 	.word	0x0800a9c1
 800a96c:	0800a9c1 	.word	0x0800a9c1
 800a970:	0800a9c1 	.word	0x0800a9c1
 800a974:	0800a9c1 	.word	0x0800a9c1
 800a978:	0800a9c1 	.word	0x0800a9c1
 800a97c:	0800a9c1 	.word	0x0800a9c1
 800a980:	0800a9c1 	.word	0x0800a9c1
 800a984:	0800a9c1 	.word	0x0800a9c1
 800a988:	0800a9c1 	.word	0x0800a9c1
 800a98c:	0800a9c1 	.word	0x0800a9c1
 800a990:	0800a9c1 	.word	0x0800a9c1
 800a994:	0800a9c1 	.word	0x0800a9c1
 800a998:	0800a9c1 	.word	0x0800a9c1
 800a99c:	0800a9c1 	.word	0x0800a9c1
 800a9a0:	0800a9c1 	.word	0x0800a9c1
 800a9a4:	0800a9c1 	.word	0x0800a9c1
 800a9a8:	0800a9c1 	.word	0x0800a9c1
 800a9ac:	0800a9c1 	.word	0x0800a9c1
 800a9b0:	0800a9c1 	.word	0x0800a9c1
 800a9b4:	0800a9c1 	.word	0x0800a9c1
 800a9b8:	0800a9c1 	.word	0x0800a9c1
 800a9bc:	0800a9c1 	.word	0x0800a9c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a9c0:	bf00      	nop
  }

  return (USBD_OK);
 800a9c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a9da:	6879      	ldr	r1, [r7, #4]
 800a9dc:	480b      	ldr	r0, [pc, #44]	; (800aa0c <CDC_Receive_FS+0x3c>)
 800a9de:	f7fb fddd 	bl	800659c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a9e2:	480a      	ldr	r0, [pc, #40]	; (800aa0c <CDC_Receive_FS+0x3c>)
 800a9e4:	f7fb fe3e 	bl	8006664 <USBD_CDC_ReceivePacket>
  memcpy(  u8USBrecieveBuffer ,  Buf , *Len );
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	4807      	ldr	r0, [pc, #28]	; (800aa10 <CDC_Receive_FS+0x40>)
 800a9f2:	f001 fc03 	bl	800c1fc <memcpy>
  u8USBrecieveBuffer[*Len ] ='\0';
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a05      	ldr	r2, [pc, #20]	; (800aa10 <CDC_Receive_FS+0x40>)
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	54d1      	strb	r1, [r2, r3]
  return (USBD_OK);
 800aa00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	2000a114 	.word	0x2000a114
 800aa10:	20001214 	.word	0x20001214

0800aa14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b084      	sub	sp, #16
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	460b      	mov	r3, r1
 800aa1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aa20:	2300      	movs	r3, #0
 800aa22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <CDC_Transmit_FS+0x48>)
 800aa26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aa2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800aa36:	2301      	movs	r3, #1
 800aa38:	e00b      	b.n	800aa52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800aa3a:	887b      	ldrh	r3, [r7, #2]
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	4806      	ldr	r0, [pc, #24]	; (800aa5c <CDC_Transmit_FS+0x48>)
 800aa42:	f7fb fd89 	bl	8006558 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800aa46:	4805      	ldr	r0, [pc, #20]	; (800aa5c <CDC_Transmit_FS+0x48>)
 800aa48:	f7fb fdc6 	bl	80065d8 <USBD_CDC_TransmitPacket>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2000a114 	.word	0x2000a114

0800aa60 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	4613      	mov	r3, r2
 800aa6c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800aa72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	371c      	adds	r7, #28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
	...

0800aa84 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	6039      	str	r1, [r7, #0]
 800aa8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2212      	movs	r2, #18
 800aa94:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa96:	4b03      	ldr	r3, [pc, #12]	; (800aaa4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr
 800aaa4:	200010cc 	.word	0x200010cc

0800aaa8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	4603      	mov	r3, r0
 800aab0:	6039      	str	r1, [r7, #0]
 800aab2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	2204      	movs	r2, #4
 800aab8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aaba:	4b03      	ldr	r3, [pc, #12]	; (800aac8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	200010e0 	.word	0x200010e0

0800aacc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b082      	sub	sp, #8
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	4603      	mov	r3, r0
 800aad4:	6039      	str	r1, [r7, #0]
 800aad6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aad8:	79fb      	ldrb	r3, [r7, #7]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d105      	bne.n	800aaea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	4907      	ldr	r1, [pc, #28]	; (800ab00 <USBD_FS_ProductStrDescriptor+0x34>)
 800aae2:	4808      	ldr	r0, [pc, #32]	; (800ab04 <USBD_FS_ProductStrDescriptor+0x38>)
 800aae4:	f7fd f806 	bl	8007af4 <USBD_GetString>
 800aae8:	e004      	b.n	800aaf4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aaea:	683a      	ldr	r2, [r7, #0]
 800aaec:	4904      	ldr	r1, [pc, #16]	; (800ab00 <USBD_FS_ProductStrDescriptor+0x34>)
 800aaee:	4805      	ldr	r0, [pc, #20]	; (800ab04 <USBD_FS_ProductStrDescriptor+0x38>)
 800aaf0:	f7fd f800 	bl	8007af4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800aaf4:	4b02      	ldr	r3, [pc, #8]	; (800ab00 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	2000b3f0 	.word	0x2000b3f0
 800ab04:	0800c2b8 	.word	0x0800c2b8

0800ab08 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	4603      	mov	r3, r0
 800ab10:	6039      	str	r1, [r7, #0]
 800ab12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	4904      	ldr	r1, [pc, #16]	; (800ab28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ab18:	4804      	ldr	r0, [pc, #16]	; (800ab2c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ab1a:	f7fc ffeb 	bl	8007af4 <USBD_GetString>
  return USBD_StrDesc;
 800ab1e:	4b02      	ldr	r3, [pc, #8]	; (800ab28 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3708      	adds	r7, #8
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}
 800ab28:	2000b3f0 	.word	0x2000b3f0
 800ab2c:	0800c2d0 	.word	0x0800c2d0

0800ab30 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	6039      	str	r1, [r7, #0]
 800ab3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	221a      	movs	r2, #26
 800ab40:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ab42:	f000 f843 	bl	800abcc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ab46:	4b02      	ldr	r3, [pc, #8]	; (800ab50 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}
 800ab50:	200010e4 	.word	0x200010e4

0800ab54 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b082      	sub	sp, #8
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	6039      	str	r1, [r7, #0]
 800ab5e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ab60:	79fb      	ldrb	r3, [r7, #7]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d105      	bne.n	800ab72 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	4907      	ldr	r1, [pc, #28]	; (800ab88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab6a:	4808      	ldr	r0, [pc, #32]	; (800ab8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab6c:	f7fc ffc2 	bl	8007af4 <USBD_GetString>
 800ab70:	e004      	b.n	800ab7c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	4904      	ldr	r1, [pc, #16]	; (800ab88 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ab76:	4805      	ldr	r0, [pc, #20]	; (800ab8c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ab78:	f7fc ffbc 	bl	8007af4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab7c:	4b02      	ldr	r3, [pc, #8]	; (800ab88 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3708      	adds	r7, #8
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	2000b3f0 	.word	0x2000b3f0
 800ab8c:	0800c2e4 	.word	0x0800c2e4

0800ab90 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	4603      	mov	r3, r0
 800ab98:	6039      	str	r1, [r7, #0]
 800ab9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d105      	bne.n	800abae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aba2:	683a      	ldr	r2, [r7, #0]
 800aba4:	4907      	ldr	r1, [pc, #28]	; (800abc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aba6:	4808      	ldr	r0, [pc, #32]	; (800abc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aba8:	f7fc ffa4 	bl	8007af4 <USBD_GetString>
 800abac:	e004      	b.n	800abb8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800abae:	683a      	ldr	r2, [r7, #0]
 800abb0:	4904      	ldr	r1, [pc, #16]	; (800abc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800abb2:	4805      	ldr	r0, [pc, #20]	; (800abc8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800abb4:	f7fc ff9e 	bl	8007af4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abb8:	4b02      	ldr	r3, [pc, #8]	; (800abc4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	2000b3f0 	.word	0x2000b3f0
 800abc8:	0800c2f0 	.word	0x0800c2f0

0800abcc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800abd2:	4b0f      	ldr	r3, [pc, #60]	; (800ac10 <Get_SerialNum+0x44>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800abd8:	4b0e      	ldr	r3, [pc, #56]	; (800ac14 <Get_SerialNum+0x48>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800abde:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <Get_SerialNum+0x4c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4413      	add	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d009      	beq.n	800ac06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800abf2:	2208      	movs	r2, #8
 800abf4:	4909      	ldr	r1, [pc, #36]	; (800ac1c <Get_SerialNum+0x50>)
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 f814 	bl	800ac24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800abfc:	2204      	movs	r2, #4
 800abfe:	4908      	ldr	r1, [pc, #32]	; (800ac20 <Get_SerialNum+0x54>)
 800ac00:	68b8      	ldr	r0, [r7, #8]
 800ac02:	f000 f80f 	bl	800ac24 <IntToUnicode>
  }
}
 800ac06:	bf00      	nop
 800ac08:	3710      	adds	r7, #16
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	1fff7a10 	.word	0x1fff7a10
 800ac14:	1fff7a14 	.word	0x1fff7a14
 800ac18:	1fff7a18 	.word	0x1fff7a18
 800ac1c:	200010e6 	.word	0x200010e6
 800ac20:	200010f6 	.word	0x200010f6

0800ac24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b087      	sub	sp, #28
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ac36:	2300      	movs	r3, #0
 800ac38:	75fb      	strb	r3, [r7, #23]
 800ac3a:	e027      	b.n	800ac8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	0f1b      	lsrs	r3, r3, #28
 800ac40:	2b09      	cmp	r3, #9
 800ac42:	d80b      	bhi.n	800ac5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	0f1b      	lsrs	r3, r3, #28
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	4619      	mov	r1, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	440b      	add	r3, r1
 800ac54:	3230      	adds	r2, #48	; 0x30
 800ac56:	b2d2      	uxtb	r2, r2
 800ac58:	701a      	strb	r2, [r3, #0]
 800ac5a:	e00a      	b.n	800ac72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	0f1b      	lsrs	r3, r3, #28
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	4619      	mov	r1, r3
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	440b      	add	r3, r1
 800ac6c:	3237      	adds	r2, #55	; 0x37
 800ac6e:	b2d2      	uxtb	r2, r2
 800ac70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	011b      	lsls	r3, r3, #4
 800ac76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ac78:	7dfb      	ldrb	r3, [r7, #23]
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	4413      	add	r3, r2
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ac86:	7dfb      	ldrb	r3, [r7, #23]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	75fb      	strb	r3, [r7, #23]
 800ac8c:	7dfa      	ldrb	r2, [r7, #23]
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d3d3      	bcc.n	800ac3c <IntToUnicode+0x18>
  }
}
 800ac94:	bf00      	nop
 800ac96:	bf00      	nop
 800ac98:	371c      	adds	r7, #28
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
	...

0800aca4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08a      	sub	sp, #40	; 0x28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	2200      	movs	r2, #0
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	605a      	str	r2, [r3, #4]
 800acb6:	609a      	str	r2, [r3, #8]
 800acb8:	60da      	str	r2, [r3, #12]
 800acba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acc4:	d147      	bne.n	800ad56 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800acc6:	2300      	movs	r3, #0
 800acc8:	613b      	str	r3, [r7, #16]
 800acca:	4b25      	ldr	r3, [pc, #148]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800accc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acce:	4a24      	ldr	r2, [pc, #144]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800acd0:	f043 0301 	orr.w	r3, r3, #1
 800acd4:	6313      	str	r3, [r2, #48]	; 0x30
 800acd6:	4b22      	ldr	r3, [pc, #136]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800acd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	613b      	str	r3, [r7, #16]
 800ace0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ace2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ace6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ace8:	2300      	movs	r3, #0
 800acea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acec:	2300      	movs	r3, #0
 800acee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acf0:	f107 0314 	add.w	r3, r7, #20
 800acf4:	4619      	mov	r1, r3
 800acf6:	481b      	ldr	r0, [pc, #108]	; (800ad64 <HAL_PCD_MspInit+0xc0>)
 800acf8:	f7f6 fc0e 	bl	8001518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800acfc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ad00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad02:	2302      	movs	r3, #2
 800ad04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad06:	2300      	movs	r3, #0
 800ad08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad0a:	2303      	movs	r3, #3
 800ad0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad0e:	230a      	movs	r3, #10
 800ad10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad12:	f107 0314 	add.w	r3, r7, #20
 800ad16:	4619      	mov	r1, r3
 800ad18:	4812      	ldr	r0, [pc, #72]	; (800ad64 <HAL_PCD_MspInit+0xc0>)
 800ad1a:	f7f6 fbfd 	bl	8001518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad1e:	4b10      	ldr	r3, [pc, #64]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800ad20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad22:	4a0f      	ldr	r2, [pc, #60]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800ad24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad28:	6353      	str	r3, [r2, #52]	; 0x34
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	4b0c      	ldr	r3, [pc, #48]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800ad30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad32:	4a0b      	ldr	r2, [pc, #44]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800ad34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ad38:	6453      	str	r3, [r2, #68]	; 0x44
 800ad3a:	4b09      	ldr	r3, [pc, #36]	; (800ad60 <HAL_PCD_MspInit+0xbc>)
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800ad46:	2200      	movs	r2, #0
 800ad48:	2105      	movs	r1, #5
 800ad4a:	2043      	movs	r0, #67	; 0x43
 800ad4c:	f7f6 f83d 	bl	8000dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ad50:	2043      	movs	r0, #67	; 0x43
 800ad52:	f7f6 f856 	bl	8000e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ad56:	bf00      	nop
 800ad58:	3728      	adds	r7, #40	; 0x28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	40023800 	.word	0x40023800
 800ad64:	40020000 	.word	0x40020000

0800ad68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	4610      	mov	r0, r2
 800ad80:	f7fb fd59 	bl	8006836 <USBD_LL_SetupStage>
}
 800ad84:	bf00      	nop
 800ad86:	3708      	adds	r7, #8
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ad9e:	78fa      	ldrb	r2, [r7, #3]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	00db      	lsls	r3, r3, #3
 800ada6:	4413      	add	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	440b      	add	r3, r1
 800adac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	4619      	mov	r1, r3
 800adb6:	f7fb fd93 	bl	80068e0 <USBD_LL_DataOutStage>
}
 800adba:	bf00      	nop
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	460b      	mov	r3, r1
 800adcc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800add4:	78fa      	ldrb	r2, [r7, #3]
 800add6:	6879      	ldr	r1, [r7, #4]
 800add8:	4613      	mov	r3, r2
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	440b      	add	r3, r1
 800ade2:	334c      	adds	r3, #76	; 0x4c
 800ade4:	681a      	ldr	r2, [r3, #0]
 800ade6:	78fb      	ldrb	r3, [r7, #3]
 800ade8:	4619      	mov	r1, r3
 800adea:	f7fb fe2c 	bl	8006a46 <USBD_LL_DataInStage>
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fb ff60 	bl	8006cca <USBD_LL_SOF>
}
 800ae0a:	bf00      	nop
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d102      	bne.n	800ae2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ae26:	2300      	movs	r3, #0
 800ae28:	73fb      	strb	r3, [r7, #15]
 800ae2a:	e008      	b.n	800ae3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d102      	bne.n	800ae3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ae34:	2301      	movs	r3, #1
 800ae36:	73fb      	strb	r3, [r7, #15]
 800ae38:	e001      	b.n	800ae3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ae3a:	f7f5 fdb9 	bl	80009b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae44:	7bfa      	ldrb	r2, [r7, #15]
 800ae46:	4611      	mov	r1, r2
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fb ff00 	bl	8006c4e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fb fea8 	bl	8006baa <USBD_LL_Reset>
}
 800ae5a:	bf00      	nop
 800ae5c:	3710      	adds	r7, #16
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ae72:	4618      	mov	r0, r3
 800ae74:	f7fb fefb 	bl	8006c6e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	6812      	ldr	r2, [r2, #0]
 800ae86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ae8a:	f043 0301 	orr.w	r3, r3, #1
 800ae8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a1b      	ldr	r3, [r3, #32]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d005      	beq.n	800aea4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ae98:	4b04      	ldr	r3, [pc, #16]	; (800aeac <HAL_PCD_SuspendCallback+0x48>)
 800ae9a:	691b      	ldr	r3, [r3, #16]
 800ae9c:	4a03      	ldr	r2, [pc, #12]	; (800aeac <HAL_PCD_SuspendCallback+0x48>)
 800ae9e:	f043 0306 	orr.w	r3, r3, #6
 800aea2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	e000ed00 	.word	0xe000ed00

0800aeb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aebe:	4618      	mov	r0, r3
 800aec0:	f7fb feeb 	bl	8006c9a <USBD_LL_Resume>
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	460b      	mov	r3, r1
 800aed6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aede:	78fa      	ldrb	r2, [r7, #3]
 800aee0:	4611      	mov	r1, r2
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fb ff43 	bl	8006d6e <USBD_LL_IsoOUTIncomplete>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
 800aef8:	460b      	mov	r3, r1
 800aefa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af02:	78fa      	ldrb	r2, [r7, #3]
 800af04:	4611      	mov	r1, r2
 800af06:	4618      	mov	r0, r3
 800af08:	f7fb feff 	bl	8006d0a <USBD_LL_IsoINIncomplete>
}
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af22:	4618      	mov	r0, r3
 800af24:	f7fb ff55 	bl	8006dd2 <USBD_LL_DevConnected>
}
 800af28:	bf00      	nop
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af3e:	4618      	mov	r0, r3
 800af40:	f7fb ff52 	bl	8006de8 <USBD_LL_DevDisconnected>
}
 800af44:	bf00      	nop
 800af46:	3708      	adds	r7, #8
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}

0800af4c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d13c      	bne.n	800afd6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800af5c:	4a20      	ldr	r2, [pc, #128]	; (800afe0 <USBD_LL_Init+0x94>)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	4a1e      	ldr	r2, [pc, #120]	; (800afe0 <USBD_LL_Init+0x94>)
 800af68:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800af6c:	4b1c      	ldr	r3, [pc, #112]	; (800afe0 <USBD_LL_Init+0x94>)
 800af6e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800af72:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800af74:	4b1a      	ldr	r3, [pc, #104]	; (800afe0 <USBD_LL_Init+0x94>)
 800af76:	2204      	movs	r2, #4
 800af78:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800af7a:	4b19      	ldr	r3, [pc, #100]	; (800afe0 <USBD_LL_Init+0x94>)
 800af7c:	2202      	movs	r2, #2
 800af7e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800af80:	4b17      	ldr	r3, [pc, #92]	; (800afe0 <USBD_LL_Init+0x94>)
 800af82:	2200      	movs	r2, #0
 800af84:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800af86:	4b16      	ldr	r3, [pc, #88]	; (800afe0 <USBD_LL_Init+0x94>)
 800af88:	2202      	movs	r2, #2
 800af8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800af8c:	4b14      	ldr	r3, [pc, #80]	; (800afe0 <USBD_LL_Init+0x94>)
 800af8e:	2200      	movs	r2, #0
 800af90:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af92:	4b13      	ldr	r3, [pc, #76]	; (800afe0 <USBD_LL_Init+0x94>)
 800af94:	2200      	movs	r2, #0
 800af96:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af98:	4b11      	ldr	r3, [pc, #68]	; (800afe0 <USBD_LL_Init+0x94>)
 800af9a:	2200      	movs	r2, #0
 800af9c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800af9e:	4b10      	ldr	r3, [pc, #64]	; (800afe0 <USBD_LL_Init+0x94>)
 800afa0:	2201      	movs	r2, #1
 800afa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800afa4:	4b0e      	ldr	r3, [pc, #56]	; (800afe0 <USBD_LL_Init+0x94>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800afaa:	480d      	ldr	r0, [pc, #52]	; (800afe0 <USBD_LL_Init+0x94>)
 800afac:	f7f7 fa3e 	bl	800242c <HAL_PCD_Init>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800afb6:	f7f5 fcfb 	bl	80009b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800afba:	2180      	movs	r1, #128	; 0x80
 800afbc:	4808      	ldr	r0, [pc, #32]	; (800afe0 <USBD_LL_Init+0x94>)
 800afbe:	f7f8 fc96 	bl	80038ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800afc2:	2240      	movs	r2, #64	; 0x40
 800afc4:	2100      	movs	r1, #0
 800afc6:	4806      	ldr	r0, [pc, #24]	; (800afe0 <USBD_LL_Init+0x94>)
 800afc8:	f7f8 fc4a 	bl	8003860 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800afcc:	2280      	movs	r2, #128	; 0x80
 800afce:	2101      	movs	r1, #1
 800afd0:	4803      	ldr	r0, [pc, #12]	; (800afe0 <USBD_LL_Init+0x94>)
 800afd2:	f7f8 fc45 	bl	8003860 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800afd6:	2300      	movs	r3, #0
}
 800afd8:	4618      	mov	r0, r3
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	2000b5f0 	.word	0x2000b5f0

0800afe4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aff0:	2300      	movs	r3, #0
 800aff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800affa:	4618      	mov	r0, r3
 800affc:	f7f7 fb33 	bl	8002666 <HAL_PCD_Start>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b004:	7bfb      	ldrb	r3, [r7, #15]
 800b006:	4618      	mov	r0, r3
 800b008:	f000 f942 	bl	800b290 <USBD_Get_USB_Status>
 800b00c:	4603      	mov	r3, r0
 800b00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b010:	7bbb      	ldrb	r3, [r7, #14]
}
 800b012:	4618      	mov	r0, r3
 800b014:	3710      	adds	r7, #16
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b084      	sub	sp, #16
 800b01e:	af00      	add	r7, sp, #0
 800b020:	6078      	str	r0, [r7, #4]
 800b022:	4608      	mov	r0, r1
 800b024:	4611      	mov	r1, r2
 800b026:	461a      	mov	r2, r3
 800b028:	4603      	mov	r3, r0
 800b02a:	70fb      	strb	r3, [r7, #3]
 800b02c:	460b      	mov	r3, r1
 800b02e:	70bb      	strb	r3, [r7, #2]
 800b030:	4613      	mov	r3, r2
 800b032:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b034:	2300      	movs	r3, #0
 800b036:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b042:	78bb      	ldrb	r3, [r7, #2]
 800b044:	883a      	ldrh	r2, [r7, #0]
 800b046:	78f9      	ldrb	r1, [r7, #3]
 800b048:	f7f8 f804 	bl	8003054 <HAL_PCD_EP_Open>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	4618      	mov	r0, r3
 800b054:	f000 f91c 	bl	800b290 <USBD_Get_USB_Status>
 800b058:	4603      	mov	r3, r0
 800b05a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b05c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b084      	sub	sp, #16
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	460b      	mov	r3, r1
 800b070:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b080:	78fa      	ldrb	r2, [r7, #3]
 800b082:	4611      	mov	r1, r2
 800b084:	4618      	mov	r0, r3
 800b086:	f7f8 f84d 	bl	8003124 <HAL_PCD_EP_Close>
 800b08a:	4603      	mov	r3, r0
 800b08c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08e:	7bfb      	ldrb	r3, [r7, #15]
 800b090:	4618      	mov	r0, r3
 800b092:	f000 f8fd 	bl	800b290 <USBD_Get_USB_Status>
 800b096:	4603      	mov	r3, r0
 800b098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0be:	78fa      	ldrb	r2, [r7, #3]
 800b0c0:	4611      	mov	r1, r2
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7f8 f925 	bl	8003312 <HAL_PCD_EP_SetStall>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 f8de 	bl	800b290 <USBD_Get_USB_Status>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b0fc:	78fa      	ldrb	r2, [r7, #3]
 800b0fe:	4611      	mov	r1, r2
 800b100:	4618      	mov	r0, r3
 800b102:	f7f8 f96a 	bl	80033da <HAL_PCD_EP_ClrStall>
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 f8bf 	bl	800b290 <USBD_Get_USB_Status>
 800b112:	4603      	mov	r3, r0
 800b114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b116:	7bbb      	ldrb	r3, [r7, #14]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b132:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	da0b      	bge.n	800b154 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b13c:	78fb      	ldrb	r3, [r7, #3]
 800b13e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b142:	68f9      	ldr	r1, [r7, #12]
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	333e      	adds	r3, #62	; 0x3e
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	e00b      	b.n	800b16c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b154:	78fb      	ldrb	r3, [r7, #3]
 800b156:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b15a:	68f9      	ldr	r1, [r7, #12]
 800b15c:	4613      	mov	r3, r2
 800b15e:	00db      	lsls	r3, r3, #3
 800b160:	4413      	add	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b16a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b192:	78fa      	ldrb	r2, [r7, #3]
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f7f7 ff37 	bl	800300a <HAL_PCD_SetAddress>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f874 	bl	800b290 <USBD_Get_USB_Status>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b086      	sub	sp, #24
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	60f8      	str	r0, [r7, #12]
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	603b      	str	r3, [r7, #0]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b1d4:	7af9      	ldrb	r1, [r7, #11]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	f7f8 f850 	bl	800327e <HAL_PCD_EP_Transmit>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1e2:	7dfb      	ldrb	r3, [r7, #23]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f000 f853 	bl	800b290 <USBD_Get_USB_Status>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b1ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	60f8      	str	r0, [r7, #12]
 800b200:	607a      	str	r2, [r7, #4]
 800b202:	603b      	str	r3, [r7, #0]
 800b204:	460b      	mov	r3, r1
 800b206:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b216:	7af9      	ldrb	r1, [r7, #11]
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f7f7 ffcc 	bl	80031b8 <HAL_PCD_EP_Receive>
 800b220:	4603      	mov	r3, r0
 800b222:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	4618      	mov	r0, r3
 800b228:	f000 f832 	bl	800b290 <USBD_Get_USB_Status>
 800b22c:	4603      	mov	r3, r0
 800b22e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b230:	7dbb      	ldrb	r3, [r7, #22]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3718      	adds	r7, #24
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}

0800b23a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b23a:	b580      	push	{r7, lr}
 800b23c:	b082      	sub	sp, #8
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	460b      	mov	r3, r1
 800b244:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b24c:	78fa      	ldrb	r2, [r7, #3]
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f7f7 fffc 	bl	800324e <HAL_PCD_EP_GetRxCount>
 800b256:	4603      	mov	r3, r0
}
 800b258:	4618      	mov	r0, r3
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b268:	4b03      	ldr	r3, [pc, #12]	; (800b278 <USBD_static_malloc+0x18>)
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	370c      	adds	r7, #12
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr
 800b276:	bf00      	nop
 800b278:	2000bafc 	.word	0x2000bafc

0800b27c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]

}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b290:	b480      	push	{r7}
 800b292:	b085      	sub	sp, #20
 800b294:	af00      	add	r7, sp, #0
 800b296:	4603      	mov	r3, r0
 800b298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b29e:	79fb      	ldrb	r3, [r7, #7]
 800b2a0:	2b03      	cmp	r3, #3
 800b2a2:	d817      	bhi.n	800b2d4 <USBD_Get_USB_Status+0x44>
 800b2a4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ac <USBD_Get_USB_Status+0x1c>)
 800b2a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2aa:	bf00      	nop
 800b2ac:	0800b2bd 	.word	0x0800b2bd
 800b2b0:	0800b2c3 	.word	0x0800b2c3
 800b2b4:	0800b2c9 	.word	0x0800b2c9
 800b2b8:	0800b2cf 	.word	0x0800b2cf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c0:	e00b      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	73fb      	strb	r3, [r7, #15]
    break;
 800b2c6:	e008      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b2c8:	2301      	movs	r3, #1
 800b2ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b2cc:	e005      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d2:	e002      	b.n	800b2da <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b2d8:	bf00      	nop
  }
  return usb_status;
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	3714      	adds	r7, #20
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <arm_cfft_radix4_init_f32>:
 800b2e8:	b410      	push	{r4}
 800b2ea:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800b2ee:	4c29      	ldr	r4, [pc, #164]	; (800b394 <arm_cfft_radix4_init_f32+0xac>)
 800b2f0:	7082      	strb	r2, [r0, #2]
 800b2f2:	70c3      	strb	r3, [r0, #3]
 800b2f4:	8001      	strh	r1, [r0, #0]
 800b2f6:	6044      	str	r4, [r0, #4]
 800b2f8:	d03f      	beq.n	800b37a <arm_cfft_radix4_init_f32+0x92>
 800b2fa:	d80e      	bhi.n	800b31a <arm_cfft_radix4_init_f32+0x32>
 800b2fc:	2910      	cmp	r1, #16
 800b2fe:	d02f      	beq.n	800b360 <arm_cfft_radix4_init_f32+0x78>
 800b300:	2940      	cmp	r1, #64	; 0x40
 800b302:	d11c      	bne.n	800b33e <arm_cfft_radix4_init_f32+0x56>
 800b304:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 800b308:	4b23      	ldr	r3, [pc, #140]	; (800b398 <arm_cfft_radix4_init_f32+0xb0>)
 800b30a:	8181      	strh	r1, [r0, #12]
 800b30c:	81c1      	strh	r1, [r0, #14]
 800b30e:	6102      	str	r2, [r0, #16]
 800b310:	6083      	str	r3, [r0, #8]
 800b312:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b316:	2000      	movs	r0, #0
 800b318:	4770      	bx	lr
 800b31a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b31e:	d013      	beq.n	800b348 <arm_cfft_radix4_init_f32+0x60>
 800b320:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800b324:	d10b      	bne.n	800b33e <arm_cfft_radix4_init_f32+0x56>
 800b326:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800b32a:	6103      	str	r3, [r0, #16]
 800b32c:	4a1b      	ldr	r2, [pc, #108]	; (800b39c <arm_cfft_radix4_init_f32+0xb4>)
 800b32e:	6082      	str	r2, [r0, #8]
 800b330:	2301      	movs	r3, #1
 800b332:	8183      	strh	r3, [r0, #12]
 800b334:	81c3      	strh	r3, [r0, #14]
 800b336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b33a:	2000      	movs	r0, #0
 800b33c:	4770      	bx	lr
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295
 800b342:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 800b34c:	6103      	str	r3, [r0, #16]
 800b34e:	4a14      	ldr	r2, [pc, #80]	; (800b3a0 <arm_cfft_radix4_init_f32+0xb8>)
 800b350:	6082      	str	r2, [r0, #8]
 800b352:	2304      	movs	r3, #4
 800b354:	8183      	strh	r3, [r0, #12]
 800b356:	81c3      	strh	r3, [r0, #14]
 800b358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b35c:	2000      	movs	r0, #0
 800b35e:	4770      	bx	lr
 800b360:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 800b364:	6103      	str	r3, [r0, #16]
 800b366:	4a0f      	ldr	r2, [pc, #60]	; (800b3a4 <arm_cfft_radix4_init_f32+0xbc>)
 800b368:	6082      	str	r2, [r0, #8]
 800b36a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b36e:	8183      	strh	r3, [r0, #12]
 800b370:	81c3      	strh	r3, [r0, #14]
 800b372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b376:	2000      	movs	r0, #0
 800b378:	4770      	bx	lr
 800b37a:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 800b37e:	6103      	str	r3, [r0, #16]
 800b380:	4a09      	ldr	r2, [pc, #36]	; (800b3a8 <arm_cfft_radix4_init_f32+0xc0>)
 800b382:	6082      	str	r2, [r0, #8]
 800b384:	2310      	movs	r3, #16
 800b386:	8183      	strh	r3, [r0, #12]
 800b388:	81c3      	strh	r3, [r0, #14]
 800b38a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b38e:	2000      	movs	r0, #0
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	0800cb18 	.word	0x0800cb18
 800b398:	0800c396 	.word	0x0800c396
 800b39c:	0800c318 	.word	0x0800c318
 800b3a0:	0800c31e 	.word	0x0800c31e
 800b3a4:	0800c516 	.word	0x0800c516
 800b3a8:	0800c336 	.word	0x0800c336

0800b3ac <arm_radix4_butterfly_f32>:
 800b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b0:	ed2d 8b06 	vpush	{d8-d10}
 800b3b4:	468a      	mov	sl, r1
 800b3b6:	0889      	lsrs	r1, r1, #2
 800b3b8:	b08d      	sub	sp, #52	; 0x34
 800b3ba:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800b3be:	eb00 040c 	add.w	r4, r0, ip
 800b3c2:	460d      	mov	r5, r1
 800b3c4:	461f      	mov	r7, r3
 800b3c6:	4691      	mov	r9, r2
 800b3c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b3ca:	eb04 020c 	add.w	r2, r4, ip
 800b3ce:	4606      	mov	r6, r0
 800b3d0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b3d4:	9700      	str	r7, [sp, #0]
 800b3d6:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 800b3da:	9009      	str	r0, [sp, #36]	; 0x24
 800b3dc:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 800b3e0:	f10c 0004 	add.w	r0, ip, #4
 800b3e4:	9701      	str	r7, [sp, #4]
 800b3e6:	9103      	str	r1, [sp, #12]
 800b3e8:	4430      	add	r0, r6
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b3f0:	1d37      	adds	r7, r6, #4
 800b3f2:	9e00      	ldr	r6, [sp, #0]
 800b3f4:	46ab      	mov	fp, r5
 800b3f6:	00f5      	lsls	r5, r6, #3
 800b3f8:	9502      	str	r5, [sp, #8]
 800b3fa:	f8cd b010 	str.w	fp, [sp, #16]
 800b3fe:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b402:	f8cd a008 	str.w	sl, [sp, #8]
 800b406:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b40a:	ea4f 1806 	mov.w	r8, r6, lsl #4
 800b40e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800b412:	464e      	mov	r6, r9
 800b414:	464d      	mov	r5, r9
 800b416:	edd1 4a01 	vldr	s9, [r1, #4]
 800b41a:	ed10 4a01 	vldr	s8, [r0, #-4]
 800b41e:	ed17 6a01 	vldr	s12, [r7, #-4]
 800b422:	edd2 6a00 	vldr	s13, [r2]
 800b426:	ed94 7a01 	vldr	s14, [r4, #4]
 800b42a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b42e:	ed93 5a00 	vldr	s10, [r3]
 800b432:	edd2 5a01 	vldr	s11, [r2, #4]
 800b436:	ed99 3a00 	vldr	s6, [r9]
 800b43a:	edd9 3a01 	vldr	s7, [r9, #4]
 800b43e:	ee36 2a26 	vadd.f32	s4, s12, s13
 800b442:	ee74 2a05 	vadd.f32	s5, s8, s10
 800b446:	ee34 1aa5 	vadd.f32	s2, s9, s11
 800b44a:	ee77 1a27 	vadd.f32	s3, s14, s15
 800b44e:	ee32 0a22 	vadd.f32	s0, s4, s5
 800b452:	ee71 0a21 	vadd.f32	s1, s2, s3
 800b456:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b45a:	ee34 5a45 	vsub.f32	s10, s8, s10
 800b45e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 800b462:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b466:	ed07 0a01 	vstr	s0, [r7, #-4]
 800b46a:	edc1 0a01 	vstr	s1, [r1, #4]
 800b46e:	ed95 4a00 	vldr	s8, [r5]
 800b472:	edd6 6a00 	vldr	s13, [r6]
 800b476:	edd6 7a01 	vldr	s15, [r6, #4]
 800b47a:	ee72 4a62 	vsub.f32	s9, s4, s5
 800b47e:	ee71 1a61 	vsub.f32	s3, s2, s3
 800b482:	ee75 2ac5 	vsub.f32	s5, s11, s10
 800b486:	ed95 1a01 	vldr	s2, [r5, #4]
 800b48a:	ee36 2a07 	vadd.f32	s4, s12, s14
 800b48e:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b492:	ee35 6a25 	vadd.f32	s12, s10, s11
 800b496:	ee62 0a04 	vmul.f32	s1, s4, s8
 800b49a:	ee23 5a21 	vmul.f32	s10, s6, s3
 800b49e:	ee22 2a01 	vmul.f32	s4, s4, s2
 800b4a2:	ee22 4a84 	vmul.f32	s8, s5, s8
 800b4a6:	ee22 1a81 	vmul.f32	s2, s5, s2
 800b4aa:	ee67 5a26 	vmul.f32	s11, s14, s13
 800b4ae:	ee63 2a24 	vmul.f32	s5, s6, s9
 800b4b2:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b4b6:	ee63 4aa4 	vmul.f32	s9, s7, s9
 800b4ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 800b4be:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800b4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4c6:	ee31 3a20 	vadd.f32	s6, s2, s1
 800b4ca:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b4ce:	ee71 3aa2 	vadd.f32	s7, s3, s5
 800b4d2:	ee35 5a64 	vsub.f32	s10, s10, s9
 800b4d6:	ee36 7a25 	vadd.f32	s14, s12, s11
 800b4da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800b4de:	3108      	adds	r1, #8
 800b4e0:	4551      	cmp	r1, sl
 800b4e2:	ed40 3a01 	vstr	s7, [r0, #-4]
 800b4e6:	f107 0708 	add.w	r7, r7, #8
 800b4ea:	ed84 5a01 	vstr	s10, [r4, #4]
 800b4ee:	44c1      	add	r9, r8
 800b4f0:	ed82 3a00 	vstr	s6, [r2]
 800b4f4:	ed82 4a01 	vstr	s8, [r2, #4]
 800b4f8:	445d      	add	r5, fp
 800b4fa:	ed83 7a00 	vstr	s14, [r3]
 800b4fe:	edc3 7a01 	vstr	s15, [r3, #4]
 800b502:	4476      	add	r6, lr
 800b504:	f100 0008 	add.w	r0, r0, #8
 800b508:	f104 0408 	add.w	r4, r4, #8
 800b50c:	f102 0208 	add.w	r2, r2, #8
 800b510:	f103 0308 	add.w	r3, r3, #8
 800b514:	f47f af7f 	bne.w	800b416 <arm_radix4_butterfly_f32+0x6a>
 800b518:	9b00      	ldr	r3, [sp, #0]
 800b51a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b51e:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b522:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b526:	920b      	str	r2, [sp, #44]	; 0x2c
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	2a04      	cmp	r2, #4
 800b52e:	9306      	str	r3, [sp, #24]
 800b530:	f240 80ba 	bls.w	800b6a8 <arm_radix4_butterfly_f32+0x2fc>
 800b534:	9806      	ldr	r0, [sp, #24]
 800b536:	9207      	str	r2, [sp, #28]
 800b538:	ea4f 039b 	mov.w	r3, fp, lsr #2
 800b53c:	4619      	mov	r1, r3
 800b53e:	9308      	str	r3, [sp, #32]
 800b540:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800b544:	1e4a      	subs	r2, r1, #1
 800b546:	00db      	lsls	r3, r3, #3
 800b548:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b54a:	9205      	str	r2, [sp, #20]
 800b54c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	010a      	lsls	r2, r1, #4
 800b552:	0103      	lsls	r3, r0, #4
 800b554:	9204      	str	r2, [sp, #16]
 800b556:	9302      	str	r3, [sp, #8]
 800b558:	00c2      	lsls	r2, r0, #3
 800b55a:	2300      	movs	r3, #0
 800b55c:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 800b560:	9201      	str	r2, [sp, #4]
 800b562:	46b8      	mov	r8, r7
 800b564:	46be      	mov	lr, r7
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	9b04      	ldr	r3, [sp, #16]
 800b56a:	ed97 1a00 	vldr	s2, [r7]
 800b56e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b572:	ed9e 2a00 	vldr	s4, [lr]
 800b576:	edde 2a01 	vldr	s5, [lr, #4]
 800b57a:	ed98 3a00 	vldr	s6, [r8]
 800b57e:	edd8 3a01 	vldr	s7, [r8, #4]
 800b582:	9d00      	ldr	r5, [sp, #0]
 800b584:	18f1      	adds	r1, r6, r3
 800b586:	eb09 0203 	add.w	r2, r9, r3
 800b58a:	1d34      	adds	r4, r6, #4
 800b58c:	464b      	mov	r3, r9
 800b58e:	4630      	mov	r0, r6
 800b590:	ed90 4a01 	vldr	s8, [r0, #4]
 800b594:	ed54 5a01 	vldr	s11, [r4, #-4]
 800b598:	ed91 7a00 	vldr	s14, [r1]
 800b59c:	edd2 7a00 	vldr	s15, [r2]
 800b5a0:	edd3 4a01 	vldr	s9, [r3, #4]
 800b5a4:	ed92 5a01 	vldr	s10, [r2, #4]
 800b5a8:	ed93 6a00 	vldr	s12, [r3]
 800b5ac:	edd1 6a01 	vldr	s13, [r1, #4]
 800b5b0:	ee35 0a87 	vadd.f32	s0, s11, s14
 800b5b4:	ee34 8a26 	vadd.f32	s16, s8, s13
 800b5b8:	ee76 8a27 	vadd.f32	s17, s12, s15
 800b5bc:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b5c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b5c4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b5c8:	ee74 7ac5 	vsub.f32	s15, s9, s10
 800b5cc:	ee74 0a85 	vadd.f32	s1, s9, s10
 800b5d0:	ee35 7ae7 	vsub.f32	s14, s11, s15
 800b5d4:	ee78 4a60 	vsub.f32	s9, s16, s1
 800b5d8:	ee35 5aa7 	vadd.f32	s10, s11, s15
 800b5dc:	ee30 4a68 	vsub.f32	s8, s0, s17
 800b5e0:	ee76 5ac6 	vsub.f32	s11, s13, s12
 800b5e4:	ee76 7a26 	vadd.f32	s15, s12, s13
 800b5e8:	ee22 aa04 	vmul.f32	s20, s4, s8
 800b5ec:	ee62 aaa4 	vmul.f32	s21, s5, s9
 800b5f0:	ee22 4a84 	vmul.f32	s8, s5, s8
 800b5f4:	ee21 9a05 	vmul.f32	s18, s2, s10
 800b5f8:	ee61 9aa5 	vmul.f32	s19, s3, s11
 800b5fc:	ee63 6a07 	vmul.f32	s13, s6, s14
 800b600:	ee23 6aa7 	vmul.f32	s12, s7, s15
 800b604:	ee62 4a24 	vmul.f32	s9, s4, s9
 800b608:	ee21 5a85 	vmul.f32	s10, s3, s10
 800b60c:	ee61 5a25 	vmul.f32	s11, s2, s11
 800b610:	ee23 7a87 	vmul.f32	s14, s7, s14
 800b614:	ee63 7a27 	vmul.f32	s15, s6, s15
 800b618:	ee78 0a20 	vadd.f32	s1, s16, s1
 800b61c:	ee74 4ac4 	vsub.f32	s9, s9, s8
 800b620:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b624:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 800b628:	ee39 4a89 	vadd.f32	s8, s19, s18
 800b62c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b630:	ee76 6a26 	vadd.f32	s13, s12, s13
 800b634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b638:	445d      	add	r5, fp
 800b63a:	45aa      	cmp	sl, r5
 800b63c:	ed04 0a01 	vstr	s0, [r4, #-4]
 800b640:	edc0 0a01 	vstr	s1, [r0, #4]
 800b644:	4464      	add	r4, ip
 800b646:	ed83 8a00 	vstr	s16, [r3]
 800b64a:	edc3 4a01 	vstr	s9, [r3, #4]
 800b64e:	4460      	add	r0, ip
 800b650:	ed81 4a00 	vstr	s8, [r1]
 800b654:	edc1 5a01 	vstr	s11, [r1, #4]
 800b658:	4463      	add	r3, ip
 800b65a:	edc2 6a00 	vstr	s13, [r2]
 800b65e:	edc2 7a01 	vstr	s15, [r2, #4]
 800b662:	4461      	add	r1, ip
 800b664:	4462      	add	r2, ip
 800b666:	d893      	bhi.n	800b590 <arm_radix4_butterfly_f32+0x1e4>
 800b668:	9a01      	ldr	r2, [sp, #4]
 800b66a:	9b00      	ldr	r3, [sp, #0]
 800b66c:	4417      	add	r7, r2
 800b66e:	9a02      	ldr	r2, [sp, #8]
 800b670:	4496      	add	lr, r2
 800b672:	9a03      	ldr	r2, [sp, #12]
 800b674:	4490      	add	r8, r2
 800b676:	9a05      	ldr	r2, [sp, #20]
 800b678:	3301      	adds	r3, #1
 800b67a:	4293      	cmp	r3, r2
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	f106 0608 	add.w	r6, r6, #8
 800b682:	f109 0908 	add.w	r9, r9, #8
 800b686:	f67f af6f 	bls.w	800b568 <arm_radix4_butterfly_f32+0x1bc>
 800b68a:	9b06      	ldr	r3, [sp, #24]
 800b68c:	9a07      	ldr	r2, [sp, #28]
 800b68e:	f8dd b020 	ldr.w	fp, [sp, #32]
 800b692:	0892      	lsrs	r2, r2, #2
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	b29b      	uxth	r3, r3
 800b698:	2a04      	cmp	r2, #4
 800b69a:	9207      	str	r2, [sp, #28]
 800b69c:	9306      	str	r3, [sp, #24]
 800b69e:	d903      	bls.n	800b6a8 <arm_radix4_butterfly_f32+0x2fc>
 800b6a0:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	e747      	b.n	800b538 <arm_radix4_butterfly_f32+0x18c>
 800b6a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6ac:	3320      	adds	r3, #32
 800b6ae:	ed53 4a04 	vldr	s9, [r3, #-16]
 800b6b2:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 800b6b6:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800b6ba:	ed53 5a01 	vldr	s11, [r3, #-4]
 800b6be:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 800b6c2:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 800b6c6:	ed53 7a02 	vldr	s15, [r3, #-8]
 800b6ca:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b6ce:	ee34 3a24 	vadd.f32	s6, s8, s9
 800b6d2:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b6d6:	ee34 4a64 	vsub.f32	s8, s8, s9
 800b6da:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b6de:	ee75 4a65 	vsub.f32	s9, s10, s11
 800b6e2:	ee35 6a25 	vadd.f32	s12, s10, s11
 800b6e6:	ee76 5a87 	vadd.f32	s11, s13, s14
 800b6ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b6ee:	ee73 2a23 	vadd.f32	s5, s6, s7
 800b6f2:	ee35 5a86 	vadd.f32	s10, s11, s12
 800b6f6:	ee73 3a63 	vsub.f32	s7, s6, s7
 800b6fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b6fe:	ee34 3a24 	vadd.f32	s6, s8, s9
 800b702:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800b706:	ee74 4a64 	vsub.f32	s9, s8, s9
 800b70a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b70e:	3a01      	subs	r2, #1
 800b710:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 800b714:	ed43 3a06 	vstr	s7, [r3, #-24]	; 0xffffffe8
 800b718:	ed03 3a04 	vstr	s6, [r3, #-16]
 800b71c:	ed43 4a02 	vstr	s9, [r3, #-8]
 800b720:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
 800b724:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 800b728:	ed43 6a03 	vstr	s13, [r3, #-12]
 800b72c:	ed43 7a01 	vstr	s15, [r3, #-4]
 800b730:	f103 0320 	add.w	r3, r3, #32
 800b734:	d1bb      	bne.n	800b6ae <arm_radix4_butterfly_f32+0x302>
 800b736:	b00d      	add	sp, #52	; 0x34
 800b738:	ecbd 8b06 	vpop	{d8-d10}
 800b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b740 <arm_radix4_butterfly_inverse_f32>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	ed2d 8b08 	vpush	{d8-d11}
 800b748:	b08d      	sub	sp, #52	; 0x34
 800b74a:	461f      	mov	r7, r3
 800b74c:	9700      	str	r7, [sp, #0]
 800b74e:	468a      	mov	sl, r1
 800b750:	9c00      	ldr	r4, [sp, #0]
 800b752:	9009      	str	r0, [sp, #36]	; 0x24
 800b754:	0889      	lsrs	r1, r1, #2
 800b756:	460d      	mov	r5, r1
 800b758:	9103      	str	r1, [sp, #12]
 800b75a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800b75e:	46ab      	mov	fp, r5
 800b760:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 800b764:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 800b768:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800b76c:	0125      	lsls	r5, r4, #4
 800b76e:	00e4      	lsls	r4, r4, #3
 800b770:	9402      	str	r4, [sp, #8]
 800b772:	9501      	str	r5, [sp, #4]
 800b774:	4606      	mov	r6, r0
 800b776:	4691      	mov	r9, r2
 800b778:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 800b77c:	f10c 0004 	add.w	r0, ip, #4
 800b780:	f8cd b010 	str.w	fp, [sp, #16]
 800b784:	f8dd b008 	ldr.w	fp, [sp, #8]
 800b788:	f8cd a008 	str.w	sl, [sp, #8]
 800b78c:	f8dd a004 	ldr.w	sl, [sp, #4]
 800b790:	920a      	str	r2, [sp, #40]	; 0x28
 800b792:	4430      	add	r0, r6
 800b794:	4632      	mov	r2, r6
 800b796:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b79a:	4647      	mov	r7, r8
 800b79c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800b7a0:	3604      	adds	r6, #4
 800b7a2:	464d      	mov	r5, r9
 800b7a4:	464c      	mov	r4, r9
 800b7a6:	edd2 4a01 	vldr	s9, [r2, #4]
 800b7aa:	ed10 4a01 	vldr	s8, [r0, #-4]
 800b7ae:	ed16 6a01 	vldr	s12, [r6, #-4]
 800b7b2:	edd1 6a00 	vldr	s13, [r1]
 800b7b6:	ed97 7a01 	vldr	s14, [r7, #4]
 800b7ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800b7be:	edd3 5a00 	vldr	s11, [r3]
 800b7c2:	ed91 5a01 	vldr	s10, [r1, #4]
 800b7c6:	edd9 3a01 	vldr	s7, [r9, #4]
 800b7ca:	ed99 3a00 	vldr	s6, [r9]
 800b7ce:	ee36 2a26 	vadd.f32	s4, s12, s13
 800b7d2:	ee74 2a25 	vadd.f32	s5, s8, s11
 800b7d6:	ee34 1a85 	vadd.f32	s2, s9, s10
 800b7da:	ee77 1a27 	vadd.f32	s3, s14, s15
 800b7de:	ee32 8a22 	vadd.f32	s16, s4, s5
 800b7e2:	ee71 0a21 	vadd.f32	s1, s2, s3
 800b7e6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800b7ea:	ee74 5a65 	vsub.f32	s11, s8, s11
 800b7ee:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800b7f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b7f6:	ed06 8a01 	vstr	s16, [r6, #-4]
 800b7fa:	edc2 0a01 	vstr	s1, [r2, #4]
 800b7fe:	ed94 4a00 	vldr	s8, [r4]
 800b802:	edd5 6a00 	vldr	s13, [r5]
 800b806:	edd5 7a01 	vldr	s15, [r5, #4]
 800b80a:	ee72 4a62 	vsub.f32	s9, s4, s5
 800b80e:	ee71 1a61 	vsub.f32	s3, s2, s3
 800b812:	ee75 2a85 	vadd.f32	s5, s11, s10
 800b816:	ed94 1a01 	vldr	s2, [r4, #4]
 800b81a:	ee36 2a47 	vsub.f32	s4, s12, s14
 800b81e:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b822:	ee35 6a65 	vsub.f32	s12, s10, s11
 800b826:	ee62 0a04 	vmul.f32	s1, s4, s8
 800b82a:	ee23 5aa4 	vmul.f32	s10, s7, s9
 800b82e:	ee22 4a84 	vmul.f32	s8, s5, s8
 800b832:	ee22 2a01 	vmul.f32	s4, s4, s2
 800b836:	ee67 5a26 	vmul.f32	s11, s14, s13
 800b83a:	ee22 1a81 	vmul.f32	s2, s5, s2
 800b83e:	ee66 6a26 	vmul.f32	s13, s12, s13
 800b842:	ee63 2a24 	vmul.f32	s5, s6, s9
 800b846:	ee26 6a27 	vmul.f32	s12, s12, s15
 800b84a:	ee23 3a21 	vmul.f32	s6, s6, s3
 800b84e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b852:	ee63 1aa1 	vmul.f32	s3, s7, s3
 800b856:	ee72 4a04 	vadd.f32	s9, s4, s8
 800b85a:	ee70 3ac1 	vsub.f32	s7, s1, s2
 800b85e:	ee32 4ae1 	vsub.f32	s8, s5, s3
 800b862:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b866:	ee35 7ac6 	vsub.f32	s14, s11, s12
 800b86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b86e:	3208      	adds	r2, #8
 800b870:	4542      	cmp	r2, r8
 800b872:	ed00 4a01 	vstr	s8, [r0, #-4]
 800b876:	f106 0608 	add.w	r6, r6, #8
 800b87a:	ed87 5a01 	vstr	s10, [r7, #4]
 800b87e:	44d1      	add	r9, sl
 800b880:	edc1 3a00 	vstr	s7, [r1]
 800b884:	edc1 4a01 	vstr	s9, [r1, #4]
 800b888:	445c      	add	r4, fp
 800b88a:	ed83 7a00 	vstr	s14, [r3]
 800b88e:	edc3 7a01 	vstr	s15, [r3, #4]
 800b892:	4475      	add	r5, lr
 800b894:	f100 0008 	add.w	r0, r0, #8
 800b898:	f107 0708 	add.w	r7, r7, #8
 800b89c:	f101 0108 	add.w	r1, r1, #8
 800b8a0:	f103 0308 	add.w	r3, r3, #8
 800b8a4:	f47f af7f 	bne.w	800b7a6 <arm_radix4_butterfly_inverse_f32+0x66>
 800b8a8:	9b00      	ldr	r3, [sp, #0]
 800b8aa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800b8ae:	f8dd b010 	ldr.w	fp, [sp, #16]
 800b8b2:	f8dd a008 	ldr.w	sl, [sp, #8]
 800b8b6:	920b      	str	r2, [sp, #44]	; 0x2c
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	2a04      	cmp	r2, #4
 800b8be:	9306      	str	r3, [sp, #24]
 800b8c0:	f240 80ba 	bls.w	800ba38 <arm_radix4_butterfly_inverse_f32+0x2f8>
 800b8c4:	9806      	ldr	r0, [sp, #24]
 800b8c6:	9207      	str	r2, [sp, #28]
 800b8c8:	ea4f 039b 	mov.w	r3, fp, lsr #2
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	9308      	str	r3, [sp, #32]
 800b8d0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 800b8d4:	1e4a      	subs	r2, r1, #1
 800b8d6:	00db      	lsls	r3, r3, #3
 800b8d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b8da:	9205      	str	r2, [sp, #20]
 800b8dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800b8de:	9303      	str	r3, [sp, #12]
 800b8e0:	010a      	lsls	r2, r1, #4
 800b8e2:	0103      	lsls	r3, r0, #4
 800b8e4:	9204      	str	r2, [sp, #16]
 800b8e6:	9302      	str	r3, [sp, #8]
 800b8e8:	00c2      	lsls	r2, r0, #3
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 800b8f0:	9201      	str	r2, [sp, #4]
 800b8f2:	46b8      	mov	r8, r7
 800b8f4:	46be      	mov	lr, r7
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	9b04      	ldr	r3, [sp, #16]
 800b8fa:	ed97 1a00 	vldr	s2, [r7]
 800b8fe:	edd7 1a01 	vldr	s3, [r7, #4]
 800b902:	ed9e 2a00 	vldr	s4, [lr]
 800b906:	edde 2a01 	vldr	s5, [lr, #4]
 800b90a:	ed98 3a00 	vldr	s6, [r8]
 800b90e:	edd8 3a01 	vldr	s7, [r8, #4]
 800b912:	9d00      	ldr	r5, [sp, #0]
 800b914:	18f1      	adds	r1, r6, r3
 800b916:	eb09 0203 	add.w	r2, r9, r3
 800b91a:	1d34      	adds	r4, r6, #4
 800b91c:	464b      	mov	r3, r9
 800b91e:	4630      	mov	r0, r6
 800b920:	ed90 4a01 	vldr	s8, [r0, #4]
 800b924:	ed14 6a01 	vldr	s12, [r4, #-4]
 800b928:	ed91 7a00 	vldr	s14, [r1]
 800b92c:	edd2 7a00 	vldr	s15, [r2]
 800b930:	ed93 5a01 	vldr	s10, [r3, #4]
 800b934:	edd1 4a01 	vldr	s9, [r1, #4]
 800b938:	edd2 5a01 	vldr	s11, [r2, #4]
 800b93c:	edd3 6a00 	vldr	s13, [r3]
 800b940:	ee76 0a07 	vadd.f32	s1, s12, s14
 800b944:	ee36 8aa7 	vadd.f32	s16, s13, s15
 800b948:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b94c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800b950:	ee74 8a24 	vadd.f32	s17, s8, s9
 800b954:	ee74 7a64 	vsub.f32	s15, s8, s9
 800b958:	ee35 7a65 	vsub.f32	s14, s10, s11
 800b95c:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b960:	ee70 4ac8 	vsub.f32	s9, s1, s16
 800b964:	ee76 5a47 	vsub.f32	s11, s12, s14
 800b968:	ee38 5ac4 	vsub.f32	s10, s17, s8
 800b96c:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b970:	ee36 6aa7 	vadd.f32	s12, s13, s15
 800b974:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b978:	ee22 ba24 	vmul.f32	s22, s4, s9
 800b97c:	ee62 aa85 	vmul.f32	s21, s5, s10
 800b980:	ee62 4aa4 	vmul.f32	s9, s5, s9
 800b984:	ee21 aa25 	vmul.f32	s20, s2, s11
 800b988:	ee61 9a86 	vmul.f32	s19, s3, s12
 800b98c:	ee23 9a07 	vmul.f32	s18, s6, s14
 800b990:	ee63 6aa7 	vmul.f32	s13, s7, s15
 800b994:	ee22 5a05 	vmul.f32	s10, s4, s10
 800b998:	ee61 5aa5 	vmul.f32	s11, s3, s11
 800b99c:	ee21 6a06 	vmul.f32	s12, s2, s12
 800b9a0:	ee23 7a87 	vmul.f32	s14, s7, s14
 800b9a4:	ee63 7a27 	vmul.f32	s15, s6, s15
 800b9a8:	ee70 0a88 	vadd.f32	s1, s1, s16
 800b9ac:	ee34 5a85 	vadd.f32	s10, s9, s10
 800b9b0:	ee38 4a84 	vadd.f32	s8, s17, s8
 800b9b4:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 800b9b8:	ee7a 4a69 	vsub.f32	s9, s20, s19
 800b9bc:	ee35 6a86 	vadd.f32	s12, s11, s12
 800b9c0:	ee79 6a66 	vsub.f32	s13, s18, s13
 800b9c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9c8:	445d      	add	r5, fp
 800b9ca:	45aa      	cmp	sl, r5
 800b9cc:	ed44 0a01 	vstr	s1, [r4, #-4]
 800b9d0:	ed80 4a01 	vstr	s8, [r0, #4]
 800b9d4:	4464      	add	r4, ip
 800b9d6:	ed83 8a00 	vstr	s16, [r3]
 800b9da:	ed83 5a01 	vstr	s10, [r3, #4]
 800b9de:	4460      	add	r0, ip
 800b9e0:	edc1 4a00 	vstr	s9, [r1]
 800b9e4:	ed81 6a01 	vstr	s12, [r1, #4]
 800b9e8:	4463      	add	r3, ip
 800b9ea:	edc2 6a00 	vstr	s13, [r2]
 800b9ee:	edc2 7a01 	vstr	s15, [r2, #4]
 800b9f2:	4461      	add	r1, ip
 800b9f4:	4462      	add	r2, ip
 800b9f6:	d893      	bhi.n	800b920 <arm_radix4_butterfly_inverse_f32+0x1e0>
 800b9f8:	9a01      	ldr	r2, [sp, #4]
 800b9fa:	9b00      	ldr	r3, [sp, #0]
 800b9fc:	4417      	add	r7, r2
 800b9fe:	9a02      	ldr	r2, [sp, #8]
 800ba00:	4496      	add	lr, r2
 800ba02:	9a03      	ldr	r2, [sp, #12]
 800ba04:	4490      	add	r8, r2
 800ba06:	9a05      	ldr	r2, [sp, #20]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	f106 0608 	add.w	r6, r6, #8
 800ba12:	f109 0908 	add.w	r9, r9, #8
 800ba16:	f67f af6f 	bls.w	800b8f8 <arm_radix4_butterfly_inverse_f32+0x1b8>
 800ba1a:	9b06      	ldr	r3, [sp, #24]
 800ba1c:	9a07      	ldr	r2, [sp, #28]
 800ba1e:	f8dd b020 	ldr.w	fp, [sp, #32]
 800ba22:	0892      	lsrs	r2, r2, #2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	2a04      	cmp	r2, #4
 800ba2a:	9207      	str	r2, [sp, #28]
 800ba2c:	9306      	str	r3, [sp, #24]
 800ba2e:	d903      	bls.n	800ba38 <arm_radix4_butterfly_inverse_f32+0x2f8>
 800ba30:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 800ba34:	4618      	mov	r0, r3
 800ba36:	e747      	b.n	800b8c8 <arm_radix4_butterfly_inverse_f32+0x188>
 800ba38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba3a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba3c:	3320      	adds	r3, #32
 800ba3e:	ed53 4a04 	vldr	s9, [r3, #-16]
 800ba42:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 800ba46:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800ba4a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800ba4e:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 800ba52:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 800ba56:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ba5a:	ed13 7a03 	vldr	s14, [r3, #-12]
 800ba5e:	ee34 3a24 	vadd.f32	s6, s8, s9
 800ba62:	ee76 3a27 	vadd.f32	s7, s12, s15
 800ba66:	ee34 4a64 	vsub.f32	s8, s8, s9
 800ba6a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800ba6e:	ee75 4a65 	vsub.f32	s9, s10, s11
 800ba72:	ee35 6a25 	vadd.f32	s12, s10, s11
 800ba76:	ee76 5a87 	vadd.f32	s11, s13, s14
 800ba7a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ba7e:	ee73 2a23 	vadd.f32	s5, s6, s7
 800ba82:	ee74 6a24 	vadd.f32	s13, s8, s9
 800ba86:	ee37 5a27 	vadd.f32	s10, s14, s15
 800ba8a:	ee73 3a63 	vsub.f32	s7, s6, s7
 800ba8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba92:	ee34 3a64 	vsub.f32	s6, s8, s9
 800ba96:	ee75 4a86 	vadd.f32	s9, s11, s12
 800ba9a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800ba9e:	ee62 2a80 	vmul.f32	s5, s5, s0
 800baa2:	ee26 7a00 	vmul.f32	s14, s12, s0
 800baa6:	ee63 5a80 	vmul.f32	s11, s7, s0
 800baaa:	ee23 4a00 	vmul.f32	s8, s6, s0
 800baae:	ee66 6a80 	vmul.f32	s13, s13, s0
 800bab2:	ee64 4a80 	vmul.f32	s9, s9, s0
 800bab6:	ee25 6a00 	vmul.f32	s12, s10, s0
 800baba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800babe:	3a01      	subs	r2, #1
 800bac0:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 800bac4:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
 800bac8:	ed03 4a04 	vstr	s8, [r3, #-16]
 800bacc:	ed43 6a02 	vstr	s13, [r3, #-8]
 800bad0:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 800bad4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 800bad8:	ed03 6a03 	vstr	s12, [r3, #-12]
 800badc:	ed43 7a01 	vstr	s15, [r3, #-4]
 800bae0:	f103 0320 	add.w	r3, r3, #32
 800bae4:	d1ab      	bne.n	800ba3e <arm_radix4_butterfly_inverse_f32+0x2fe>
 800bae6:	b00d      	add	sp, #52	; 0x34
 800bae8:	ecbd 8b08 	vpop	{d8-d11}
 800baec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baf0 <arm_cfft_radix4_f32>:
 800baf0:	b570      	push	{r4, r5, r6, lr}
 800baf2:	7883      	ldrb	r3, [r0, #2]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	4604      	mov	r4, r0
 800baf8:	460d      	mov	r5, r1
 800bafa:	d009      	beq.n	800bb10 <arm_cfft_radix4_f32+0x20>
 800bafc:	8983      	ldrh	r3, [r0, #12]
 800bafe:	6842      	ldr	r2, [r0, #4]
 800bb00:	8801      	ldrh	r1, [r0, #0]
 800bb02:	4628      	mov	r0, r5
 800bb04:	f7ff fc52 	bl	800b3ac <arm_radix4_butterfly_f32>
 800bb08:	78e3      	ldrb	r3, [r4, #3]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d00b      	beq.n	800bb26 <arm_cfft_radix4_f32+0x36>
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	8983      	ldrh	r3, [r0, #12]
 800bb12:	ed90 0a04 	vldr	s0, [r0, #16]
 800bb16:	6842      	ldr	r2, [r0, #4]
 800bb18:	8801      	ldrh	r1, [r0, #0]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f7ff fe10 	bl	800b740 <arm_radix4_butterfly_inverse_f32>
 800bb20:	78e3      	ldrb	r3, [r4, #3]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d1f3      	bne.n	800bb0e <arm_cfft_radix4_f32+0x1e>
 800bb26:	4628      	mov	r0, r5
 800bb28:	68a3      	ldr	r3, [r4, #8]
 800bb2a:	89e2      	ldrh	r2, [r4, #14]
 800bb2c:	8821      	ldrh	r1, [r4, #0]
 800bb2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bb32:	f000 bac1 	b.w	800c0b8 <arm_bitreversal_f32>
 800bb36:	bf00      	nop

0800bb38 <arm_fir_decimate_init_f32>:
 800bb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3a:	9f07      	ldr	r7, [sp, #28]
 800bb3c:	fbb7 f4f2 	udiv	r4, r7, r2
 800bb40:	fb02 7414 	mls	r4, r2, r4, r7
 800bb44:	b98c      	cbnz	r4, 800bb6a <arm_fir_decimate_init_f32+0x32>
 800bb46:	4616      	mov	r6, r2
 800bb48:	f101 4280 	add.w	r2, r1, #1073741824	; 0x40000000
 800bb4c:	3a01      	subs	r2, #1
 800bb4e:	443a      	add	r2, r7
 800bb50:	4605      	mov	r5, r0
 800bb52:	8041      	strh	r1, [r0, #2]
 800bb54:	6043      	str	r3, [r0, #4]
 800bb56:	0092      	lsls	r2, r2, #2
 800bb58:	4621      	mov	r1, r4
 800bb5a:	9806      	ldr	r0, [sp, #24]
 800bb5c:	f000 fb1c 	bl	800c198 <memset>
 800bb60:	9b06      	ldr	r3, [sp, #24]
 800bb62:	60ab      	str	r3, [r5, #8]
 800bb64:	702e      	strb	r6, [r5, #0]
 800bb66:	4620      	mov	r0, r4
 800bb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb6a:	f06f 0001 	mvn.w	r0, #1
 800bb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bb70 <arm_fir_decimate_f32>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	ed2d 8b08 	vpush	{d8-d11}
 800bb78:	4683      	mov	fp, r0
 800bb7a:	b08d      	sub	sp, #52	; 0x34
 800bb7c:	8840      	ldrh	r0, [r0, #2]
 800bb7e:	9009      	str	r0, [sp, #36]	; 0x24
 800bb80:	4605      	mov	r5, r0
 800bb82:	f89b 0000 	ldrb.w	r0, [fp]
 800bb86:	fbb3 f3f0 	udiv	r3, r3, r0
 800bb8a:	089c      	lsrs	r4, r3, #2
 800bb8c:	eba3 0384 	sub.w	r3, r3, r4, lsl #2
 800bb90:	f8db 6008 	ldr.w	r6, [fp, #8]
 800bb94:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb96:	f105 4980 	add.w	r9, r5, #1073741824	; 0x40000000
 800bb9a:	f109 39ff 	add.w	r9, r9, #4294967295
 800bb9e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bba2:	940a      	str	r4, [sp, #40]	; 0x28
 800bba4:	9208      	str	r2, [sp, #32]
 800bba6:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 800bbaa:	9302      	str	r3, [sp, #8]
 800bbac:	2c00      	cmp	r4, #0
 800bbae:	f000 80fa 	beq.w	800bda6 <arm_fir_decimate_f32+0x236>
 800bbb2:	4627      	mov	r7, r4
 800bbb4:	462c      	mov	r4, r5
 800bbb6:	08ad      	lsrs	r5, r5, #2
 800bbb8:	9505      	str	r5, [sp, #20]
 800bbba:	012d      	lsls	r5, r5, #4
 800bbbc:	442b      	add	r3, r5
 800bbbe:	4696      	mov	lr, r2
 800bbc0:	9307      	str	r3, [sp, #28]
 800bbc2:	f004 0303 	and.w	r3, r4, #3
 800bbc6:	f8cd b010 	str.w	fp, [sp, #16]
 800bbca:	4602      	mov	r2, r0
 800bbcc:	9306      	str	r3, [sp, #24]
 800bbce:	f10e 0a10 	add.w	sl, lr, #16
 800bbd2:	9703      	str	r7, [sp, #12]
 800bbd4:	f8cd 9004 	str.w	r9, [sp, #4]
 800bbd8:	46ab      	mov	fp, r5
 800bbda:	464c      	mov	r4, r9
 800bbdc:	0092      	lsls	r2, r2, #2
 800bbde:	4613      	mov	r3, r2
 800bbe0:	4608      	mov	r0, r1
 800bbe2:	f850 5b04 	ldr.w	r5, [r0], #4
 800bbe6:	f844 5b04 	str.w	r5, [r4], #4
 800bbea:	3b01      	subs	r3, #1
 800bbec:	d1f9      	bne.n	800bbe2 <arm_fir_decimate_f32+0x72>
 800bbee:	9b04      	ldr	r3, [sp, #16]
 800bbf0:	eddf 5abc 	vldr	s11, [pc, #752]	; 800bee4 <arm_fir_decimate_f32+0x374>
 800bbf4:	f893 8000 	ldrb.w	r8, [r3]
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	9f05      	ldr	r7, [sp, #20]
 800bbfc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 800bc00:	0092      	lsls	r2, r2, #2
 800bc02:	eb06 0e08 	add.w	lr, r6, r8
 800bc06:	eb0e 0c08 	add.w	ip, lr, r8
 800bc0a:	4413      	add	r3, r2
 800bc0c:	9301      	str	r3, [sp, #4]
 800bc0e:	4411      	add	r1, r2
 800bc10:	eb0c 0908 	add.w	r9, ip, r8
 800bc14:	eeb0 3a65 	vmov.f32	s6, s11
 800bc18:	eef0 2a65 	vmov.f32	s5, s11
 800bc1c:	eeb0 2a65 	vmov.f32	s4, s11
 800bc20:	2f00      	cmp	r7, #0
 800bc22:	f000 815b 	beq.w	800bedc <arm_fir_decimate_f32+0x36c>
 800bc26:	9b02      	ldr	r3, [sp, #8]
 800bc28:	f106 0410 	add.w	r4, r6, #16
 800bc2c:	f103 0510 	add.w	r5, r3, #16
 800bc30:	f10e 0010 	add.w	r0, lr, #16
 800bc34:	f10c 0210 	add.w	r2, ip, #16
 800bc38:	f109 0310 	add.w	r3, r9, #16
 800bc3c:	ed15 6a04 	vldr	s12, [r5, #-16]
 800bc40:	ed53 3a04 	vldr	s7, [r3, #-16]
 800bc44:	ed54 ba04 	vldr	s23, [r4, #-16]
 800bc48:	ed10 aa04 	vldr	s20, [r0, #-16]
 800bc4c:	ed12 0a04 	vldr	s0, [r2, #-16]
 800bc50:	ed55 6a03 	vldr	s13, [r5, #-12]
 800bc54:	ed52 0a03 	vldr	s1, [r2, #-12]
 800bc58:	ed13 4a03 	vldr	s8, [r3, #-12]
 800bc5c:	ed14 ba03 	vldr	s22, [r4, #-12]
 800bc60:	ed50 9a03 	vldr	s19, [r0, #-12]
 800bc64:	ed15 7a02 	vldr	s14, [r5, #-8]
 800bc68:	ed53 4a02 	vldr	s9, [r3, #-8]
 800bc6c:	ed54 aa02 	vldr	s21, [r4, #-8]
 800bc70:	ed50 8a02 	vldr	s17, [r0, #-8]
 800bc74:	ed12 1a02 	vldr	s2, [r2, #-8]
 800bc78:	ed55 7a01 	vldr	s15, [r5, #-4]
 800bc7c:	ed14 9a01 	vldr	s18, [r4, #-4]
 800bc80:	ed10 8a01 	vldr	s16, [r0, #-4]
 800bc84:	ed52 1a01 	vldr	s3, [r2, #-4]
 800bc88:	ed13 5a01 	vldr	s10, [r3, #-4]
 800bc8c:	ee66 ba2b 	vmul.f32	s23, s12, s23
 800bc90:	ee26 aa0a 	vmul.f32	s20, s12, s20
 800bc94:	ee26 0a00 	vmul.f32	s0, s12, s0
 800bc98:	ee26 6a23 	vmul.f32	s12, s12, s7
 800bc9c:	ee3b 2a82 	vadd.f32	s4, s23, s4
 800bca0:	ee66 3aa0 	vmul.f32	s7, s13, s1
 800bca4:	ee76 5a25 	vadd.f32	s11, s12, s11
 800bca8:	ee26 ba8b 	vmul.f32	s22, s13, s22
 800bcac:	ee7a 2a22 	vadd.f32	s5, s20, s5
 800bcb0:	ee66 9aa9 	vmul.f32	s19, s13, s19
 800bcb4:	ee30 3a03 	vadd.f32	s6, s0, s6
 800bcb8:	ee66 6a84 	vmul.f32	s13, s13, s8
 800bcbc:	ee33 6a83 	vadd.f32	s12, s7, s6
 800bcc0:	ee3b 4a02 	vadd.f32	s8, s22, s4
 800bcc4:	ee27 3a01 	vmul.f32	s6, s14, s2
 800bcc8:	ee27 2a2a 	vmul.f32	s4, s14, s21
 800bccc:	ee79 0aa2 	vadd.f32	s1, s19, s5
 800bcd0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 800bcd4:	ee67 2a28 	vmul.f32	s5, s14, s17
 800bcd8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800bcdc:	ee72 3a04 	vadd.f32	s7, s4, s8
 800bce0:	ee73 4a06 	vadd.f32	s9, s6, s12
 800bce4:	ee27 2a89 	vmul.f32	s4, s15, s18
 800bce8:	ee32 4aa0 	vadd.f32	s8, s5, s1
 800bcec:	ee27 3aa1 	vmul.f32	s6, s15, s3
 800bcf0:	ee67 2a88 	vmul.f32	s5, s15, s16
 800bcf4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800bcf8:	ee67 7a85 	vmul.f32	s15, s15, s10
 800bcfc:	3f01      	subs	r7, #1
 800bcfe:	f105 0510 	add.w	r5, r5, #16
 800bd02:	ee32 2a23 	vadd.f32	s4, s4, s7
 800bd06:	f104 0410 	add.w	r4, r4, #16
 800bd0a:	ee72 2a84 	vadd.f32	s5, s5, s8
 800bd0e:	f100 0010 	add.w	r0, r0, #16
 800bd12:	ee33 3a24 	vadd.f32	s6, s6, s9
 800bd16:	f102 0210 	add.w	r2, r2, #16
 800bd1a:	ee77 5a87 	vadd.f32	s11, s15, s14
 800bd1e:	f103 0310 	add.w	r3, r3, #16
 800bd22:	d18b      	bne.n	800bc3c <arm_fir_decimate_f32+0xcc>
 800bd24:	9a07      	ldr	r2, [sp, #28]
 800bd26:	445e      	add	r6, fp
 800bd28:	44de      	add	lr, fp
 800bd2a:	44dc      	add	ip, fp
 800bd2c:	eb09 000b 	add.w	r0, r9, fp
 800bd30:	9b06      	ldr	r3, [sp, #24]
 800bd32:	b1db      	cbz	r3, 800bd6c <arm_fir_decimate_f32+0x1fc>
 800bd34:	ecf2 7a01 	vldmia	r2!, {s15}
 800bd38:	ecb6 5a01 	vldmia	r6!, {s10}
 800bd3c:	ecbe 6a01 	vldmia	lr!, {s12}
 800bd40:	ecfc 6a01 	vldmia	ip!, {s13}
 800bd44:	ecb0 7a01 	vldmia	r0!, {s14}
 800bd48:	ee27 5a85 	vmul.f32	s10, s15, s10
 800bd4c:	ee27 6a86 	vmul.f32	s12, s15, s12
 800bd50:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800bd54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	ee32 2a05 	vadd.f32	s4, s4, s10
 800bd5e:	ee72 2a86 	vadd.f32	s5, s5, s12
 800bd62:	ee33 3a26 	vadd.f32	s6, s6, s13
 800bd66:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800bd6a:	d1e3      	bne.n	800bd34 <arm_fir_decimate_f32+0x1c4>
 800bd6c:	9b03      	ldr	r3, [sp, #12]
 800bd6e:	ed0a 2a04 	vstr	s4, [sl, #-16]
 800bd72:	3b01      	subs	r3, #1
 800bd74:	ed4a 2a03 	vstr	s5, [sl, #-12]
 800bd78:	ed0a 3a02 	vstr	s6, [sl, #-8]
 800bd7c:	ed4a 5a01 	vstr	s11, [sl, #-4]
 800bd80:	eb09 0608 	add.w	r6, r9, r8
 800bd84:	f10a 0a10 	add.w	sl, sl, #16
 800bd88:	9303      	str	r3, [sp, #12]
 800bd8a:	d003      	beq.n	800bd94 <arm_fir_decimate_f32+0x224>
 800bd8c:	9b04      	ldr	r3, [sp, #16]
 800bd8e:	9c01      	ldr	r4, [sp, #4]
 800bd90:	781a      	ldrb	r2, [r3, #0]
 800bd92:	e723      	b.n	800bbdc <arm_fir_decimate_f32+0x6c>
 800bd94:	9b08      	ldr	r3, [sp, #32]
 800bd96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd98:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bd9c:	f8dd b010 	ldr.w	fp, [sp, #16]
 800bda0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800bda4:	9308      	str	r3, [sp, #32]
 800bda6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d061      	beq.n	800be70 <arm_fir_decimate_f32+0x300>
 800bdac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdae:	9802      	ldr	r0, [sp, #8]
 800bdb0:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bdb4:	0895      	lsrs	r5, r2, #2
 800bdb6:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800bdba:	eb00 0c0e 	add.w	ip, r0, lr
 800bdbe:	f002 0703 	and.w	r7, r2, #3
 800bdc2:	4698      	mov	r8, r3
 800bdc4:	f89b 4000 	ldrb.w	r4, [fp]
 800bdc8:	4648      	mov	r0, r9
 800bdca:	4623      	mov	r3, r4
 800bdcc:	460a      	mov	r2, r1
 800bdce:	ecf2 7a01 	vldmia	r2!, {s15}
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	ece0 7a01 	vstmia	r0!, {s15}
 800bdd8:	d1f9      	bne.n	800bdce <arm_fir_decimate_f32+0x25e>
 800bdda:	00a4      	lsls	r4, r4, #2
 800bddc:	44a1      	add	r9, r4
 800bdde:	4421      	add	r1, r4
 800bde0:	eddf 7a40 	vldr	s15, [pc, #256]	; 800bee4 <arm_fir_decimate_f32+0x374>
 800bde4:	2d00      	cmp	r5, #0
 800bde6:	d076      	beq.n	800bed6 <arm_fir_decimate_f32+0x366>
 800bde8:	9b02      	ldr	r3, [sp, #8]
 800bdea:	4628      	mov	r0, r5
 800bdec:	f103 0210 	add.w	r2, r3, #16
 800bdf0:	f106 0310 	add.w	r3, r6, #16
 800bdf4:	ed53 6a04 	vldr	s13, [r3, #-16]
 800bdf8:	ed12 4a04 	vldr	s8, [r2, #-16]
 800bdfc:	ed52 3a03 	vldr	s7, [r2, #-12]
 800be00:	ed13 5a03 	vldr	s10, [r3, #-12]
 800be04:	ed52 4a02 	vldr	s9, [r2, #-8]
 800be08:	ed13 6a02 	vldr	s12, [r3, #-8]
 800be0c:	ed52 5a01 	vldr	s11, [r2, #-4]
 800be10:	ed13 7a01 	vldr	s14, [r3, #-4]
 800be14:	ee24 4a26 	vmul.f32	s8, s8, s13
 800be18:	ee23 5a85 	vmul.f32	s10, s7, s10
 800be1c:	ee74 6a27 	vadd.f32	s13, s8, s15
 800be20:	ee24 6a86 	vmul.f32	s12, s9, s12
 800be24:	ee75 6a26 	vadd.f32	s13, s10, s13
 800be28:	ee25 7a87 	vmul.f32	s14, s11, s14
 800be2c:	ee76 7a26 	vadd.f32	s15, s12, s13
 800be30:	3801      	subs	r0, #1
 800be32:	f102 0210 	add.w	r2, r2, #16
 800be36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be3a:	f103 0310 	add.w	r3, r3, #16
 800be3e:	d1d9      	bne.n	800bdf4 <arm_fir_decimate_f32+0x284>
 800be40:	eb06 020e 	add.w	r2, r6, lr
 800be44:	4660      	mov	r0, ip
 800be46:	b157      	cbz	r7, 800be5e <arm_fir_decimate_f32+0x2ee>
 800be48:	463b      	mov	r3, r7
 800be4a:	ecf0 6a01 	vldmia	r0!, {s13}
 800be4e:	ecb2 7a01 	vldmia	r2!, {s14}
 800be52:	ee26 7a87 	vmul.f32	s14, s13, s14
 800be56:	3b01      	subs	r3, #1
 800be58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be5c:	d1f5      	bne.n	800be4a <arm_fir_decimate_f32+0x2da>
 800be5e:	f89b 3000 	ldrb.w	r3, [fp]
 800be62:	ecea 7a01 	vstmia	sl!, {s15}
 800be66:	f1b8 0801 	subs.w	r8, r8, #1
 800be6a:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 800be6e:	d1a9      	bne.n	800bdc4 <arm_fir_decimate_f32+0x254>
 800be70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be72:	f8db 4008 	ldr.w	r4, [fp, #8]
 800be76:	1e59      	subs	r1, r3, #1
 800be78:	088f      	lsrs	r7, r1, #2
 800be7a:	d01d      	beq.n	800beb8 <arm_fir_decimate_f32+0x348>
 800be7c:	f104 0210 	add.w	r2, r4, #16
 800be80:	f106 0310 	add.w	r3, r6, #16
 800be84:	4638      	mov	r0, r7
 800be86:	f853 5c10 	ldr.w	r5, [r3, #-16]
 800be8a:	f842 5c10 	str.w	r5, [r2, #-16]
 800be8e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 800be92:	f842 5c0c 	str.w	r5, [r2, #-12]
 800be96:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800be9a:	f842 5c08 	str.w	r5, [r2, #-8]
 800be9e:	f853 5c04 	ldr.w	r5, [r3, #-4]
 800bea2:	f842 5c04 	str.w	r5, [r2, #-4]
 800bea6:	3801      	subs	r0, #1
 800bea8:	f103 0310 	add.w	r3, r3, #16
 800beac:	f102 0210 	add.w	r2, r2, #16
 800beb0:	d1e9      	bne.n	800be86 <arm_fir_decimate_f32+0x316>
 800beb2:	013b      	lsls	r3, r7, #4
 800beb4:	441c      	add	r4, r3
 800beb6:	441e      	add	r6, r3
 800beb8:	f011 0303 	ands.w	r3, r1, #3
 800bebc:	d006      	beq.n	800becc <arm_fir_decimate_f32+0x35c>
 800bebe:	4622      	mov	r2, r4
 800bec0:	f856 1b04 	ldr.w	r1, [r6], #4
 800bec4:	f842 1b04 	str.w	r1, [r2], #4
 800bec8:	3b01      	subs	r3, #1
 800beca:	d1f9      	bne.n	800bec0 <arm_fir_decimate_f32+0x350>
 800becc:	b00d      	add	sp, #52	; 0x34
 800bece:	ecbd 8b08 	vpop	{d8-d11}
 800bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed6:	9802      	ldr	r0, [sp, #8]
 800bed8:	4632      	mov	r2, r6
 800beda:	e7b4      	b.n	800be46 <arm_fir_decimate_f32+0x2d6>
 800bedc:	4648      	mov	r0, r9
 800bede:	9a02      	ldr	r2, [sp, #8]
 800bee0:	e726      	b.n	800bd30 <arm_fir_decimate_f32+0x1c0>
 800bee2:	bf00      	nop
 800bee4:	00000000 	.word	0x00000000

0800bee8 <arm_cmplx_mag_f32>:
 800bee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beec:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800bef0:	b084      	sub	sp, #16
 800bef2:	d07f      	beq.n	800bff4 <arm_cmplx_mag_f32+0x10c>
 800bef4:	2700      	movs	r7, #0
 800bef6:	f100 0420 	add.w	r4, r0, #32
 800befa:	f101 0510 	add.w	r5, r1, #16
 800befe:	4646      	mov	r6, r8
 800bf00:	e05a      	b.n	800bfb8 <arm_cmplx_mag_f32+0xd0>
 800bf02:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bf06:	eeb4 0a40 	vcmp.f32	s0, s0
 800bf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf0e:	f040 80a4 	bne.w	800c05a <arm_cmplx_mag_f32+0x172>
 800bf12:	ed05 0a04 	vstr	s0, [r5, #-16]
 800bf16:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800bf1a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800bf1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf22:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bf26:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf32:	f2c0 808f 	blt.w	800c054 <arm_cmplx_mag_f32+0x16c>
 800bf36:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bf3a:	eeb4 0a40 	vcmp.f32	s0, s0
 800bf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf42:	f040 80af 	bne.w	800c0a4 <arm_cmplx_mag_f32+0x1bc>
 800bf46:	ed05 0a03 	vstr	s0, [r5, #-12]
 800bf4a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800bf4e:	ed14 0a03 	vldr	s0, [r4, #-12]
 800bf52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf56:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bf5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf66:	db72      	blt.n	800c04e <arm_cmplx_mag_f32+0x166>
 800bf68:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bf6c:	eeb4 0a40 	vcmp.f32	s0, s0
 800bf70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf74:	f040 808c 	bne.w	800c090 <arm_cmplx_mag_f32+0x1a8>
 800bf78:	ed05 0a02 	vstr	s0, [r5, #-8]
 800bf7c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800bf80:	ed14 0a01 	vldr	s0, [r4, #-4]
 800bf84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bf88:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bf8c:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bf90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf98:	db20      	blt.n	800bfdc <arm_cmplx_mag_f32+0xf4>
 800bf9a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800bf9e:	eeb4 0a40 	vcmp.f32	s0, s0
 800bfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa6:	d169      	bne.n	800c07c <arm_cmplx_mag_f32+0x194>
 800bfa8:	3e01      	subs	r6, #1
 800bfaa:	ed05 0a01 	vstr	s0, [r5, #-4]
 800bfae:	f104 0420 	add.w	r4, r4, #32
 800bfb2:	f105 0510 	add.w	r5, r5, #16
 800bfb6:	d019      	beq.n	800bfec <arm_cmplx_mag_f32+0x104>
 800bfb8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800bfbc:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800bfc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bfc4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800bfc8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800bfcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bfd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd4:	da95      	bge.n	800bf02 <arm_cmplx_mag_f32+0x1a>
 800bfd6:	f845 7c10 	str.w	r7, [r5, #-16]
 800bfda:	e79c      	b.n	800bf16 <arm_cmplx_mag_f32+0x2e>
 800bfdc:	3e01      	subs	r6, #1
 800bfde:	f845 7c04 	str.w	r7, [r5, #-4]
 800bfe2:	f104 0420 	add.w	r4, r4, #32
 800bfe6:	f105 0510 	add.w	r5, r5, #16
 800bfea:	d1e5      	bne.n	800bfb8 <arm_cmplx_mag_f32+0xd0>
 800bfec:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800bff0:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800bff4:	f012 0503 	ands.w	r5, r2, #3
 800bff8:	d026      	beq.n	800c048 <arm_cmplx_mag_f32+0x160>
 800bffa:	2600      	movs	r6, #0
 800bffc:	f100 0408 	add.w	r4, r0, #8
 800c000:	e00c      	b.n	800c01c <arm_cmplx_mag_f32+0x134>
 800c002:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800c006:	eeb4 0a40 	vcmp.f32	s0, s0
 800c00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00e:	d12e      	bne.n	800c06e <arm_cmplx_mag_f32+0x186>
 800c010:	3d01      	subs	r5, #1
 800c012:	ed01 0a01 	vstr	s0, [r1, #-4]
 800c016:	f104 0408 	add.w	r4, r4, #8
 800c01a:	d015      	beq.n	800c048 <arm_cmplx_mag_f32+0x160>
 800c01c:	ed54 7a02 	vldr	s15, [r4, #-8]
 800c020:	ed14 0a01 	vldr	s0, [r4, #-4]
 800c024:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c028:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c02c:	3104      	adds	r1, #4
 800c02e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c03a:	dae2      	bge.n	800c002 <arm_cmplx_mag_f32+0x11a>
 800c03c:	3d01      	subs	r5, #1
 800c03e:	f841 6c04 	str.w	r6, [r1, #-4]
 800c042:	f104 0408 	add.w	r4, r4, #8
 800c046:	d1e9      	bne.n	800c01c <arm_cmplx_mag_f32+0x134>
 800c048:	b004      	add	sp, #16
 800c04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c04e:	f845 7c08 	str.w	r7, [r5, #-8]
 800c052:	e793      	b.n	800bf7c <arm_cmplx_mag_f32+0x94>
 800c054:	f845 7c0c 	str.w	r7, [r5, #-12]
 800c058:	e777      	b.n	800bf4a <arm_cmplx_mag_f32+0x62>
 800c05a:	eeb0 0a67 	vmov.f32	s0, s15
 800c05e:	9203      	str	r2, [sp, #12]
 800c060:	9102      	str	r1, [sp, #8]
 800c062:	9001      	str	r0, [sp, #4]
 800c064:	f000 f8d8 	bl	800c218 <sqrtf>
 800c068:	a801      	add	r0, sp, #4
 800c06a:	c807      	ldmia	r0, {r0, r1, r2}
 800c06c:	e751      	b.n	800bf12 <arm_cmplx_mag_f32+0x2a>
 800c06e:	eeb0 0a67 	vmov.f32	s0, s15
 800c072:	9101      	str	r1, [sp, #4]
 800c074:	f000 f8d0 	bl	800c218 <sqrtf>
 800c078:	9901      	ldr	r1, [sp, #4]
 800c07a:	e7c9      	b.n	800c010 <arm_cmplx_mag_f32+0x128>
 800c07c:	eeb0 0a67 	vmov.f32	s0, s15
 800c080:	9203      	str	r2, [sp, #12]
 800c082:	9102      	str	r1, [sp, #8]
 800c084:	9001      	str	r0, [sp, #4]
 800c086:	f000 f8c7 	bl	800c218 <sqrtf>
 800c08a:	a801      	add	r0, sp, #4
 800c08c:	c807      	ldmia	r0, {r0, r1, r2}
 800c08e:	e78b      	b.n	800bfa8 <arm_cmplx_mag_f32+0xc0>
 800c090:	eeb0 0a67 	vmov.f32	s0, s15
 800c094:	9203      	str	r2, [sp, #12]
 800c096:	9102      	str	r1, [sp, #8]
 800c098:	9001      	str	r0, [sp, #4]
 800c09a:	f000 f8bd 	bl	800c218 <sqrtf>
 800c09e:	a801      	add	r0, sp, #4
 800c0a0:	c807      	ldmia	r0, {r0, r1, r2}
 800c0a2:	e769      	b.n	800bf78 <arm_cmplx_mag_f32+0x90>
 800c0a4:	eeb0 0a67 	vmov.f32	s0, s15
 800c0a8:	9203      	str	r2, [sp, #12]
 800c0aa:	9102      	str	r1, [sp, #8]
 800c0ac:	9001      	str	r0, [sp, #4]
 800c0ae:	f000 f8b3 	bl	800c218 <sqrtf>
 800c0b2:	a801      	add	r0, sp, #4
 800c0b4:	c807      	ldmia	r0, {r0, r1, r2}
 800c0b6:	e746      	b.n	800bf46 <arm_cmplx_mag_f32+0x5e>

0800c0b8 <arm_bitreversal_f32>:
 800c0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0bc:	b085      	sub	sp, #20
 800c0be:	0849      	lsrs	r1, r1, #1
 800c0c0:	0052      	lsls	r2, r2, #1
 800c0c2:	2400      	movs	r4, #0
 800c0c4:	9203      	str	r2, [sp, #12]
 800c0c6:	1e8a      	subs	r2, r1, #2
 800c0c8:	9101      	str	r1, [sp, #4]
 800c0ca:	f101 0c01 	add.w	ip, r1, #1
 800c0ce:	9202      	str	r2, [sp, #8]
 800c0d0:	4621      	mov	r1, r4
 800c0d2:	4622      	mov	r2, r4
 800c0d4:	9d01      	ldr	r5, [sp, #4]
 800c0d6:	3101      	adds	r1, #1
 800c0d8:	442a      	add	r2, r5
 800c0da:	00c9      	lsls	r1, r1, #3
 800c0dc:	00d2      	lsls	r2, r2, #3
 800c0de:	1846      	adds	r6, r0, r1
 800c0e0:	1885      	adds	r5, r0, r2
 800c0e2:	3104      	adds	r1, #4
 800c0e4:	3204      	adds	r2, #4
 800c0e6:	6837      	ldr	r7, [r6, #0]
 800c0e8:	f8d5 e000 	ldr.w	lr, [r5]
 800c0ec:	f8c6 e000 	str.w	lr, [r6]
 800c0f0:	4401      	add	r1, r0
 800c0f2:	4402      	add	r2, r0
 800c0f4:	602f      	str	r7, [r5, #0]
 800c0f6:	3402      	adds	r4, #2
 800c0f8:	680e      	ldr	r6, [r1, #0]
 800c0fa:	f8d2 9000 	ldr.w	r9, [r2]
 800c0fe:	f8c1 9000 	str.w	r9, [r1]
 800c102:	b2a4      	uxth	r4, r4
 800c104:	6016      	str	r6, [r2, #0]
 800c106:	eb04 050c 	add.w	r5, r4, ip
 800c10a:	881a      	ldrh	r2, [r3, #0]
 800c10c:	00ed      	lsls	r5, r5, #3
 800c10e:	eb00 0e05 	add.w	lr, r0, r5
 800c112:	3504      	adds	r5, #4
 800c114:	9500      	str	r5, [sp, #0]
 800c116:	eb02 010c 	add.w	r1, r2, ip
 800c11a:	9d02      	ldr	r5, [sp, #8]
 800c11c:	00c9      	lsls	r1, r1, #3
 800c11e:	00e7      	lsls	r7, r4, #3
 800c120:	00d6      	lsls	r6, r2, #3
 800c122:	f101 0b04 	add.w	fp, r1, #4
 800c126:	eb00 0901 	add.w	r9, r0, r1
 800c12a:	42ac      	cmp	r4, r5
 800c12c:	9903      	ldr	r1, [sp, #12]
 800c12e:	9d00      	ldr	r5, [sp, #0]
 800c130:	eb00 0807 	add.w	r8, r0, r7
 800c134:	eb00 0a06 	add.w	sl, r0, r6
 800c138:	f107 0704 	add.w	r7, r7, #4
 800c13c:	f106 0604 	add.w	r6, r6, #4
 800c140:	440b      	add	r3, r1
 800c142:	4407      	add	r7, r0
 800c144:	4406      	add	r6, r0
 800c146:	4621      	mov	r1, r4
 800c148:	4405      	add	r5, r0
 800c14a:	4483      	add	fp, r0
 800c14c:	d820      	bhi.n	800c190 <arm_bitreversal_f32+0xd8>
 800c14e:	42a2      	cmp	r2, r4
 800c150:	d9c0      	bls.n	800c0d4 <arm_bitreversal_f32+0x1c>
 800c152:	edd8 7a00 	vldr	s15, [r8]
 800c156:	ed9a 7a00 	vldr	s14, [sl]
 800c15a:	ed88 7a00 	vstr	s14, [r8]
 800c15e:	edca 7a00 	vstr	s15, [sl]
 800c162:	f8d7 8000 	ldr.w	r8, [r7]
 800c166:	f8d6 a000 	ldr.w	sl, [r6]
 800c16a:	f8c7 a000 	str.w	sl, [r7]
 800c16e:	f8c6 8000 	str.w	r8, [r6]
 800c172:	f8de 6000 	ldr.w	r6, [lr]
 800c176:	f8d9 7000 	ldr.w	r7, [r9]
 800c17a:	f8ce 7000 	str.w	r7, [lr]
 800c17e:	f8c9 6000 	str.w	r6, [r9]
 800c182:	682e      	ldr	r6, [r5, #0]
 800c184:	f8db 7000 	ldr.w	r7, [fp]
 800c188:	602f      	str	r7, [r5, #0]
 800c18a:	f8cb 6000 	str.w	r6, [fp]
 800c18e:	e7a1      	b.n	800c0d4 <arm_bitreversal_f32+0x1c>
 800c190:	b005      	add	sp, #20
 800c192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c196:	bf00      	nop

0800c198 <memset>:
 800c198:	4402      	add	r2, r0
 800c19a:	4603      	mov	r3, r0
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d100      	bne.n	800c1a2 <memset+0xa>
 800c1a0:	4770      	bx	lr
 800c1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800c1a6:	e7f9      	b.n	800c19c <memset+0x4>

0800c1a8 <__errno>:
 800c1a8:	4b01      	ldr	r3, [pc, #4]	; (800c1b0 <__errno+0x8>)
 800c1aa:	6818      	ldr	r0, [r3, #0]
 800c1ac:	4770      	bx	lr
 800c1ae:	bf00      	nop
 800c1b0:	2000114c 	.word	0x2000114c

0800c1b4 <__libc_init_array>:
 800c1b4:	b570      	push	{r4, r5, r6, lr}
 800c1b6:	4d0d      	ldr	r5, [pc, #52]	; (800c1ec <__libc_init_array+0x38>)
 800c1b8:	4c0d      	ldr	r4, [pc, #52]	; (800c1f0 <__libc_init_array+0x3c>)
 800c1ba:	1b64      	subs	r4, r4, r5
 800c1bc:	10a4      	asrs	r4, r4, #2
 800c1be:	2600      	movs	r6, #0
 800c1c0:	42a6      	cmp	r6, r4
 800c1c2:	d109      	bne.n	800c1d8 <__libc_init_array+0x24>
 800c1c4:	4d0b      	ldr	r5, [pc, #44]	; (800c1f4 <__libc_init_array+0x40>)
 800c1c6:	4c0c      	ldr	r4, [pc, #48]	; (800c1f8 <__libc_init_array+0x44>)
 800c1c8:	f000 f848 	bl	800c25c <_init>
 800c1cc:	1b64      	subs	r4, r4, r5
 800c1ce:	10a4      	asrs	r4, r4, #2
 800c1d0:	2600      	movs	r6, #0
 800c1d2:	42a6      	cmp	r6, r4
 800c1d4:	d105      	bne.n	800c1e2 <__libc_init_array+0x2e>
 800c1d6:	bd70      	pop	{r4, r5, r6, pc}
 800c1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1dc:	4798      	blx	r3
 800c1de:	3601      	adds	r6, #1
 800c1e0:	e7ee      	b.n	800c1c0 <__libc_init_array+0xc>
 800c1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e6:	4798      	blx	r3
 800c1e8:	3601      	adds	r6, #1
 800c1ea:	e7f2      	b.n	800c1d2 <__libc_init_array+0x1e>
 800c1ec:	08014b20 	.word	0x08014b20
 800c1f0:	08014b20 	.word	0x08014b20
 800c1f4:	08014b20 	.word	0x08014b20
 800c1f8:	08014b24 	.word	0x08014b24

0800c1fc <memcpy>:
 800c1fc:	440a      	add	r2, r1
 800c1fe:	4291      	cmp	r1, r2
 800c200:	f100 33ff 	add.w	r3, r0, #4294967295
 800c204:	d100      	bne.n	800c208 <memcpy+0xc>
 800c206:	4770      	bx	lr
 800c208:	b510      	push	{r4, lr}
 800c20a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c20e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c212:	4291      	cmp	r1, r2
 800c214:	d1f9      	bne.n	800c20a <memcpy+0xe>
 800c216:	bd10      	pop	{r4, pc}

0800c218 <sqrtf>:
 800c218:	b508      	push	{r3, lr}
 800c21a:	ed2d 8b02 	vpush	{d8}
 800c21e:	eeb0 8a40 	vmov.f32	s16, s0
 800c222:	f000 f817 	bl	800c254 <__ieee754_sqrtf>
 800c226:	eeb4 8a48 	vcmp.f32	s16, s16
 800c22a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22e:	d60c      	bvs.n	800c24a <sqrtf+0x32>
 800c230:	eddf 8a07 	vldr	s17, [pc, #28]	; 800c250 <sqrtf+0x38>
 800c234:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23c:	d505      	bpl.n	800c24a <sqrtf+0x32>
 800c23e:	f7ff ffb3 	bl	800c1a8 <__errno>
 800c242:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c246:	2321      	movs	r3, #33	; 0x21
 800c248:	6003      	str	r3, [r0, #0]
 800c24a:	ecbd 8b02 	vpop	{d8}
 800c24e:	bd08      	pop	{r3, pc}
 800c250:	00000000 	.word	0x00000000

0800c254 <__ieee754_sqrtf>:
 800c254:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c258:	4770      	bx	lr
	...

0800c25c <_init>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	bf00      	nop
 800c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c262:	bc08      	pop	{r3}
 800c264:	469e      	mov	lr, r3
 800c266:	4770      	bx	lr

0800c268 <_fini>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	bf00      	nop
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr
